"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ photo_handler —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º IncrementalUI.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
–∏ –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω–≤–æ–π—Å–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
"""

import asyncio
import logging
import uuid
from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode

from app.utils.incremental_ui import IncrementalUI
from app import ocr, matcher, data_loader
from app.formatters.report import build_report
from app.keyboards import build_main_kb
from app.utils.md import clean_html

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º NotaStates –∏–∑ –º–æ–¥—É–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
from app.fsm.states import NotaStates

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
router = Router()

@router.message(F.photo)
async def photo_handler_incremental(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ –∏–Ω–≤–æ–π—Å–æ–≤ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ UI.
    
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–≥–ª—è–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ:
    1. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ
    2. OCR-—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
    3. –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
    4. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    
    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ Telegram —Å —Ñ–æ—Ç–æ
        state: FSM-–∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    user_id = message.from_user.id
    photo_id = message.photo[-1].file_id if message.photo else None
    req_id = uuid.uuid4().hex[:8]  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    
    logger.info(f"[{req_id}] –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è IncrementalUI
    ui = IncrementalUI(message.bot, message.chat.id)
    await ui.start("üì∏ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    
    try:
        # –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        file = await message.bot.get_file(message.photo[-1].file_id)
        
        # –ê–Ω–∏–º–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏
        await ui.start_spinner()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        img_bytes = await message.bot.download_file(file.file_path)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –∏ –æ–±–Ω–æ–≤–ª—è–µ–º UI
        ui.stop_spinner()
        await ui.update("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ")
        logger.info(f"[{req_id}] –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ, —Ä–∞–∑–º–µ—Ä {len(img_bytes.getvalue())} –±–∞–π—Ç")
        
        # –®–∞–≥ 2: OCR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        await ui.append("üîç –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ (OCR)...")
        await ui.start_spinner()
        
        # –ó–∞–ø—É—Å–∫ OCR –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–π —Ä–∞–±–æ—Ç—ã
        ocr_result = await asyncio.to_thread(ocr.call_openai_ocr, img_bytes.getvalue())
        
        ui.stop_spinner()
        positions_count = len(ocr_result.positions) if ocr_result.positions else 0
        await ui.update(f"‚úÖ –¢–µ–∫—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω: –Ω–∞–π–¥–µ–Ω–æ {positions_count} –ø–æ–∑–∏—Ü–∏–π")
        logger.info(f"[{req_id}] OCR —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ {positions_count} –ø–æ–∑–∏—Ü–∏–π")
        
        # –®–∞–≥ 3: –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
        await ui.append("üîÑ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π...")
        await ui.start_spinner()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        products = data_loader.load_products("data/base_products.csv")
        
        # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
        match_results = matcher.match_positions(ocr_result.positions, products)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        ok_count = sum(1 for item in match_results if item.get("status") == "ok")
        unknown_count = sum(1 for item in match_results if item.get("status") == "unknown")
        partial_count = positions_count - ok_count - unknown_count
        
        ui.stop_spinner()
        await ui.update(f"‚úÖ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {ok_count} ‚úì, {unknown_count} ‚ùå, {partial_count} ‚ö†Ô∏è")
        logger.info(f"[{req_id}] –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {ok_count} OK, {unknown_count} unknown, {partial_count} partial")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
        from bot import user_matches
        user_matches[(user_id, 0)] = {  # 0 - –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID, –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∏–∂–µ
            "parsed_data": ocr_result,
            "match_results": match_results,
            "photo_id": photo_id,
            "req_id": req_id,
        }
        
        # –®–∞–≥ 4: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        await ui.append("üìã –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...")
        await ui.start_spinner()
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –¥–ª—è HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        report_text, has_errors = build_report(ocr_result, match_results, escape_html=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º invoice –≤ state –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await state.update_data(invoice=ocr_result)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ keyboards
        from app.keyboards import build_main_kb
        
        # –ù–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ - —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "–û—Ç–º–µ–Ω–∞" –∏ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" (–µ—Å–ª–∏ –Ω–µ—Ç –æ—à–∏–±–æ–∫)
        inline_kb = build_main_kb(has_errors=True if unknown_count + partial_count > 0 else False)
        
        ui.stop_spinner()
        # –ó–∞–≤–µ—Ä—à–∞–µ–º UI —Å –∫—Ä–∞—Ç–∫–∏–º —Ä–µ–∑—é–º–µ
        await ui.complete("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å HTML –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏
            telegram_html_tags = ["<b>", "<i>", "<u>", "<s>", "<strike>", "<del>", "<code>", "<pre>", "<a"]
            has_valid_html = any(tag in report_text for tag in telegram_html_tags)
            
            if "<pre>" in report_text and "</pre>" not in report_text:
                logger.warning("Unclosed <pre> tag detected in message, attempting to fix")
                report_text = report_text.replace("<pre>", "<pre>") + "</pre>"
                
            logger.debug(f"Sending report with HTML formatting (valid HTML tags: {has_valid_html})")
            report_msg = await message.answer(
                report_text,
                reply_markup=inline_kb,
                parse_mode=ParseMode.HTML
            )
            logger.debug(f"Successfully sent HTML-formatted report with message_id={report_msg.message_id}")
        except Exception as html_err:
            logger.warning(f"Error sending HTML report: {str(html_err)}")
            
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            try:
                logger.debug("Attempting to send report without formatting")
                report_msg = await message.answer(
                    report_text,
                    reply_markup=inline_kb,
                    parse_mode=None
                )
                logger.debug(f"Successfully sent plain report with message_id={report_msg.message_id}")
            except Exception as plain_err:
                logger.warning(f"Error sending plain report: {str(plain_err)}")
                
                # –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç - –æ—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç HTML –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                try:
                    logger.debug("Sending report with cleaned HTML")
                    cleaned_message = clean_html(report_text)
                    report_msg = await message.answer(
                        cleaned_message,
                        reply_markup=inline_kb,
                        parse_mode=None
                    )
                    logger.debug(f"Successfully sent cleaned report with message_id={report_msg.message_id}")
                except Exception as clean_err:
                    logger.error(f"All report sending attempts failed: {str(clean_err)}")
                    
                    # –ö—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
                    try:
                        simple_message = (
                            f"üìã –ù–∞–π–¥–µ–Ω–æ {positions_count} –ø–æ–∑–∏—Ü–∏–π. "
                            f"‚úÖ OK: {ok_count}. "
                            f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã: {unknown_count + partial_count}."
                        )
                        report_msg = await message.answer(
                            simple_message, 
                            reply_markup=inline_kb, 
                            parse_mode=None
                        )
                        logger.debug(f"Sent summary message with message_id={report_msg.message_id}")
                    except Exception as final_err:
                        logger.error(f"All message attempts failed: {str(final_err)}")
                        report_msg = None
        
        # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –≤ user_matches
        if report_msg:
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º message_id –≤ user_matches
                entry = user_matches.pop((user_id, 0), None)
                if entry:
                    new_key = (user_id, report_msg.message_id)
                    user_matches[new_key] = entry
                    logger.debug(f"Updated user_matches with new message_id={report_msg.message_id}")
            except Exception as key_err:
                logger.error(f"Error updating user_matches: {str(key_err)}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await state.set_state(NotaStates.editing)
        logger.info(f"[{req_id}] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–≤–æ–π—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        logger.error(f"[{req_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {str(e)}", exc_info=True)
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º UI —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ
        await ui.error(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(NotaStates.main_menu)