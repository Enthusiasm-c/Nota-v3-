"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ—Ç–æ–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞ —á–µ—Ä–µ–∑ GPT-3.5-turbo.
"""

import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from app.fsm.states import EditFree
from app.assistants.client import run_thread_safe, run_thread_safe_async
from app.edit.apply_intent import apply_intent
from app.formatters import report
from app.matcher import match_positions
from app.data_loader import load_products
from app.keyboards import build_main_kb
from app.converters import parsed_to_dict

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
router = Router()

@router.message(EditFree.awaiting_input)
async def handle_free_edit_text(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç GPT-3.5-turbo –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞.
    
    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ Telegram
        state: FSM-–∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    user_text = message.text.strip()
    logger.info("[edit_flow] –ù–æ–≤—ã–π –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", extra={"data": {"user_text": user_text}})
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã
    if user_text.lower() in ["–æ—Ç–º–µ–Ω–∞", "cancel"]:
        await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.set_state(None)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    logger.info("[edit_flow] State at handler start", extra={"data": data})
    invoice = data.get("invoice")
    
    if not invoice:
        logger.warning("[edit_flow] –ù–µ—Ç –∏–Ω–≤–æ–π—Å–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        await message.answer("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–Ω–≤–æ–π—Å –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.answer("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")
    
    try:
        logger.info("[edit_flow] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ OpenAI", extra={"data": {"user_text": user_text}})
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        intent = await run_thread_safe_async(user_text)
        logger.info("[edit_flow] –û—Ç–≤–µ—Ç OpenAI –ø–æ–ª—É—á–µ–Ω", extra={"data": {"intent": intent}})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ä–∞–∑–±–æ—Ä–∞
        if intent.get("action") == "unknown":
            error = intent.get("error", "unknown_error")
            logger.warning("[edit_flow] –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∫–æ–º–∞–Ω–¥—É", extra={"data": {"error": error}})
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
            try:
                await processing_msg.delete()
            except Exception:
                pass
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            error_message = intent.get("user_message", 
                "–ù–µ –ø–æ–Ω—è–ª, —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                "‚Ä¢ –¥–∞—Ç–∞ 16 –∞–ø—Ä–µ–ª—è\n"
                "‚Ä¢ —Å—Ç—Ä–æ–∫–∞ 2 —Ü–µ–Ω–∞ 95000"
            )
            
            await message.answer(error_message)
            return
            
        # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ invoice –∫ dict —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä
        from app.converters import parsed_to_dict
        invoice = parsed_to_dict(invoice)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–Ω—Ç–µ–Ω—Ç –∫ –∏–Ω–≤–æ–π—Å—É
        new_invoice = apply_intent(invoice, intent)
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—á—ë—Ç
        match_results = match_positions(new_invoice["positions"], load_products())
        text, has_errors = report.build_report(new_invoice, match_results)
    
        # Fuzzy-–ø–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–∑–∏—Ü–∏–∏
        from rapidfuzz import process as fuzzy_process
        products = load_products()
        product_names = [p.name for p in products]
        
        # –§–ª–∞–≥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –±—ã–ª–æ –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        was_changed = True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        for idx, item in enumerate(match_results):
            if item.get("status") == "unknown":
                name_to_check = item.get("name", "")
                # –ò—â–µ–º –±–ª–∏–∂–∞–π—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                result = fuzzy_process.extractOne(name_to_check, product_names, score_cutoff=82)
                if result:
                    suggestion, score = result[0], result[1]
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –ø–æ–¥—Å–∫–∞–∑–∫—É –≤ state –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –ª–æ–≥–∏–∫–∏
                    await state.update_data(
                        fuzzy_original=name_to_check, 
                        fuzzy_match=suggestion,
                        fuzzy_line=idx
                    )
                    
                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
                    try:
                        await processing_msg.delete()
                    except Exception:
                        pass
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
                    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
                    keyboard = InlineKeyboardMarkup(
                        inline_keyboard=[
                            [
                                InlineKeyboardButton(
                                    text="‚úì –î–∞", callback_data=f"fuzzy:confirm:{idx}"
                                ),
                                InlineKeyboardButton(
                                    text="‚úó –ù–µ—Ç", callback_data=f"fuzzy:reject:{idx}"
                                )
                            ]
                        ]
                    )
                    
                    await message.answer(
                        f"–ù–∞–≤–µ—Ä–Ω–æ–µ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É <b>{suggestion}</b>?",
                        parse_mode="HTML",
                        reply_markup=keyboard
                    )
                    break  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –ø–æ–¥—Å–∫–∞–∑–∫—É –∑–∞ —Ä–∞–∑
    
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø—Ä–æ–±–ª–µ–º
        issues_count = sum(1 for item in match_results if item.get("status", "") != "ok")
    
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(invoice=new_invoice, issues_count=issues_count)
    
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –æ—à–∏–±–æ–∫
        keyboard = build_main_kb(has_errors)
    
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        try:
            await processing_msg.delete()
        except Exception:
            pass
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –æ—Ç—á—ë—Ç
        await message.answer(
            text, 
            reply_markup=keyboard, 
            parse_mode="HTML"
        )
    
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        if was_changed:
            action_name = {
                "set_date": "–¥–∞—Ç–∞",
                "set_price": "—Ü–µ–Ω–∞",
                "set_name": "–Ω–∞–∑–≤–∞–Ω–∏–µ",
                "set_quantity": "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ",
                "set_unit": "–µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è",
                "add_line": "–Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è"
            }.get(intent.get("action", ""), "–∑–Ω–∞—á–µ–Ω–∏–µ")
            
            success_message = f"‚úÖ {action_name.capitalize()} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!"
            if not has_errors:
                success_message += " –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–Ω–≤–æ–π—Å."
                
            await message.answer(success_message)
    
        # –û—Å—Ç–∞—ë–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await state.set_state(EditFree.awaiting_input)
        
    except Exception as e:
        logger.error("[edit_flow] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã", extra={"data": {"error": str(e)}})
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        try:
            await processing_msg.delete()
        except Exception:
            pass
            
        await message.answer(
            "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n"
            "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        # –ù–µ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
@router.callback_query(F.data == "edit:free")
async def handle_edit_free(call: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å".
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    # –Ø–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º invoice –≤ state –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    data = await state.get_data()
    invoice = data.get("invoice")
    if invoice:
        await state.update_data(invoice=invoice)
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
    await state.set_state(EditFree.awaiting_input)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    await call.message.answer(
        "–ß—Ç–æ –Ω—É–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å? –ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:\n\n"
        "‚Ä¢ <i>–¥–∞—Ç–∞ 16 –∞–ø—Ä–µ–ª—è</i>\n"
        "‚Ä¢ <i>—Å—Ç—Ä–æ–∫–∞ 2 —Ü–µ–Ω–∞ 95000</i>\n"
        "‚Ä¢ <i>—Å—Ç—Ä–æ–∫–∞ 1 –Ω–∞–∑–≤–∞–Ω–∏–µ Apple</i>\n"
        "‚Ä¢ <i>—Å—Ç—Ä–æ–∫–∞ 3 –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 10</i>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ <i>–æ—Ç–º–µ–Ω–∞</i> –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.",
        parse_mode="HTML"
    )
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await call.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è fuzzy-—Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
@router.callback_query(F.data.startswith("fuzzy:confirm:"))
async def confirm_fuzzy_name(call: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è fuzzy-—Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏.
    
    Args:
        call: –û–±—ä–µ–∫—Ç callback –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–î–∞"
        state: FSM-–∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ –∏–∑ callback data
    line_idx = int(call.data.split(":")[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ state
    data = await state.get_data()
    fuzzy_match = data.get("fuzzy_match")  # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    fuzzy_original = data.get("fuzzy_original")  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    invoice = data.get("invoice")
    
    if not all([fuzzy_match, invoice]):
        await call.message.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await call.message.edit_reply_markup(reply_markup=None)
        await call.answer()
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await call.message.answer("üîÑ –ü—Ä–∏–º–µ–Ω—è—é –∏–∑–º–µ–Ω–µ–Ω–∏–µ...")
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        invoice = parsed_to_dict(invoice)
        if 0 <= line_idx < len(invoice.get("positions", [])):
            # –ò–∑–º–µ–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ
            invoice["positions"][line_idx]["name"] = fuzzy_match
            
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—á—ë—Ç
            match_results = match_positions(invoice["positions"], load_products())
            text, has_errors = report.build_report(invoice, match_results)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–ª–∏–∞—Å –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞
            product_id = None
            for pos in match_results:
                if pos.get("name") == fuzzy_match and pos.get("product_id"):
                    product_id = pos.get("product_id")
                    break
                    
            if product_id and fuzzy_original:
                from app.alias import add_alias
                add_alias(fuzzy_original, product_id)
                logger.info(f"[confirm_fuzzy_name] Added alias: {fuzzy_original} -> {product_id}")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø—Ä–æ–±–ª–µ–º
            issues_count = sum(1 for item in match_results if item.get("status", "") != "ok")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(invoice=invoice, issues_count=issues_count)
            
            # –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
            try:
                await processing_msg.delete()
            except Exception:
                pass
                
            # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π
            await call.message.edit_reply_markup(reply_markup=None)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –æ—à–∏–±–æ–∫
            keyboard = build_main_kb(has_errors)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –æ—Ç—á—ë—Ç
            await call.message.answer(
                text, 
                reply_markup=keyboard, 
                parse_mode="HTML"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
            success_message = f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ <b>{fuzzy_match}</b>!"
            if not has_errors:
                success_message += " –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–Ω–≤–æ–π—Å."
                
            await call.message.answer(success_message, parse_mode="HTML")
        else:
            await call.message.answer(f"–û—à–∏–±–∫–∞: –ø–æ–∑–∏—Ü–∏—è —Å –∏–Ω–¥–µ–∫—Å–æ–º {line_idx} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    
    except Exception as e:
        logger.error("[confirm_fuzzy_name] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è", extra={"data": {"error": str(e)}})
        
        # –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
        try:
            await processing_msg.delete()
        except Exception:
            pass
            
        await call.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await call.answer()
    
    # –û—Å—Ç–∞—ë–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.set_state(EditFree.awaiting_input)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è fuzzy-—Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
@router.callback_query(F.data.startswith("fuzzy:reject:"))
async def reject_fuzzy_name(call: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è fuzzy-—Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏.
    
    Args:
        call: –û–±—ä–µ–∫—Ç callback –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–µ—Ç"
        state: FSM-–∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ –∏–∑ callback data
    line_idx = int(call.data.split(":")[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ state
    data = await state.get_data()
    fuzzy_original = data.get("fuzzy_original")
    
    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π
    await call.message.edit_reply_markup(reply_markup=None)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä—É—á–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await call.message.answer(
        f"–•–æ—Ä–æ—à–æ, –≤—ã –º–æ–∂–µ—Ç–µ –≤—Ä—É—á–Ω—É—é –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É:\n\n"
        f"<i>—Å—Ç—Ä–æ–∫–∞ {line_idx+1} –Ω–∞–∑–≤–∞–Ω–∏–µ [–Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ]</i>",
        parse_mode="HTML"
    )
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await call.answer()
    
    # –û—Å—Ç–∞—ë–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.set_state(EditFree.awaiting_input)