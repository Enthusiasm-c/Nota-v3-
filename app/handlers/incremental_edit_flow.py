"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ edit_flow.py —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º IncrementalUI.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, –∫–∞–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å IncrementalUI –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
"""

import logging
import asyncio
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from rapidfuzz import process as fuzzy_process

from app.fsm.states import EditFree
from app.assistants.client import run_thread_safe_async
from app.edit.apply_intent import apply_intent
from app.formatters import report
from app.matcher import match_positions
from app.data_loader import load_products
from app.keyboards import build_main_kb
from app.converters import parsed_to_dict
from app.utils.incremental_ui import IncrementalUI

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
router = Router()

@router.message(EditFree.awaiting_input)
async def handle_free_edit_text(message: Message, state: FSMContext):
    """
    –£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º IncrementalUI –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
    
    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ Telegram
        state: FSM-–∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    user_text = message.text.strip()
    logger.info("[edit_flow] –ù–æ–≤—ã–π –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", extra={"data": {"user_text": user_text}})
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã
    if user_text.lower() in ["–æ—Ç–º–µ–Ω–∞", "cancel"]:
        await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.set_state(None)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    logger.info("[edit_flow] State at handler start", extra={"data": data})
    invoice = data.get("invoice")
    
    if not invoice:
        logger.warning("[edit_flow] –ù–µ—Ç –∏–Ω–≤–æ–π—Å–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        await message.answer("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–Ω–≤–æ–π—Å –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º IncrementalUI
    ui = IncrementalUI(message.bot, message.chat.id)
    await ui.start("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏–Ω–Ω–µ—Ä –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–∏
        await ui.start_spinner()
        
        # –®–∞–≥ 1: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ OpenAI
        logger.info("[edit_flow] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ OpenAI", 
                    extra={"data": {"user_text": user_text}})
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–ø–∏–Ω–Ω–µ—Ä–∞ (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–Ω)
        await asyncio.sleep(0.8)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º UI –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞
        ui.stop_spinner()
        await ui.update("üß† –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä —Å–Ω–æ–≤–∞ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–Ω—Ç–µ–Ω—Ç–∞
        await ui.start_spinner()
        
        # –ó–∞–ø—Ä–æ—Å –∫ OpenAI –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–Ω—Ç–µ–Ω—Ç–∞
        intent = await run_thread_safe_async(user_text)
        logger.info("[edit_flow] –û—Ç–≤–µ—Ç OpenAI –ø–æ–ª—É—á–µ–Ω", extra={"data": {"intent": intent}})
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∏–Ω—Ç–µ–Ω—Ç–∞
        if intent.get("action") == "unknown":
            error = intent.get("error", "unknown_error")
            logger.warning("[edit_flow] –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∫–æ–º–∞–Ω–¥—É", 
                          extra={"data": {"error": error}})
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            error_message = intent.get("user_message", 
                "–ù–µ –ø–æ–Ω—è–ª, —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                "‚Ä¢ –¥–∞—Ç–∞ 16 –∞–ø—Ä–µ–ª—è\n"
                "‚Ä¢ —Å—Ç—Ä–æ–∫–∞ 2 —Ü–µ–Ω–∞ 95000"
            )
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º UI —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ
            await ui.error(error_message)
            return
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –∏ –æ–±–Ω–æ–≤–ª—è–µ–º UI
        ui.stop_spinner()
        await ui.update("‚úÖ –ö–æ–º–∞–Ω–¥–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")
        
        # –®–∞–≥ 2: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ–Ω—Ç–∞ –∫ –∏–Ω–≤–æ–π—Å—É
        action_name = {
            "set_date": "–¥–∞—Ç—É",
            "set_price": "—Ü–µ–Ω—É",
            "set_name": "–Ω–∞–∑–≤–∞–Ω–∏–µ",
            "set_quantity": "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ",
            "set_unit": "–µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è",
            "add_line": "–Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é"
        }.get(intent.get("action", ""), "–∑–Ω–∞—á–µ–Ω–∏–µ")
        
        await ui.append(f"üìù –ò–∑–º–µ–Ω—è—é {action_name}...")
        
        # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ invoice –∫ dict —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä
        invoice = parsed_to_dict(invoice)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–Ω—Ç–µ–Ω—Ç –∫ –∏–Ω–≤–æ–π—Å—É
        new_invoice = apply_intent(invoice, intent)
        
        # –®–∞–≥ 3: –ü–µ—Ä–µ—Å—á–µ—Ç –æ—à–∏–±–æ–∫ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        await ui.update("üîÑ –û–±–Ω–æ–≤–ª—è—é –æ—Ç—á–µ—Ç...")
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—á—ë—Ç
        match_results = match_positions(new_invoice["positions"], load_products())
        text, has_errors = report.build_report(new_invoice, match_results)
    
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        for idx, item in enumerate(match_results):
            if item.get("status") == "unknown":
                name_to_check = item.get("name", "")
                # –ò—â–µ–º –±–ª–∏–∂–∞–π—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                result = fuzzy_process.extractOne(name_to_check, 
                                                [p.name for p in load_products()], 
                                                score_cutoff=82)
                
                if result:
                    suggestion, score = result[0], result[1]
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –ø–æ–¥—Å–∫–∞–∑–∫—É –≤ state –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –ª–æ–≥–∏–∫–∏
                    await state.update_data(
                        fuzzy_original=name_to_check, 
                        fuzzy_match=suggestion,
                        fuzzy_line=idx
                    )
                    
                    # –ó–∞–≤–µ—Ä—à–∞–µ–º UI —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    keyboard = InlineKeyboardMarkup(
                        inline_keyboard=[
                            [
                                InlineKeyboardButton(
                                    text="‚úì –î–∞", callback_data=f"fuzzy:confirm:{idx}"
                                ),
                                InlineKeyboardButton(
                                    text="‚úó –ù–µ—Ç", callback_data=f"fuzzy:reject:{idx}"
                                )
                            ]
                        ]
                    )
                    
                    await ui.complete(f"–ù–∞–≤–µ—Ä–Ω–æ–µ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É <b>{suggestion}</b>?", keyboard)
                    
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø—Ä–æ–±–ª–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º state
                    issues_count = sum(1 for item in match_results 
                                     if item.get("status", "") != "ok")
                    await state.update_data(invoice=new_invoice, issues_count=issues_count)
                    return  # –í—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å/–æ—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø—Ä–æ–±–ª–µ–º
        issues_count = sum(1 for item in match_results if item.get("status", "") != "ok")
    
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(invoice=new_invoice, issues_count=issues_count)
    
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –æ—à–∏–±–æ–∫
        keyboard = build_main_kb(has_errors)
    
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        success_message = f"‚úÖ {action_name.capitalize()} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!"
        if not has_errors:
            success_message += " –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–Ω–≤–æ–π—Å."
            
        # –ó–∞–≤–µ—Ä—à–∞–µ–º UI —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± —É—Å–ø–µ—Ö–µ
        await ui.complete(success_message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –æ—Ç—á—ë—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        await message.answer(
            text, 
            reply_markup=keyboard, 
            parse_mode="HTML"
        )
    
        # –û—Å—Ç–∞—ë–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await state.set_state(EditFree.awaiting_input)
        
    except Exception as e:
        logger.error("[edit_flow] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã", 
                    extra={"data": {"error": str(e)}}, exc_info=True)
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º UI —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ
        await ui.error(
            "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n"
            "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
@router.callback_query(F.data == "edit:free")
async def handle_edit_free(call: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å".
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    # –Ø–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º invoice –≤ state –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    data = await state.get_data()
    invoice = data.get("invoice")
    if invoice:
        await state.update_data(invoice=invoice)
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
    await state.set_state(EditFree.awaiting_input)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –≤–µ—Ä—Å–∏—é UI –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    ui = IncrementalUI(call.message.bot, call.message.chat.id)
    await ui.start("‚úèÔ∏è –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥–µ
    await ui.append("–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:")
    await ui.append("‚Ä¢ <i>–¥–∞—Ç–∞ 16 –∞–ø—Ä–µ–ª—è</i>")
    await ui.append("‚Ä¢ <i>—Å—Ç—Ä–æ–∫–∞ 2 —Ü–µ–Ω–∞ 95000</i>")
    await ui.append("‚Ä¢ <i>—Å—Ç—Ä–æ–∫–∞ 1 –Ω–∞–∑–≤–∞–Ω–∏–µ Apple</i>")
    await ui.append("‚Ä¢ <i>—Å—Ç—Ä–æ–∫–∞ 3 –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 10</i>")
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º UI —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–æ –æ—Ç–º–µ–Ω–µ
    await ui.complete("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ <i>–æ—Ç–º–µ–Ω–∞</i> –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.")
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await call.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è fuzzy-—Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç UI-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è 
# —á–µ—Ä–µ–∑ –∑–∞–º–µ–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ—ç—Ç–æ–º—É –æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
# ...

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–æ–∂–µ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º IncrementalUI