"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –±–æ—Ç–∞ Nota.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º UI, –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏,
–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
"""

import asyncio
import logging
import uuid
import time
from pathlib import Path
from typing import Optional, Dict, Any, List, Union

from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode

from app.utils.incremental_ui import IncrementalUI
from app.utils.timing_logger import operation_timer, async_timed
from app.utils.processing_guard import require_user_free, set_processing_photo, is_processing_photo
from app.utils.async_ocr import async_ocr
from app.utils.optimized_matcher import async_match_positions
from app.utils.cached_loader import cached_load_products, cached_load_data_async

from app.formatters.report import build_report
from app.keyboards import build_main_kb
from app.utils.md import clean_html
from app.i18n import t
from app.fsm.states import NotaStates

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
router = Router()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
from app.fsm.states import EditFree, NotaStates

@router.message(
    F.photo,
    require_user_free(context_name="photo_processing", max_age=300)  # 5 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
)
@async_timed(operation_name="photo_processing")
async def optimized_photo_handler(message: Message, state: FSMContext):
    """
    –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è Nota-–±–æ—Ç–∞.
    
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
    - –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
    - –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞
    - –ó–∞—â–∏—Ç—É –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    - –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    - –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –≤ –ª–æ–≥–∞—Ö
    req_id = f"photo_{uuid.uuid4().hex[:8]}"
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_state = await state.get_state()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
    # –û—Ç–∫–ª—é—á–∞–µ–º —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ—Ç–æ. –ü–æ–∑–∂–µ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —ç—Ç—É –ª–æ–≥–∏–∫—É.
    # Note: Commenting out this condition as it might be preventing photo processing
    # if current_state == "EditFree:awaiting_input":
    #     logger.info(f"[{req_id}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
    #     return
    logger.info(f"[{req_id}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {current_state}, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
    if await is_processing_photo(user_id):
        await message.answer("‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
        logger.warning(f"[{req_id}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—Ä—É–≥–æ–≥–æ")
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    await set_processing_photo(user_id, True)
    await state.update_data(processing_photo=True)
    
    try:
        logger.info(f"[{req_id}] –ü–æ–ª—É—á–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        if not message.photo or len(message.photo) == 0:
            logger.warning(f"[{req_id}] –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
            await message.answer("–û—à–∏–±–∫–∞: —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ —Ä–∞–∑.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        lang = data.get("lang", "en")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UI —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
        ui = IncrementalUI(message.bot, message.chat.id)
        await ui.start(t("status.receiving_image", lang=lang) or "üì∏ Receiving image...")
        
        # 1. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        with operation_timer(req_id, "download_photo") as timer:
            # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤ –º–∞—Å—Å–∏–≤–µ)
            photo_id = message.photo[-1].file_id
            
            # –ê–Ω–∏–º–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏
            await ui.start_spinner(theme="loading")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            file = await message.bot.get_file(photo_id)
            img_bytes_io = await message.bot.download_file(file.file_path)
            img_bytes = img_bytes_io.getvalue()
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏ –æ–±–Ω–æ–≤–ª—è–µ–º UI
            ui.stop_spinner()
            await ui.update(t("status.image_received", lang=lang) or "‚úÖ Image received")
            logger.info(f"[{req_id}] Downloaded photo, size {len(img_bytes)} bytes")
        
        # 2. OCR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        with operation_timer(req_id, "ocr_processing") as timer:
            await ui.append(t("status.recognizing_text", lang=lang) or "üîç Recognizing...")
            await ui.start_spinner(theme="dots")
            
            try:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π OCR —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                await ui.update("üîç –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥)...")
                ocr_result = await async_ocr(img_bytes, req_id=req_id, use_cache=True, timeout=30)
                
                # Handle both dict and ParsedData object types
                if isinstance(ocr_result, dict) and "positions" in ocr_result:
                    positions_count = len(ocr_result["positions"])
                else:
                    positions_count = len(ocr_result.positions) if hasattr(ocr_result, "positions") and ocr_result.positions else 0
                
                timer.add_metadata("positions_count", positions_count)
            except asyncio.TimeoutError:
                logger.error(f"[{req_id}] OCR processing timed out")
                await ui.error("‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ –ø—Ä–µ–≤—ã—à–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å –¥—Ä—É–≥–∏–º —Ñ–æ—Ç–æ.")
                return
            except Exception as e:
                logger.error(f"[{req_id}] Error in OCR processing: {e}")
                await ui.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–¥–µ–ª–∞–π—Ç–µ —Å–Ω–∏–º–æ–∫ –±–æ–ª–µ–µ —á–µ—Ç–∫–∏–º.")
                return
            
            # –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ OCR
            # Variable positions_count is already defined above
            timer.checkpoint("ocr_complete")
            
            ui.stop_spinner()
            await ui.update(t("status.text_recognized", {"count": positions_count}, lang=lang) or 
                        f"‚úÖ Text recognized: found {positions_count} items")
            logger.info(f"[{req_id}] OCR completed, found {positions_count} items")
        
        # 3. –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å –±–∞–∑–æ–π —Ç–æ–≤–∞—Ä–æ–≤
        with operation_timer(req_id, "product_matching") as timer:
            await ui.append(t("status.matching_items", lang=lang) or "üîÑ Matching items...")
            await ui.start_spinner(theme="boxes")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É —Ç–æ–≤–∞—Ä–æ–≤ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            from app import data_loader
            products = cached_load_products("data/base_products.csv", data_loader.load_products)
            timer.checkpoint("products_loaded")
            
            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                logger.info(f"[{req_id}] OCR result type: {type(ocr_result)}")
                
                # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø–æ–∑–∏—Ü–∏—è–º –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–∏–ø–∞ ocr_result
                positions = []  # Default safe value
                
                try:
                    # Try object-style access first (for Pydantic models)
                    if hasattr(ocr_result, 'positions'):
                        positions = ocr_result.positions
                        logger.info(f"[{req_id}] Positions accessed via attribute, type: {type(positions)}")
                    # Try dict-style access
                    elif isinstance(ocr_result, dict) and 'positions' in ocr_result:
                        positions = ocr_result['positions']
                        logger.info(f"[{req_id}] Positions accessed via dict key, type: {type(positions)}")
                    # Try converting ParsedData TypedDict to standard dict
                    elif hasattr(ocr_result, '__getitem__'):
                        try:
                            positions = ocr_result['positions']
                            logger.info(f"[{req_id}] Positions accessed via getitem, type: {type(positions)}")
                        except (KeyError, TypeError):
                            logger.warning(f"[{req_id}] Could not access positions with __getitem__, using empty list")
                    # Last resort - log more details about the ocr_result
                    else:
                        logger.warning(f"[{req_id}] Could not find positions in OCR result of type {type(ocr_result)}, keys: {dir(ocr_result) if hasattr(ocr_result, '__dict__') else 'no dir'}")
                except Exception as e:
                    logger.error(f"[{req_id}] Error accessing positions: {str(e)}")
                    
                # Ensure positions is a list
                if not isinstance(positions, list):
                    logger.warning(f"[{req_id}] Positions is not a list: {type(positions)}, converting...")
                    try:
                        # Try to convert to list if it's iterable
                        positions = list(positions) if hasattr(positions, '__iter__') else []
                    except Exception as e:
                        logger.error(f"[{req_id}] Error converting positions to list: {str(e)}")
                        positions = []
                
                logger.info(f"[{req_id}] Matching {len(positions)} positions...")
                
                # Handle empty positions case gracefully
                if not positions or len(positions) == 0:
                    logger.warning(f"[{req_id}] Empty positions list, returning empty match results")
                    match_results = []
                else:
                    # Debug log the positions to help diagnose issues
                    try:
                        if isinstance(positions[0], dict):
                            logger.info(f"[{req_id}] First position example: {positions[0]}")
                        else:
                            logger.info(f"[{req_id}] First position type: {type(positions[0])}")
                    except Exception as debug_error:
                        logger.error(f"[{req_id}] Error logging position info: {debug_error}")
                
                    # Try to match positions
                    match_results = await async_match_positions(
                        positions, 
                        products
                    )
                    
                timer.checkpoint("matching_complete")
            except ValueError as ve:
                # More specific error for value errors which are likely input validation issues
                logger.error(f"[{req_id}] Value error in matching: {ve}")
                # Handle the error more gracefully for the user
                await ui.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")
                return
            except Exception as e:
                logger.error(f"[{req_id}] Error in matching: {e}", exc_info=True)
                # Send a more friendly message to the user
                await ui.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")
                return
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
            ok_count = sum(1 for item in match_results if item.get("status") == "ok")
            unknown_count = sum(1 for item in match_results if item.get("status") == "unknown")
            # –ü–æ–∑–∏—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –¥–≤—É—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö - –∏–∑ —Å–ª–æ–≤–∞—Ä—è –∏–ª–∏ –∏–∑ –æ–±—ä–µ–∫—Ç–∞
            if isinstance(positions, list):
                positions_count = len(positions)
            else:
                positions_count = len(positions) if hasattr(positions, '__len__') else 0
            partial_count = positions_count - ok_count - unknown_count
            
            timer.add_metadata("match_stats", {
                "ok": ok_count,
                "unknown": unknown_count,
                "partial": partial_count,
                "total": positions_count
            })
            
            ui.stop_spinner()
            await ui.update(t("status.matching_completed", 
                         {"ok": ok_count, "unknown": unknown_count, "partial": partial_count},
                         lang=lang) or 
                       f"‚úÖ Matching completed: {ok_count} ‚úì, {unknown_count} ‚ùå, {partial_count} ‚ö†Ô∏è")
            logger.info(f"[{req_id}] Matching completed: {ok_count} OK, {unknown_count} unknown, {partial_count} partial")
        
        # 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        with operation_timer(req_id, "report_generation") as timer:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
            from bot import user_matches
            
            user_matches[(user_id, 0)] = {  # 0 - –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID, –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∏–∂–µ
                "parsed_data": ocr_result,
                "match_results": match_results,
                "photo_id": photo_id,
                "req_id": req_id,
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–≤–æ–π—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await state.update_data(invoice=ocr_result, lang=lang)
            timer.checkpoint("state_updated")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            await ui.append(t("status.generating_report", lang=lang) or "üìã Generating report...")
            await ui.start_spinner(theme="invoice")
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç —Å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            report_text, has_errors = build_report(ocr_result, match_results, escape_html=True)
            timer.add_metadata("report_length", len(report_text))
            timer.checkpoint("report_built")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            inline_kb = build_main_kb(
                has_errors=True if unknown_count + partial_count > 0 else False, 
                lang=lang
            )
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º UI —Å –∫—Ä–∞—Ç–∫–∏–º –∏—Ç–æ–≥–æ–º
            ui.stop_spinner()
            await ui.complete(t("status.processing_completed", lang=lang) or "‚úÖ Photo processing completed!")
            timer.checkpoint("ui_completed")
        
        # 5. –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        with operation_timer(req_id, "send_report") as timer:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ HTML-—Ç–µ–≥–æ–≤ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                telegram_html_tags = ["<b>", "<i>", "<u>", "<s>", "<strike>", "<del>", "<code>", "<pre>", "<a"]
                has_valid_html = any(tag in report_text for tag in telegram_html_tags)
                
                # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å HTML, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–≥–∏
                if has_valid_html:
                    result = await message.answer(report_text, reply_markup=inline_kb, parse_mode="HTML")
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç HTML-—Ç–µ–≥–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    result = await message.answer(report_text, reply_markup=inline_kb)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ user_matches
                new_key = (user_id, result.message_id)
                user_matches[new_key] = user_matches.pop((user_id, 0))
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –±—É–¥—É—â–∏—Ö —Å—Å—ã–ª–æ–∫
                await state.update_data(invoice_msg_id=result.message_id)
                
                logger.info(f"[{req_id}] Report sent successfully, message_id={result.message_id}")
                timer.add_metadata("result_message_id", result.message_id)
                
            except Exception as msg_err:
                logger.error(f"[{req_id}] Error sending report: {str(msg_err)}")
                
                # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
                try:
                    clean_report = clean_html(report_text)
                    
                    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    if len(clean_report) > 4000:
                        part1 = clean_report[:4000]
                        part2 = clean_report[4000:]
                        
                        await message.answer(part1)
                        result = await message.answer(part2, reply_markup=inline_kb)
                        logger.info(f"[{req_id}] Report sent in 2 parts due to length")
                    else:
                        result = await message.answer(clean_report, reply_markup=inline_kb)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏
                    new_key = (user_id, result.message_id)
                    if (user_id, 0) in user_matches:
                        user_matches[new_key] = user_matches.pop((user_id, 0))
                    await state.update_data(invoice_msg_id=result.message_id)
                    logger.info(f"[{req_id}] Report sent with fallback formatting")
                except Exception as final_err:
                    logger.error(f"[{req_id}] Critical error sending report: {str(final_err)}")
                    await message.answer(
                        t("error.report_failed", lang=lang) or 
                        "Error generating report. Please try again or contact support."
                    )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è 
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è —É–∂–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
            current_state = await state.get_state()
            if current_state != "EditFree:awaiting_input":
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –Ω–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è EditFree
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º NotaStates.editing –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
                # –í edit_flow.py –¥–æ–±–∞–≤–ª–µ–Ω—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–±–æ–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π (NotaStates.editing –∏ EditFree.awaiting_input)
                await state.set_state(NotaStates.editing)
                logger.info(f"[{req_id}] Set state to NotaStates.editing after photo processing")
                # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                logger.info(f"[edit_flow] Successfully set state to NotaStates.editing from {current_state}")
            else:
                logger.info(f"[{req_id}] Maintaining EditFree.awaiting_input state (already in edit mode)")
            
    except Exception as e:
        logger.error(f"[{req_id}] Unexpected error processing photo: {str(e)}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    finally:
        # –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        await set_processing_photo(user_id, False)
        await state.update_data(processing_photo=False)