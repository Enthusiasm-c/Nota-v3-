from html import escape  # –î–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã—Ö, –Ω–µ —Ç–µ–≥–æ–≤
import logging
logging.getLogger("nota.report").debug("escape func = %s", escape)
from decimal import Decimal

def format_idr(val):
    """Format number with narrow space and no currency for table."""
    try:
        val = Decimal(val)
        return f"{val:,.0f}".replace(",", "\u202f")
    except Exception:
        return "‚Äî"




def paginate_rows(rows, page_size=15):
    """Split rows into pages of page_size."""
    return [rows[i : i + page_size] for i in range(0, len(rows), page_size)]


def build_header(supplier, date):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç HTML-–∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ –∏ –¥–∞—Ç–µ –∏–Ω–≤–æ–π—Å–∞.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç escape –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ HTML.
    
    –í–∞–∂–Ω–æ: Telegram –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ HTML-—Ç–µ–≥–æ–≤.
    –í–º–µ—Å—Ç–æ <br> –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º–≤–æ–ª –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ \n.
    """
    # –Ø–≤–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º escape –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    from html import escape as html_escape
    return (
        f"<b>Supplier:</b> {html_escape(str(supplier))}<br>"
        f"<b>Invoice date:</b> {html_escape(str(date))}\n\n"
    )

def build_table(rows):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Å –ø–æ–∑–∏—Ü–∏—è–º–∏ –∏–Ω–≤–æ–π—Å–∞.
    –¢–µ–∫—Å—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç—Å—è –¥–ª—è HTML.
    """
    from html import escape as html_escape
    status_map = {"ok": "‚úì", "unit_mismatch": "üö´", "unknown": "üö´", "ignored": "üö´", "error": "üö´"}
    header = "#  NAME                 QTY  UNIT       TOTAL        ‚öë"
    divider = "‚îÄ" * len(header)
    table_rows = [header, divider]
    for idx, item in enumerate(rows, 1):
        name = item.get("name", "")
        # Truncate to 18 chars + ellipsis for 19 total (to match 'olive oil orille 5‚Ä¶')
        if len(name) > 18:
            name = name[:18] + "‚Ä¶"
        name = html_escape(name)
        qty = item.get("qty", "")
        unit = html_escape(item.get("unit", ""))
        total = item.get("line_total", "")
        total_str = format_idr(total) if total not in (None, "") else "‚Äî"
        status = item.get("status", "")
        status_str = status_map.get(status, "")
        row = f"{idx:<2} {name:<19} {qty:>4} {unit:<6} {total_str:>10} {status_str}"
        table_rows.append(row)
    return "\n".join(table_rows)


def build_summary(ok_count, issues_count, invoice_total):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç HTML-–∏—Ç–æ–≥–∏ –ø–æ –∏–Ω–≤–æ–π—Å—É —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É—Å–ø–µ—à–Ω—ã—Ö –∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
    –∏ –æ–±—â–µ–π —Å—É–º–º–æ–π.
    
    –í–∞–∂–Ω–æ: Telegram –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ HTML-—Ç–µ–≥–æ–≤.
    –í–º–µ—Å—Ç–æ <br> –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º–≤–æ–ª –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ \n, –≤–º–µ—Å—Ç–æ &nbsp; –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –ø—Ä–æ–±–µ–ª.
    """
    return (
        f"<b>‚úì Correct:</b> {ok_count}  <b>üö´ Issues:</b> {issues_count}\n"
        f"<b>üí∞ Invoice total:</b> {format_idr(invoice_total)}"
    )



def build_report(parsed_data, match_results, escape_html=True, page=1, page_size=15):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç HTML-–æ—Ç—á–µ—Ç –ø–æ –∏–Ω–≤–æ–π—Å—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    
    Args:
        parsed_data: –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω–≤–æ–π—Å–∞ (–æ–±—ä–µ–∫—Ç –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å)
        match_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π —Å –±–∞–∑–æ–π
        escape_html: –§–ª–∞–≥ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML (True –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        page_size: –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π)
        
    Returns:
        tuple: (HTML-–æ—Ç—á–µ—Ç, —Ñ–ª–∞–≥ –Ω–∞–ª–∏—á–∏—è –æ—à–∏–±–æ–∫)
    
    –í–∞–∂–Ω–æ: Telegram –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ HTML-—Ç–µ–≥–æ–≤:
    <b>, <i>, <u>, <s>, <strike>, <del>, <a>, <code>, <pre>
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    supplier = getattr(parsed_data, "supplier", None)
    if supplier is None and isinstance(parsed_data, dict):
        supplier = parsed_data.get("supplier", None)
    date = getattr(parsed_data, "date", None)
    if date is None and isinstance(parsed_data, dict):
        date = parsed_data.get("date", None)
    supplier_str = "Unknown supplier" if not supplier else supplier
    date_str = "‚Äî" if not date else date

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é escape –∏–∑ –º–æ–¥—É–ª—è html, –∞ –Ω–µ –ø–∞—Ä–∞–º–µ—Ç—Ä escape_html
    from html import escape as html_escape
    if supplier_str and isinstance(supplier_str, str):
        supplier_str = html_escape(supplier_str)
    if date_str and isinstance(date_str, str):
        date_str = html_escape(date_str)

    # Pagination
    start = (page - 1) * page_size
    end = start + page_size
    rows_to_show = match_results[start:end]

    # Build table and summary
    ok_count = 0
    issues_count = 0
    invoice_total = 0
    for item in match_results:  # –°—á–∏—Ç–∞–µ–º –¥–ª—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º—ã—Ö
        status = item.get("status", "")
        if status == "ok":
            ok_count += 1
        elif status in ("unit_mismatch", "unknown", "ignored", "error"):
            issues_count += 1
        try:
            total = float(item.get("line_total", 0) or 0)
            invoice_total += total
        except Exception:
            pass
    
    header_html = build_header(supplier_str, date_str)
    table = build_table(rows_to_show)
    summary_html = build_summary(ok_count, issues_count, invoice_total)
    
    # –°–æ–±–∏—Ä–∞–µ–º –æ—Ç—á–µ—Ç
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Telegram, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ–≥ <pre>
    html_report = (
        f"{header_html}"
        f"<pre>{table}</pre>\n"
        f"{summary_html}"
    )
    
    return html_report.strip(), issues_count > 0