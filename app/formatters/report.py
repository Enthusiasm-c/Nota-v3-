from html import escape  # –î–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã—Ö, –Ω–µ —Ç–µ–≥–æ–≤
import logging
logging.getLogger("nota.report").debug("escape func = %s", escape)
from decimal import Decimal

def format_idr(val):
    """Format number with narrow space and no currency for table."""
    try:
        val = Decimal(val)
        return f"{val:,.0f}".replace(",", "\u202f")
    except Exception:
        return "‚Äî"




def paginate_rows(rows, page_size=15):
    """Split rows into pages of page_size."""
    return [rows[i : i + page_size] for i in range(0, len(rows), page_size)]


def build_header(supplier, date):
    return (
        f"<b>Supplier:</b> {escape(str(supplier))}<br>"
        f"<b>Invoice date:</b> {escape(str(date))}<br><br>"
    )

def build_table(rows):
    status_map = {"ok": "‚úì", "unit_mismatch": "üö´", "unknown": "üö´", "ignored": "üö´", "error": "üö´"}
    header = "#  NAME                 QTY UNIT        TOTAL  ‚öë"
    divider = "‚îÄ" * len(header)
    table_rows = [header, divider]
    for idx, item in enumerate(rows, 1):
        name = item.get("name", "")
        if len(name) > 19:
            name = name[:18] + "‚Ä¶"
        name = escape(name)
        qty = item.get("qty", "")
        unit = escape(item.get("unit", ""))
        total = item.get("line_total", "")
        total_str = format_idr(total) if total not in (None, "") else "‚Äî"
        status = item.get("status", "")
        status_str = status_map.get(status, "")
        row = f"{idx:<2} {name:<19} {qty:>6} {unit:<4} {total_str:>12} {status_str}"
        table_rows.append(row)
    return "\n".join(table_rows)

def build_summary(ok_count, issues_count, invoice_total):
    return (
        f"<b>‚úì Correct:</b> {ok_count}&nbsp;&nbsp;<b>üö´ Issues:</b> {issues_count}<br>"
        f"<b>üí∞ Invoice total:</b> {format_idr(invoice_total)}"
    )

def build_report(parsed_data, match_results, escape=True, page=1, page_size=15):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç HTML-–æ—Ç—á–µ—Ç –ø–æ –∏–Ω–≤–æ–π—Å—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    
    Args:
        parsed_data: –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω–≤–æ–π—Å–∞ (–æ–±—ä–µ–∫—Ç –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å)
        match_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π —Å –±–∞–∑–æ–π
        escape: –§–ª–∞–≥ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        page_size: –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π)
        
    Returns:
        tuple: (HTML-–æ—Ç—á–µ—Ç, —Ñ–ª–∞–≥ –Ω–∞–ª–∏—á–∏—è –æ—à–∏–±–æ–∫)
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    supplier = getattr(parsed_data, "supplier", None)
    if supplier is None and isinstance(parsed_data, dict):
        supplier = parsed_data.get("supplier", None)
    date = getattr(parsed_data, "date", None)
    if date is None and isinstance(parsed_data, dict):
        date = parsed_data.get("date", None)
    supplier_str = "Unknown supplier" if not supplier else supplier
    date_str = "‚Äî" if not date else date

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    if supplier_str and isinstance(supplier_str, str):
        supplier_str = escape(supplier_str)
    if date_str and isinstance(date_str, str):
        date_str = escape(date_str)

    # Pagination
    start = (page - 1) * page_size
    end = start + page_size
    rows_to_show = match_results[start:end]

    # Build table and summary
    ok_count = 0
    issues_count = 0
    invoice_total = 0
    for item in match_results:  # –°—á–∏—Ç–∞–µ–º –¥–ª—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º—ã—Ö
        status = item.get("status", "")
        if status == "ok":
            ok_count += 1
        elif status in ("unit_mismatch", "unknown", "ignored", "error"):
            issues_count += 1
        try:
            total = float(item.get("line_total", 0) or 0)
            invoice_total += total
        except Exception:
            pass
    
    header_html = build_header(supplier_str, date_str)
    table = build_table(rows_to_show)
    summary_html = build_summary(ok_count, issues_count, invoice_total)
    
    # –°–æ–±–∏—Ä–∞–µ–º –æ—Ç—á–µ—Ç
    html_report = (
        f"{header_html}"
        f"<pre>{table}</pre>"
        f"{summary_html}"
    )
    
    return html_report.strip(), issues_count > 0
