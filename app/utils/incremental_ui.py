"""
IncrementalUI - –∫–ª–∞—Å—Å –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π UI –≤ Telegram-–±–æ—Ç–µ.

–ü–æ–∑–≤–æ–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
–≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.
"""

import logging
import asyncio
import time
from typing import Optional, Dict, Any, List, Union, Callable
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, Message

from app.bot_utils import edit_message_text_safe

logger = logging.getLogger("nota.incremental_ui")

class IncrementalUI:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ UI –≤ Telegram-–±–æ—Ç–µ.
    
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è:
    - –°–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∑–∞–≥—Ä—É–∑–∫–∏
    - –û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    - –ó–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    
    –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    ```python
    # –°–æ–∑–¥–∞–Ω–∏–µ
    ui = IncrementalUI(message.bot, message.chat.id)
    msg = await ui.start("–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    await ui.update("–û–±—Ä–∞–±–æ—Ç–∫–∞ OCR: 30%")
    await ui.update("–û–±—Ä–∞–±–æ—Ç–∫–∞ OCR: 60%")
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    await ui.append("–ù–∞–π–¥–µ–Ω–æ 5 –ø–æ–∑–∏—Ü–∏–π")
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    await ui.complete("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", kb=result_keyboard)
    ```
    """
    
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    SPINNER_CHARS = ["‚†ã", "‚†ô", "‚†π", "‚†∏", "‚†º", "‚†¥", "‚†¶", "‚†ß", "‚†á", "‚†è"]
    PROGRESS_INDICATOR = "üîÑ"
    COMPLETE_INDICATOR = "‚úÖ"
    ERROR_INDICATOR = "‚ùå"
    
    def __init__(self, bot: Bot, chat_id: int, throttle_ms: int = 700):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI-–º–µ–Ω–µ–¥–∂–µ—Ä–∞.
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Aiogram
            chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            throttle_ms: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        """
        self.bot = bot
        self.chat_id = chat_id
        self.message: Optional[Message] = None
        self.message_id: Optional[int] = None
        self.current_text: str = ""
        self.lines: List[str] = []
        self.last_update_time: float = 0
        self.throttle_ms = throttle_ms
        self.active = False
        self._spinner_idx = 0
        self._update_task = None
        
    async def start(self, initial_text: str, kb: Optional[InlineKeyboardMarkup] = None) -> Message:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç UI-—Å–µ—Å—Å–∏—é —Å –Ω–∞—á–∞–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
        
        Args:
            initial_text: –ù–∞—á–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            kb: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–æ–±—ã—á–Ω–æ –Ω–µ –Ω—É–∂–Ω–∞ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)
            
        Returns:
            Message: –û–±—ä–µ–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        """
        self.active = True
        self.lines = [f"{self.PROGRESS_INDICATOR} {initial_text}"]
        self.current_text = self.lines[0]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.message = await self.bot.send_message(
            chat_id=self.chat_id,
            text=self.current_text,
            reply_markup=kb,
            parse_mode="HTML"
        )
        self.message_id = self.message.message_id
        self.last_update_time = time.time()
        return self.message
    
    async def update(self, text: str, replace_last: bool = True) -> None:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º.
        
        Args:
            text: –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            replace_last: –ï—Å–ª–∏ True, –∑–∞–º–µ–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É; –µ—Å–ª–∏ False, –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é
        """
        if not self.active or not self.message_id:
            logger.warning("Attempted to update inactive UI")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥–∞
        current_time = time.time()
        time_since_last_update = (current_time - self.last_update_time) * 1000
        
        if time_since_last_update < self.throttle_ms:
            # –°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            logger.debug(f"Throttling update: {time_since_last_update}ms < {self.throttle_ms}ms")
            return
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
        if replace_last and self.lines:
            self.lines[-1] = f"{self.PROGRESS_INDICATOR} {text}"
        else:
            self.lines.append(f"{self.PROGRESS_INDICATOR} {text}")
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.current_text = "\n".join(self.lines)
        
        try:
            await edit_message_text_safe(
                bot=self.bot,
                chat_id=self.chat_id,
                msg_id=self.message_id,
                text=self.current_text,
                kb=None  # –ù–µ –º–µ–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            )
            self.last_update_time = current_time
        except Exception as e:
            logger.error(f"Error updating UI: {e}")
            
    async def append(self, text: str, indicator: str = "‚Ä¢") -> None:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            indicator: –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –º–∞—Ä–∫–µ—Ä —Å–ø–∏—Å–∫–∞)
        """
        await self.update(text, replace_last=False)
        
    async def start_spinner(self, update_ms: int = 200) -> None:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏–Ω–Ω–µ—Ä –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–µ.
        
        Args:
            update_ms: –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏–Ω–Ω–µ—Ä–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        """
        if self._update_task:
            return  # –£–∂–µ –∑–∞–ø—É—â–µ–Ω
            
        async def _spinner_task():
            while self.active:
                if self.lines:
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É –±–µ–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
                    last_line = self.lines[-1]
                    if last_line.startswith(self.PROGRESS_INDICATOR):
                        last_line = last_line[len(self.PROGRESS_INDICATOR):].strip()
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–∏–Ω–Ω–µ—Ä–æ–º
                    self._spinner_idx = (self._spinner_idx + 1) % len(self.SPINNER_CHARS)
                    spinner_char = self.SPINNER_CHARS[self._spinner_idx]
                    self.lines[-1] = f"{spinner_char} {last_line}"
                    
                    self.current_text = "\n".join(self.lines)
                    
                    try:
                        await edit_message_text_safe(
                            bot=self.bot,
                            chat_id=self.chat_id,
                            msg_id=self.message_id,
                            text=self.current_text,
                            kb=None
                        )
                    except Exception as e:
                        logger.error(f"Error updating spinner: {e}")
                
                await asyncio.sleep(update_ms / 1000)
        
        self._update_task = asyncio.create_task(_spinner_task())
        
    def stop_spinner(self) -> None:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏–Ω–Ω–µ—Ä."""
        if self._update_task:
            self._update_task.cancel()
            self._update_task = None
            
    async def complete(self, text: Optional[str] = None, 
                      kb: Optional[InlineKeyboardMarkup] = None,
                      success: bool = True) -> None:
        """
        –ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
        
        Args:
            text: –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É)
            kb: –§–∏–Ω–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            success: –§–ª–∞–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–≤–ª–∏—è–µ—Ç –Ω–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä)
        """
        self.stop_spinner()
        self.active = False
        
        indicator = self.COMPLETE_INDICATOR if success else self.ERROR_INDICATOR
        
        if text:
            # –ó–∞–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É —Å –Ω–æ–≤—ã–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º
            if self.lines:
                self.lines[-1] = f"{indicator} {text}"
            else:
                self.lines.append(f"{indicator} {text}")
        elif self.lines:
            # –ü—Ä–æ—Å—Ç–æ –º–µ–Ω—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —É –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏
            last_line = self.lines[-1]
            if last_line.startswith((self.PROGRESS_INDICATOR, *self.SPINNER_CHARS)):
                content = last_line[1:].strip()  # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
                self.lines[-1] = f"{indicator} {content}"
                
        self.current_text = "\n".join(self.lines)
        
        try:
            await edit_message_text_safe(
                bot=self.bot,
                chat_id=self.chat_id,
                msg_id=self.message_id,
                text=self.current_text,
                kb=kb
            )
        except Exception as e:
            logger.error(f"Error completing UI: {e}")
            
    async def error(self, text: str, kb: Optional[InlineKeyboardMarkup] = None) -> None:
        """
        –ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ.
        
        Args:
            text: –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            kb: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        """
        await self.complete(text, kb, success=False)
        
    async def delete(self) -> None:
        """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å UI."""
        if self.message_id:
            try:
                await self.bot.delete_message(
                    chat_id=self.chat_id,
                    message_id=self.message_id
                )
            except Exception as e:
                logger.error(f"Error deleting UI message: {e}")
                
    @staticmethod
    async def with_progress(message: Message, initial_text: str, 
                          process_func: Callable, 
                          final_text: Optional[str] = None,
                          final_kb: Optional[InlineKeyboardMarkup] = None,
                          error_text: Optional[str] = None) -> Any:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º UI –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –≤–∑—è—Ç—å chat_id –∏ bot
            initial_text: –ù–∞—á–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
            process_func: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ —Å ui –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
            final_text: –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
            final_kb: –§–∏–Ω–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
            error_text: –®–∞–±–ª–æ–Ω —Ç–µ–∫—Å—Ç–∞ –æ—à–∏–±–∫–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏ process_func
        """
        ui = IncrementalUI(message.bot, message.chat.id)
        await ui.start(initial_text)
        
        try:
            result = await process_func(ui)
            
            if final_text:
                await ui.complete(final_text, final_kb)
            else:
                await ui.complete(kb=final_kb)
                
            return result
        except Exception as e:
            logger.error(f"Error in with_progress: {e}", exc_info=True)
            error_msg = error_text or f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
            await ui.error(error_msg)
            raise