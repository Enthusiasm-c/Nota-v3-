"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram.

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π,
—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
"""

import logging
import asyncio
import time
import random
from typing import Optional, Dict, Any, List, Union, Callable
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, Message

from app.bot_utils import edit_message_text_safe

logger = logging.getLogger(__name__)

# –¢–µ–º—ã —Å–ø–∏–Ω–Ω–µ—Ä–æ–≤
SPINNER_THEMES = {
    "default": ["‚†ã", "‚†ô", "‚†π", "‚†∏", "‚†º", "‚†¥", "‚†¶", "‚†ß", "‚†á", "‚†è"],
    "dots": ["‚†ã", "‚†ô", "‚†ö", "‚†û", "‚†ñ", "‚†¶", "‚†¥", "‚†≤", "‚†≥", "‚†ì"],
    "loading": ["‚£æ", "‚£Ω", "‚£ª", "‚¢ø", "‚°ø", "‚£ü", "‚£Ø", "‚£∑"],
    "table": ["‚ó∞", "‚ó≥", "‚ó≤", "‚ó±"],
    "boxes": ["‚ó∞", "‚ó¥", "‚ó±", "‚óµ", "‚ó≤", "‚ó∂", "‚ó≥", "‚ó∑"],
    "invoice": ["üìÑ", "üìÉ", "üìë", "üìú", "üìã"],
    "counting": ["üî¢", "üî°", "üî†", "üî§", "üî£"],
    "lines": ["-", "\\", "|", "/"],
}

class IncrementalUI:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram.
    
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π, –æ–±–Ω–æ–≤–ª—è—è –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,
    –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã 
    –∏ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–µ–º—ã –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏.
    
    Attributes:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegram
        chat_id: ID —á–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è
        text: –¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        _spinner_task: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–ø–∏–Ω–Ω–µ—Ä–∞
        _spinner_running: –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–ø–∏–Ω–Ω–µ—Ä
    """
    
    def __init__(self, bot, chat_id: int):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π UI –¥–ª—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegram
            chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        self.bot = bot
        self.chat_id = chat_id
        self.message_id = None
        self.text = ""
        self._spinner_task = None
        self._spinner_running = False
        self._theme = "default"
        self._start_time = None
        
    async def start(self, initial_text: str = "–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...") -> None:
        """
        –ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å –Ω–∞—á–∞–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º.
        
        Args:
            initial_text: –ù–∞—á–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        self._start_time = time.time()
        self.text = initial_text
        try:
            message = await self.bot.send_message(self.chat_id, initial_text)
            self.message_id = message.message_id
            logger.debug(f"Started incremental UI with message_id={self.message_id}")
        except Exception as e:
            logger.error(f"Error starting incremental UI: {e}")
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π message_id, –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
            self.message_id = 0
    
    async def update(self, text: str) -> None:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
        
        Args:
            text: –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        if self.message_id is None:
            logger.warning("Attempting to update before starting UI")
            return
            
        self.text = text
        
        try:
            await self.bot.edit_message_text(
                text, 
                chat_id=self.chat_id,
                message_id=self.message_id
            )
            logger.debug(f"Updated UI message: {text[:30]}...")
        except Exception as e:
            logger.warning(f"Error updating UI message: {e}")
    
    async def append(self, new_text: str) -> None:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é.
        
        Args:
            new_text: –¢–µ–∫—Å—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        """
        self.text = f"{self.text}\n{new_text}"
        await self.update(self.text)
    
    async def complete(self, completion_text: Optional[str] = None, kb: Optional[InlineKeyboardMarkup] = None) -> None:
        """
        –ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏—Ç–æ–≥–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
        
        Args:
            completion_text: –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            kb: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
        """
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä, –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
        self.stop_spinner()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        elapsed = time.time() - self._start_time if self._start_time else 0
        elapsed_str = f" (–∑–∞ {elapsed:.1f} —Å–µ–∫)" if elapsed > 0 else ""
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        if completion_text:
            final_text = f"{self.text}\n{completion_text}{elapsed_str}"
        else:
            final_text = f"{self.text}\n‚úÖ –ì–æ—Ç–æ–≤–æ{elapsed_str}"
        
        try:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–µ
            if kb:
                await self.bot.edit_message_text(
                    final_text,
                    chat_id=self.chat_id,
                    message_id=self.message_id,
                    reply_markup=kb
                )
            else:
                await self.update(final_text)
        except Exception as e:
            logger.error(f"Error completing UI: {e}")
            # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            try:
                await edit_message_text_safe(
                    bot=self.bot,
                    chat_id=self.chat_id,
                    msg_id=self.message_id,
                    text=final_text,
                    kb=kb
                )
            except Exception as e2:
                logger.error(f"Fallback edit also failed: {e2}")
    
    async def complete_with_keyboard(self, final_text: str, has_errors: bool = False, lang: str = "ru") -> None:
        """
        –ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –æ—à–∏–±–æ–∫.
        
        Args:
            final_text: –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            has_errors: –§–ª–∞–≥ –Ω–∞–ª–∏—á–∏—è –æ—à–∏–±–æ–∫, –≤–ª–∏—è–µ—Ç –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
            lang: –Ø–∑—ã–∫ –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
        """
        from app.keyboards import build_main_kb
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        logger.info(f"complete_with_keyboard: —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å has_errors={has_errors}")
        
        # –Ø–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–µ–º has_errors –≤ build_main_kb
        keyboard = build_main_kb(has_errors=has_errors, lang=lang)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ complete —Å —è–≤–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        await self.complete(final_text, kb=keyboard)
        logger.info(f"UI completed with keyboard, has_errors={has_errors}")
    
    async def error(self, error_text: str, show_timing: bool = False) -> None:
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
        
        Args:
            error_text: –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            show_timing: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        self.stop_spinner()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å
        elapsed_str = ""
        if show_timing and self._start_time:
            elapsed = time.time() - self._start_time
            elapsed_str = f" (—á–µ—Ä–µ–∑ {elapsed:.1f} —Å–µ–∫)"
            
        await self.update(f"{self.text}\n‚ùå {error_text}{elapsed_str}")
    
    def stop_spinner(self) -> None:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é —Å–ø–∏–Ω–Ω–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω–∞ –∑–∞–ø—É—â–µ–Ω–∞."""
        if self._spinner_running and self._spinner_task:
            self._spinner_running = False
            if not self._spinner_task.done():
                self._spinner_task.cancel()
    
    async def start_spinner(self, show_text: bool = True, theme: str = "default") -> None:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏–Ω–Ω–µ—Ä, –æ–±–Ω–æ–≤–ª—è—è —Å–æ–æ–±—â–µ–Ω–∏–µ.
        
        Args:
            show_text: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–µ —Å–æ —Å–ø–∏–Ω–Ω–µ—Ä–æ–º
            theme: –¢–µ–º–∞ —Å–ø–∏–Ω–Ω–µ—Ä–∞ (default, dots, loading –∏ —Ç.–¥.)
        """
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ø–∏–Ω–Ω–µ—Ä, –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
        self.stop_spinner()
        
        self._theme = theme
        frames = SPINNER_THEMES.get(theme, SPINNER_THEMES["default"])
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        self._spinner_running = True
        self._spinner_task = asyncio.create_task(
            self._animate_spinner(frames, show_text)
        )
    
    async def _animate_spinner(self, frames: List[str], show_text: bool) -> None:
        """
        –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–ø–∏–Ω–Ω–µ—Ä–∞.
        
        Args:
            frames: –ö–∞–¥—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–ø–∏–Ω–Ω–µ—Ä–∞
            show_text: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–µ —Å–æ —Å–ø–∏–Ω–Ω–µ—Ä–æ–º
        """
        i = 0
        try:
            while self._spinner_running:
                frame = frames[i % len(frames)]
                
                if show_text:
                    spinner_text = f"{frame} {self.text}"
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–µ
                    lines = self.text.split('\n')
                    lines[-1] = f"{lines[-1]} {frame}"
                    spinner_text = '\n'.join(lines)
                
                try:
                    await self.bot.edit_message_text(
                        spinner_text,
                        chat_id=self.chat_id,
                        message_id=self.message_id
                    )
                except Exception as e:
                    logger.debug(f"Spinner update error (normal during rapid updates): {e}")
                
                i += 1
                await asyncio.sleep(0.3)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        except asyncio.CancelledError:
            logger.debug("Spinner animation cancelled")
        except Exception as e:
            logger.error(f"Error in spinner animation: {e}")
            self._spinner_running = False

    @staticmethod
    async def with_progress(message: Message, initial_text: str, 
                          process_func: Callable, 
                          final_text: Optional[str] = None,
                          final_kb: Optional[InlineKeyboardMarkup] = None,
                          error_text: Optional[str] = None) -> Any:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º UI –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –≤–∑—è—Ç—å chat_id –∏ bot
            initial_text: –ù–∞—á–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
            process_func: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ —Å ui –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
            final_text: –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
            final_kb: –§–∏–Ω–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
            error_text: –®–∞–±–ª–æ–Ω —Ç–µ–∫—Å—Ç–∞ –æ—à–∏–±–∫–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏ process_func
        """
        ui = IncrementalUI(message.bot, message.chat.id)
        await ui.start(initial_text)
        
        try:
            result = await process_func(ui)
            
            if final_text:
                await ui.complete(final_text, final_kb)
            else:
                await ui.complete(kb=final_kb)
                
            return result
        except Exception as e:
            logger.error(f"Error in with_progress: {e}", exc_info=True)
            error_msg = error_text or f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
            await ui.error(error_msg)
            raise