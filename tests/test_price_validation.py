import pytest
from app.models import Position, ParsedData
from app.validators.price_validator import validate_invoice_prices
from app.formatters.report import build_report

def test_price_validation_total_mismatch():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ —Å –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ–º –≤ –æ–±—â–µ–π —Å—É–º–º–µ."""
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    position = Position(
        name="Test Item",
        qty=2.0,
        price_per_unit=100.0,
        total_price=205.0  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 200.0
    )
    parsed_data = ParsedData(positions=[position])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
    validated_data = validate_invoice_prices(parsed_data)
    
    assert validated_data.has_price_mismatches
    assert validated_data.price_mismatch_count == 1
    assert validated_data.positions[0].price_mismatch
    assert validated_data.positions[0].mismatch_type == "total_mismatch"
    assert validated_data.positions[0].expected_total == 200.0

def test_price_validation_no_mismatch():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ –±–µ–∑ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –≤ —Ü–µ–Ω–∞—Ö."""
    position = Position(
        name="Test Item",
        qty=2.0,
        price_per_unit=100.0,
        total_price=200.0
    )
    parsed_data = ParsedData(positions=[position])
    
    validated_data = validate_invoice_prices(parsed_data)
    
    assert not validated_data.has_price_mismatches
    assert validated_data.price_mismatch_count == 0
    assert not validated_data.positions[0].price_mismatch
    assert validated_data.positions[0].mismatch_type is None
    assert validated_data.positions[0].expected_total is None

def test_price_validation_within_tolerance():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ —Å —Ä–∞–∑–Ω–∏—Ü–µ–π –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ–ø—É—Å—Ç–∏–º–æ–π –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏."""
    position = Position(
        name="Test Item",
        qty=2.0,
        price_per_unit=100.0,
        total_price=200.009  # –†–∞–∑–Ω–∏—Ü–∞ –º–µ–Ω—å—à–µ PRICE_TOLERANCE
    )
    parsed_data = ParsedData(positions=[position])
    
    validated_data = validate_invoice_prices(parsed_data)
    
    assert not validated_data.has_price_mismatches
    assert validated_data.price_mismatch_count == 0
    assert not validated_data.positions[0].price_mismatch

def test_price_validation_report_display():
    """–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –≤ —Ü–µ–Ω–∞—Ö –≤ –æ—Ç—á–µ—Ç–µ."""
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ–º –≤ —Ü–µ–Ω–µ
    position1 = Position(
        name="Item 1",
        qty=2.0,
        price_per_unit=100.0,
        total_price=205.0,  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 200.0
        status="ok"
    )
    position2 = Position(
        name="Item 2",
        qty=3.0,
        price=50.0,
        total_price=200.0,  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 150.0
        status="ok"
    )
    parsed_data = ParsedData(positions=[position1, position2])
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    validated_data = validate_invoice_prices(parsed_data)
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
    match_results = [
        {
            "name": position.name,
            "qty": position.qty,
            "unit": position.unit,
            "price": position.price,
            "status": position.status,
            "price_mismatch": position.price_mismatch,
            "mismatch_type": position.mismatch_type,
            "expected_total": position.expected_total
        }
        for position in validated_data.positions
    ]
    
    report, has_errors = build_report(validated_data, match_results)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è—Ö –≤ –æ—Ç—á–µ—Ç–µ
    assert "üí∞" in report  # –°–∏–º–≤–æ–ª –¥–ª—è –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –≤ —Ü–µ–Ω–∞—Ö
    assert "Found 2 price mismatches" in report
    assert "expected total: 200.0" in report
    assert "expected total: 150.0" in report
    assert has_errors  # –û—Ç—á–µ—Ç –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫

def test_price_validation_empty_data():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    parsed_data = ParsedData(positions=[])
    
    validated_data = validate_invoice_prices(parsed_data)
    
    assert not validated_data.has_price_mismatches
    assert validated_data.price_mismatch_count == 0
    assert len(validated_data.positions) == 0

def test_price_validation_missing_values():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏."""
    position = Position(
        name="Test Item",
        qty=2.0,
        # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç price_per_unit –∏ total_price
    )
    parsed_data = ParsedData(positions=[position])
    
    validated_data = validate_invoice_prices(parsed_data)
    
    assert not validated_data.has_price_mismatches
    assert validated_data.price_mismatch_count == 0
    assert not validated_data.positions[0].price_mismatch 