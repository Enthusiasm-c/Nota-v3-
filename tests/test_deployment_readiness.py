#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º.
"""

import sys
import pytest
from pathlib import Path

# Add project root to path
sys.path.insert(0, str(Path(__file__).parent.parent))


class TestDeploymentReadiness:
    """–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –¥–µ–ø–ª–æ—è."""

    def test_import_core_modules(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π."""
        try:
            from app import config, data_loader, matcher, alias
            from app.services.unified_syrve_client import UnifiedSyrveClient
            from app.syrve_mapping import get_syrve_guid
            assert True, "All core modules imported successfully"
        except ImportError as e:
            pytest.fail(f"Failed to import core modules: {e}")

    def test_data_loading(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö."""
        from app.data_loader import load_products, load_suppliers
        
        products = load_products()
        suppliers = load_suppliers()
        
        assert len(products) > 500, f"Expected >500 products, got {len(products)}"
        assert len(suppliers) > 0, f"Expected >0 suppliers, got {len(suppliers)}"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        sample_product = products[0]
        required_fields = ['id', 'name']
        for field in required_fields:
            assert hasattr(sample_product, field) or field in sample_product, f"Product missing field: {field}"

    def test_improved_matcher_critical_cases(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ matcher –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ª—É—á–∞–µ–≤."""
        from app.matcher import calculate_string_similarity, fuzzy_find
        from app.data_loader import load_products
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
        critical_tests = [
            ("mayonnaise", "mayo", 0.75),  # –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞
            ("mozzarella", "mozzarela", 0.75),
            ("chicken breast", "chicken", 0.75),
            ("tomato sauce", "tomato", 0.75),
        ]
        
        products = load_products()
        
        for query, expected_match, min_score in critical_tests:
            score = calculate_string_similarity(query, expected_match)
            assert score >= min_score, f"Critical test failed: {query} -> {expected_match} = {score:.3f} < {min_score}"
            
            # –¢–µ—Å—Ç —á–µ—Ä–µ–∑ fuzzy_find
            results = fuzzy_find(query, products, threshold=0.75, limit=1)
            assert len(results) > 0, f"No fuzzy_find results for: {query}"
            assert results[0]["score"] >= 0.75, f"Low score in fuzzy_find for {query}: {results[0]['score']:.3f}"

    def test_syrve_mapping_integrity(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –º–∞–ø–∏–Ω–≥–∞ Syrve."""
        from app.syrve_mapping import get_syrve_guid
        from app.data_loader import load_products
        
        products = load_products()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã
        critical_products = [
            "2bba7486-15c4-4808-9d29-a4a4ae606b1a",  # mayo
            "a815ce5a-5d2a-45e3-8187-318b6daa76ec",  # mozzarella
        ]
        
        for product_id in critical_products:
            guid = get_syrve_guid(product_id)
            assert guid is not None, f"No Syrve mapping for critical product: {product_id}"
            assert len(guid) > 20, f"Invalid GUID format for {product_id}: {guid}"

    def test_syrve_client_initialization(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Syrve –∫–ª–∏–µ–Ω—Ç–∞."""
        from app.services.unified_syrve_client import UnifiedSyrveClient
        from app.config import settings
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω
        try:
            client = UnifiedSyrveClient(
                base_url=settings.SYRVE_SERVER_URL,
                login=settings.SYRVE_LOGIN,
                password=settings.SYRVE_PASSWORD,
                verify_ssl=settings.VERIFY_SSL
            )
            assert client is not None
            assert client.base_url == settings.SYRVE_SERVER_URL
        except Exception as e:
            pytest.fail(f"Failed to initialize Syrve client: {e}")

    def test_config_settings(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        from app.config import settings
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
        critical_settings = [
            'TELEGRAM_BOT_TOKEN',
            'SYRVE_SERVER_URL',
            'SYRVE_LOGIN',
            'MATCH_THRESHOLD'
        ]
        
        for setting in critical_settings:
            value = getattr(settings, setting, None)
            assert value is not None, f"Critical setting missing: {setting}"
            assert str(value).strip() != "", f"Critical setting empty: {setting}"

    def test_file_permissions_and_existence(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º."""
        from pathlib import Path
        
        critical_files = [
            'data/base_products.csv',
            'data/base_suppliers.csv', 
            'data/syrve_mapping.csv',
            'data/aliases.csv',
            'app/config.py',
            'app/matcher.py',
            'app/services/unified_syrve_client.py',
            'restart_bot.sh'
        ]
        
        project_root = Path(__file__).parent.parent
        
        for file_path in critical_files:
            full_path = project_root / file_path
            assert full_path.exists(), f"Critical file missing: {file_path}"
            assert full_path.is_file(), f"Path is not a file: {file_path}"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —á—Ç–µ–Ω–∏–µ
            assert full_path.stat().st_mode & 0o444, f"File not readable: {file_path}"

    def test_bot_restart_script(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
        from pathlib import Path
        
        script_path = Path(__file__).parent.parent / "restart_bot.sh"
        assert script_path.exists(), "Bot restart script missing"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        assert script_path.stat().st_mode & 0o111, "Bot restart script not executable"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
        content = script_path.read_text()
        assert "pkill" in content, "Script missing process kill logic"
        assert "bot.py" in content, "Script missing bot.py reference"

    def test_memory_and_performance_basics(self):
        """–ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        import time
        from app.matcher import calculate_string_similarity
        
        # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ matcher
        start_time = time.time()
        
        test_pairs = [
            ("mayonnaise", "mayo"),
            ("chicken breast", "chicken"),
            ("tomato sauce", "tomato")
        ] * 50  # 150 –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
        
        for s1, s2 in test_pairs:
            calculate_string_similarity(s1, s2)
            
        execution_time = time.time() - start_time
        
        # 150 –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 1 —Å–µ–∫—É–Ω–¥—É
        assert execution_time < 1.0, f"Performance test failed: {execution_time:.3f}s for 150 calculations"

    def test_critical_environment_variables(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
        from app.config import settings
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
        critical_settings = [
            ('TELEGRAM_BOT_TOKEN', settings.TELEGRAM_BOT_TOKEN),
            ('SYRVE_SERVER_URL', settings.SYRVE_SERVER_URL),
            ('SYRVE_LOGIN', settings.SYRVE_LOGIN),
            ('SYRVE_PASSWORD', settings.SYRVE_PASSWORD),
        ]
        
        missing_vars = []
        for var_name, var_value in critical_settings:
            if not var_value or str(var_value).strip() == "":
                missing_vars.append(var_name)
                
        if missing_vars:
            pytest.fail(f"Missing critical configuration variables: {missing_vars}")


def run_deployment_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –¥–µ–ø–ª–æ—é."""
    print("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    exit_code = pytest.main([__file__, "-v", "--tb=short"])
    
    if exit_code == 0:
        print("\n" + "=" * 60)
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –¥–µ–ø–ª–æ—é!")
        print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
        print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π matcher —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
        print("‚úÖ Syrve –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        print("‚úÖ –ú–∞–ø–∏–Ω–≥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω") 
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        print("=" * 60)
    else:
        print("\n" + "=" * 60)
        print("‚ùå –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º!")
        print("=" * 60)
    
    return exit_code


if __name__ == "__main__":
    exit_code = run_deployment_tests()
    sys.exit(exit_code)