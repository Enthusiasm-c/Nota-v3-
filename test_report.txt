============================= test session starts ==============================
platform darwin -- Python 3.9.6, pytest-8.3.5, pluggy-1.5.0 -- /Users/Denis/notav3 cursor /Nota-v3-/venv/bin/python3
cachedir: .pytest_cache
rootdir: /Users/Denis/notav3 cursor /Nota-v3-
configfile: pytest.ini
plugins: anyio-4.9.0, vcr-1.0.2, asyncio-0.26.0
asyncio: mode=strict, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collecting ... collected 184 items

tests/test_api_decorators.py::TestErrorClassification::test_authentication_error PASSED [  0%]
tests/test_api_decorators.py::TestErrorClassification::test_rate_limit_error PASSED [  1%]
tests/test_api_decorators.py::TestErrorClassification::test_server_error PASSED [  1%]
tests/test_api_decorators.py::TestErrorClassification::test_timeout_error PASSED [  2%]
tests/test_api_decorators.py::TestErrorClassification::test_unknown_error PASSED [  2%]
tests/test_api_decorators.py::TestErrorClassification::test_validation_error PASSED [  3%]
tests/test_api_decorators.py::TestRetryDecorator::test_max_retries_exceeded PASSED [  3%]
tests/test_api_decorators.py::TestRetryDecorator::test_retry_until_success PASSED [  4%]
tests/test_api_decorators.py::TestRetryDecorator::test_success_without_retry PASSED [  4%]
tests/test_api_decorators.py::TestRetryDecorator::test_validation_error_no_retry PASSED [  5%]
tests/test_api_decorators.py::TestAsyncRetryDecorator::test_success_without_retry PASSED [  5%]
tests/test_api_decorators.py::TestAsyncRetryDecorator::test_retry_until_success PASSED [  6%]
tests/test_api_decorators.py::TestAsyncRetryDecorator::test_max_retries_exceeded PASSED [  7%]
tests/test_api_decorators.py::TestProgressStages::test_successful_completion PASSED [  7%]
tests/test_api_decorators.py::TestProgressStages::test_error_handling PASSED [  8%]
tests/test_api_signatures.py::test_matcher_signature PASSED              [  8%]
tests/test_api_signatures.py::test_formatter_signature PASSED            [  9%]
tests/test_apply_intent.py::test_parsed_to_dict_with_dict PASSED         [  9%]
tests/test_apply_intent.py::test_parsed_to_dict_with_parseddata PASSED   [ 10%]
tests/test_apply_intent.py::test_apply_intent_with_parseddata PASSED     [ 10%]
tests/test_apply_intent.py::test_set_price PASSED                        [ 11%]
tests/test_apply_intent.py::test_set_date PASSED                         [ 11%]
tests/test_apply_intent.py::test_apply_intent_price PASSED               [ 12%]
tests/test_apply_intent.py::test_apply_intent_date PASSED                [ 13%]
tests/test_assistant_http.py::test_run_thread_safe_caching PASSED        [ 13%]
tests/test_assistant_http.py::test_run_thread_safe_latency_with_cache PASSED [ 14%]
tests/test_basic.py::test_csv_loaded PASSED                              [ 14%]
tests/test_basic.py::test_matcher_stub PASSED                            [ 15%]
tests/test_build_report.py::test_build_report_with_escape_html PASSED    [ 15%]
tests/test_build_report.py::test_build_report_without_escape_html PASSED [ 16%]
tests/test_build_report.py::test_build_report_edge_cases PASSED          [ 16%]
tests/test_callbacks.py::test_safe_edit_with_none_reply_markup PASSED    [ 17%]
tests/test_callbacks.py::test_safe_edit_with_inline_keyboard PASSED      [ 17%]
tests/test_callbacks.py::test_callback_handled PASSED                    [ 18%]
tests/test_callbacks.py::test_keyboard_removal PASSED                    [ 19%]
tests/test_data_loader.py::test_load_suppliers PASSED                    [ 19%]
tests/test_data_loader.py::test_load_products PASSED                     [ 20%]
tests/test_edit_callback.py::test_edit_callback_flow PASSED              [ 20%]
tests/test_edit_flow.py::test_parsed_to_dict_success PASSED              [ 21%]
tests/test_edit_flow_integration.py::test_edit_flow_integration[date 2025-07-01; add Sugar 2 kg 150-invoice_in0-expected_invoice0-expected_intent0] PASSED [ 21%]
tests/test_edit_flow_integration.py::test_edit_flow_integration[row 1 price 101; row 25 qty 25; row 50 name Last-invoice_in1-expected_invoice1-expected_intent1] PASSED [ 22%]
tests/test_edit_flow_integration.py::test_edit_flow_integration[row 1 name Cheese; row 1 qty 7; row 1 price 350; row 1 unit kg-invoice_in2-expected_invoice2-expected_intent2] PASSED [ 22%]
tests/test_edit_flow_integration.py::test_edit_flow_integration[row 1 price 100; row 2 qty 5-invoice_in3-expected_invoice3-expected_intent3] PASSED [ 23%]
tests/test_edit_flow_integration.py::test_edit_flow_integration[row 1 name Apples; row 1 qty 10; row 1 price 200; row 1 unit kg-invoice_in4-expected_invoice4-expected_intent4] PASSED [ 23%]
tests/test_edit_flow_integration.py::test_edit_flow_integration[add Apples 3 kg 300; add Pears 2 kg 400-invoice_in5-expected_invoice5-expected_intent5] PASSED [ 24%]
tests/test_edit_flow_integration.py::test_edit_flow_integration[date 2025-06-01; add Apples 2 kg 100-invoice_in6-expected_invoice6-expected_intent6] PASSED [ 25%]
tests/test_edit_flow_integration.py::test_edit_flow_integration[row 1 price 12345-invoice_in7-expected_invoice7-expected_intent7] PASSED [ 25%]
tests/test_edit_flow_integration.py::test_edit_flow_integration[date 2025-06-01-invoice_in8-expected_invoice8-expected_intent8] PASSED [ 26%]
tests/test_edit_flow_integration.py::test_edit_flow_integration[add Apples 3 kg 300-invoice_in9-expected_invoice9-expected_intent9] PASSED [ 26%]
tests/test_edit_keyboard_inline.py::test_edit_keyboard_inline SKIPPED    [ 27%]
tests/test_edit_parser.py::test_parse_single_action PASSED               [ 27%]
tests/test_edit_parser.py::test_parse_actions_array PASSED               [ 28%]
tests/test_edit_parser.py::test_parse_missing_action PASSED              [ 28%]
tests/test_edit_parser.py::test_parse_missing_action_in_array PASSED     [ 29%]
tests/test_edit_parser.py::test_parse_plain_text PASSED                  [ 29%]
tests/test_edit_parser.py::test_parse_row_less_than_one PASSED           [ 30%]
tests/test_formatter_layout.py::test_report_layout_strict PASSED         [ 30%]
tests/test_formatter_no_bad_chars.py::test_formatter_no_bad_chars PASSED [ 31%]
tests/test_formatter_no_bad_chars.py::test_formatter_with_telegram_exception FAILED [ 32%]
tests/test_formatters.py::test_format_price FAILED                       [ 32%]
tests/test_formatters.py::test_format_quantity PASSED                    [ 33%]
tests/test_formatters.py::test_parse_date FAILED                         [ 33%]
tests/test_free_edit.py::test_edit_date PASSED                           [ 34%]
tests/test_free_edit.py::test_edit_line_field PASSED                     [ 34%]
tests/test_free_edit.py::test_remove_line PASSED                         [ 35%]
tests/test_free_edit.py::test_add_line PASSED                            [ 35%]
tests/test_free_edit.py::test_finish_intent PASSED                       [ 36%]
tests/test_free_edit.py::test_unknown_intent PASSED                      [ 36%]
tests/test_free_edit_date.py::test_free_edit_date FAILED                 [ 37%]
tests/test_free_edit_price.py::test_free_edit_price FAILED               [ 38%]
tests/test_free_parser.py::test_detect_intent_date PASSED                [ 38%]
tests/test_free_parser.py::test_detect_intent_edit_line_field PASSED     [ 39%]
tests/test_free_parser.py::test_detect_intent_remove_line PASSED         [ 39%]
tests/test_free_parser.py::test_detect_intent_add_line PASSED            [ 40%]
tests/test_free_parser.py::test_apply_edit_date PASSED                   [ 40%]
tests/test_free_parser.py::test_apply_edit_line_field PASSED             [ 41%]
tests/test_free_parser.py::test_apply_remove_line PASSED                 [ 41%]
tests/test_free_parser.py::test_apply_add_line PASSED                    [ 42%]
tests/test_free_parser.py::test_remove_nonexistent_line PASSED           [ 42%]
tests/test_free_parser.py::test_edit_nonexistent_line PASSED             [ 43%]
tests/test_free_parser.py::test_add_line_wrong_format PASSED             [ 44%]
tests/test_free_parser.py::test_edit_unknown_field PASSED                [ 44%]
tests/test_free_parser.py::test_finish_intent PASSED                     [ 45%]
tests/test_free_parser.py::test_unknown_intent PASSED                    [ 45%]
tests/test_free_parser.py::test_empty_invoice PASSED                     [ 46%]
tests/test_free_parser.py::test_none_fields PASSED                       [ 46%]
tests/test_free_parser.py::test_invalid_types PASSED                     [ 47%]
tests/test_free_parser.py::test_add_line_extra_spaces PASSED             [ 47%]
tests/test_free_parser.py::test_detect_intent_none PASSED                [ 48%]
tests/test_fuzzy_confirm.py::test_handle_free_edit_text_fuzzy_suggestion FAILED [ 48%]
tests/test_fuzzy_confirm.py::test_confirm_fuzzy_name FAILED              [ 49%]
tests/test_fuzzy_confirm.py::test_reject_fuzzy_name PASSED               [ 50%]
tests/test_fuzzy_match.py::test_fuzzy_best PASSED                        [ 50%]
tests/test_fuzzy_match.py::test_fuzzy_similar_length_products PASSED     [ 51%]
tests/test_fuzzy_match.py::test_fuzzy_substring_products PASSED          [ 51%]
tests/test_fuzzy_match.py::test_fuzzy_multiple_typos_unique_assignment PASSED [ 52%]
tests/test_fuzzy_match.py::test_fuzzy_no_match_below_threshold PASSED    [ 52%]
tests/test_fuzzy_match.py::test_fuzzy_rescue_in_match_positions PASSED   [ 53%]
tests/test_handlers.py::test_start_handler FAILED                        [ 53%]
tests/test_handlers.py::test_text_fallback FAILED                        [ 54%]
tests/test_html_kept.py::test_report_html_keeps_tags PASSED              [ 54%]
tests/test_integration_real.py::test_full_flow_with_real_data PASSED     [ 55%]
tests/test_intent_adapter_array.py::test_adapt_intent_with_actions_array PASSED [ 55%]
tests/test_intent_adapter_array.py::test_adapt_intent_with_multiple_actions PASSED [ 56%]
tests/test_intent_adapter_array.py::test_adapt_intent_with_single_action PASSED [ 57%]
tests/test_intent_adapter_array.py::test_extract_json_with_actions_array PASSED [ 57%]
tests/test_intent_adapter_array.py::test_intent_normalization_with_actions_array PASSED [ 58%]
tests/test_intent_adapter_array.py::test_row_field_converted_to_line_index PASSED [ 58%]
tests/test_keyboard_main_edit.py::test_keyboard_two_buttons_with_errors PASSED [ 59%]
tests/test_keyboard_main_edit.py::test_keyboard_three_buttons_no_errors PASSED [ 59%]
tests/test_keyboard_main_edit.py::test_build_edit_keyboard_forwards_to_build_main_kb PASSED [ 60%]
tests/test_keyboard_main_edit.py::test_cb_edit_line_state_transition FAILED [ 60%]
tests/test_latency_logging.py::test_latency_logging_info_and_warning FAILED [ 61%]
tests/test_latency_logging.py::test_latency_logging_info_and_warning ERROR [ 61%]
tests/test_md_escape.py::test_escape_html_basic PASSED                   [ 61%]
tests/test_md_escape.py::test_escape_v2_without_code_blocks PASSED       [ 62%]
tests/test_md_escape.py::test_escape_v2_edge_cases PASSED                [ 63%]
tests/test_monitor.py::test_monitor_triggers_alert FAILED                [ 63%]
tests/test_monitor.py::test_monitor_triggers_alert ERROR                 [ 63%]
tests/test_monitor.py::test_monitor_not_triggered_for_few_errors PASSED  [ 64%]
tests/test_monitor.py::test_monitor_not_triggered_for_few_errors ERROR   [ 64%]
tests/test_monitor.py::test_latency_monitor_triggers_alert_on_p95 PASSED [ 64%]
tests/test_ocr.py::test_direct_vision_api FAILED                         [ 65%]
tests/test_ocr.py::test_json_extraction_with_nested_data PASSED          [ 65%]
tests/test_ocr.py::test_postprocessing_clean_num PASSED                  [ 66%]
tests/test_ocr.py::test_postprocessing_autocorrect_name PASSED           [ 66%]
tests/test_ocr_cleaner.py::test_cleaner_positions_only PASSED            [ 67%]
tests/test_ocr_function_call.py::test_openai_function_call FAILED        [ 67%]
tests/test_ocr_live.py::test_live_ocr SKIPPED (no key)                   [ 68%]
tests/test_parse_assistant_array.py::test_parse_assistant_output_with_actions_array PASSED [ 69%]
tests/test_parse_assistant_array.py::test_parse_assistant_output_with_multiple_actions PASSED [ 69%]
tests/test_parse_assistant_array.py::test_parse_assistant_output_with_single_action PASSED [ 70%]
tests/test_parse_assistant_array.py::test_parse_assistant_output_with_invalid_actions PASSED [ 70%]
tests/test_parse_assistant_array.py::test_parse_assistant_output_with_no_valid_actions PASSED [ 71%]
tests/test_parse_commands_edge_cases.py::test_parse_commands_edge_cases[-None-expected0] PASSED [ 71%]
tests/test_parse_commands_edge_cases.py::test_parse_commands_edge_cases[   -None-expected1] PASSED [ 72%]
tests/test_parse_commands_edge_cases.py::test_parse_commands_edge_cases[\u0441\u0442\u0440\u043e\u043a\u0430 -1 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e 5-3-expected2] PASSED [ 72%]
tests/test_parse_commands_edge_cases.py::test_parse_commands_edge_cases[row 0 qty 3-2-expected3] PASSED [ 73%]
tests/test_parse_commands_edge_cases.py::test_parse_commands_edge_cases[\u0441\u0442\u0440\u043e\u043a\u0430 10 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e 1-2-expected4] PASSED [ 73%]
tests/test_parse_commands_edge_cases.py::test_parse_commands_edge_cases[row 5 qty 2-3-expected5] PASSED [ 74%]
tests/test_parse_commands_edge_cases.py::test_parse_commands_edge_cases[\u0441\u0442\u0440\u043e\u043a\u0430 1 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u044f\u0442\u044c-None-expected6] PASSED [ 75%]
tests/test_parse_commands_edge_cases.py::test_parse_commands_edge_cases[row 1 qty five-None-expected7] PASSED [ 75%]
tests/test_parse_commands_edge_cases.py::test_parse_commands_edge_cases[\u043e\u0431\u0449\u0430\u044f \u0441\u0443\u043c\u043c\u0430 12,34,56-None-expected8] PASSED [ 76%]
tests/test_parse_commands_edge_cases.py::test_parse_commands_edge_cases[\u043f\u043e\u0441\u0442\u0430\u0432\u0449\u0438\u0438\u043a \u041e\u041e\u041e \u0420\u043e\u043c\u0430\u0448\u043a\u0430-None-expected9] PASSED [ 76%]
tests/test_parse_commands_edge_cases.py::test_parse_commands_edge_cases[totall 1234-None-expected10] PASSED [ 77%]
tests/test_parse_commands_edge_cases.py::test_parse_commands_edge_cases[change name in row two to Bread-None-expected11] PASSED [ 77%]
tests/test_parse_commands_edge_cases.py::test_parse_commands_edge_cases[\u043f\u043e\u0441\u0442\u0430\u0432\u0449\u0438\u043a \u041e\u041e\u041e \u0420\u043e\u043c\u0430\u0448\u043a\u0430\n\u0441\u0442\u0440\u043e\u043a\u0430 1 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e 2-None-expected12] PASSED [ 78%]
tests/test_parse_commands_edge_cases.py::test_parse_commands_edge_cases[supplier Acme Corp; row 2 name Milk-None-expected13] PASSED [ 78%]
tests/test_parse_commands_edge_cases.py::test_parse_commands_edge_cases[\u0441\u0442\u0440\u043e\u043a\u0430 1 \u0446\u0435\u043d\u0430 100, \u0441\u0442\u0440\u043e\u043a\u0430 2 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e 5-None-expected14] PASSED [ 79%]
tests/test_parse_commands_edge_cases.py::test_parse_commands_edge_cases[\u0441\u0442\u0440\u043e\u043a\u0430 1 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u041c\u043e\u043b\u043e\u043a\u043e. \u0441\u0442\u0440\u043e\u043a\u0430 1 \u0446\u0435\u043d\u0430 200. \u0441\u0442\u0440\u043e\u043a\u0430 1 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e 3-None-expected15] PASSED [ 79%]
tests/test_parse_commands_edge_cases.py::test_parse_commands_edge_cases[\u043f\u043e\u0441\u0442\u0430\u0432\u0449\u0438\u043a \u041e\u041e\u041e \u0420\u043e\u043c\u0430\u0448\u043a\u0430; \u0441\u0442\u0440\u043e\u043a\u0430 1 \u0446\u0435\u043d\u0430 100, \u0441\u0442\u0440\u043e\u043a\u0430 2 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e 5.-None-expected16] PASSED [ 80%]
tests/test_parse_commands_edge_cases.py::test_parse_commands_edge_cases[\u0441\u0442\u0440\u043e\u043a\u0430 1 \u0446\u0435\u043d\u0430 10.5, \u0441\u0442\u0440\u043e\u043a\u0430 2 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e 3.14-None-expected17] PASSED [ 80%]
tests/test_parse_commands_en.py::test_parse_commands_en[supplier Acme Corp-expected0] PASSED [ 81%]
tests/test_parse_commands_en.py::test_parse_commands_en[change supplier to Smith LLC-expected1] PASSED [ 82%]
tests/test_parse_commands_en.py::test_parse_commands_en[total 12345-expected2] PASSED [ 82%]
tests/test_parse_commands_en.py::test_parse_commands_en[total amount 9999.50-expected3] FAILED [ 83%]
tests/test_parse_commands_en.py::test_parse_commands_en[\u0438\u0442\u043e\u0433\u043e 7777.77-expected4] PASSED [ 83%]
tests/test_parse_commands_en.py::test_parse_commands_en[row 2 name Milk-expected5] PASSED [ 84%]
tests/test_parse_commands_en.py::test_parse_commands_en[change name in row 3 to Bread-expected6] PASSED [ 84%]
tests/test_parse_commands_en.py::test_parse_commands_en[row 1 qty 5-expected7] PASSED [ 85%]
tests/test_parse_commands_en.py::test_parse_commands_en[change qty in row 2 to 2.5-expected8] PASSED [ 85%]
tests/test_parse_commands_en.py::test_parse_commands_en[row 1 qty 1.5-expected9] PASSED [ 86%]
tests/test_parse_commands_en.py::test_parse_commands_en[row 1 qty 2,75-expected10] PASSED [ 86%]
tests/test_parse_commands_ru.py::test_parse_commands_ru[\u043f\u043e\u0441\u0442\u0430\u0432\u0449\u0438\u043a \u041e\u041e\u041e \u0420\u043e\u043c\u0430\u0448\u043a\u0430-expected0] PASSED [ 87%]
tests/test_parse_commands_ru.py::test_parse_commands_ru[\u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u043e\u0441\u0442\u0430\u0432\u0449\u0438\u043a\u0430 \u043d\u0430 \u0418\u041f \u0418\u0432\u0430\u043d\u043e\u0432-expected1] PASSED [ 88%]
tests/test_parse_commands_ru.py::test_parse_commands_ru[\u043e\u0431\u0449\u0430\u044f \u0441\u0443\u043c\u043c\u0430 12345-expected2] PASSED [ 88%]
tests/test_parse_commands_ru.py::test_parse_commands_ru[\u0438\u0442\u043e\u0433\u043e 9999,50-expected3] PASSED [ 89%]
tests/test_parse_commands_ru.py::test_parse_commands_ru[total 111.11-expected4] PASSED [ 89%]
tests/test_parse_commands_ru.py::test_parse_commands_ru[\u0441\u0442\u0440\u043e\u043a\u0430 2 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0421\u043c\u0435\u0442\u0430\u043d\u0430-expected5] PASSED [ 90%]
tests/test_parse_commands_ru.py::test_parse_commands_ru[\u0441\u0442\u0440\u043e\u043a\u0430 1 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e 5-expected6] PASSED [ 90%]
tests/test_parse_commands_ru.py::test_parse_commands_ru[\u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 3 \u043d\u0430 2,5-expected7] PASSED [ 91%]
tests/test_parse_commands_ru.py::test_parse_commands_ru[\u0441\u0442\u0440\u043e\u043a\u0430 1 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e 1,5-expected8] PASSED [ 91%]
tests/test_parse_commands_ru.py::test_parse_commands_ru[\u0441\u0442\u0440\u043e\u043a\u0430 1 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e 2.75-expected9] PASSED [ 92%]
tests/test_parse_mode.py::test_edit_message_text_safe_parse_mode_html FAILED [ 92%]
tests/test_photo_handler.py::test_photo_ok ERROR                         [ 93%]
tests/test_photo_handler.py::test_photo_error ERROR                      [ 94%]
tests/test_postprocessing.py::test_clean_num_handles_all_formats PASSED  [ 94%]
tests/test_postprocessing.py::test_clean_num_handles_complex_formats PASSED [ 95%]
tests/test_postprocessing.py::test_autocorrect_name PASSED               [ 95%]
tests/test_postprocessing.py::test_postprocess_parsed_data PASSED        [ 96%]
tests/test_postprocessing.py::test_manual_autocorrection PASSED          [ 96%]
tests/test_postprocessing.py::test_postprocess_with_direct_patch PASSED  [ 97%]
tests/test_redis_cache.py::test_cache_set_and_get_mock FAILED            [ 97%]
tests/test_redis_cache.py::test_cache_overwrite_mock FAILED              [ 98%]
tests/test_single_message_ux.py::test_progress_edit_single_msg FAILED    [ 98%]
tests/test_trace_logging.py::test_run_thread_safe_logs_error_traceid PASSED [ 99%]
tests/test_trace_logging.py::test_run_thread_safe_logs_error_traceid ERROR [ 99%]
tests/test_unknown_flow.py::test_unknown_supplier_triggers_keyboard FAILED [100%]

==================================== ERRORS ====================================
__________ ERROR at teardown of test_latency_logging_info_and_warning __________

level = <MagicMock name='mock.manager.disable' id='4662774224'>

    def disable(level=CRITICAL):
        """
        Disable all logging calls of severity 'level' and below.
        """
>       root.manager.disable = level

/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/logging/__init__.py:2123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/logging/__init__.py:1282: in disable
    self._disable = _checkLevel(value)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

level = <MagicMock name='mock.manager.disable' id='4662774224'>

    def _checkLevel(level):
        if isinstance(level, int):
            rv = level
        elif str(level) == level:
            if level not in _nameToLevel:
                raise ValueError("Unknown level: %r" % level)
            rv = _nameToLevel[level]
        else:
>           raise TypeError("Level not an integer or a valid string: %r" % level)
E           TypeError: Level not an integer or a valid string: <MagicMock name='mock.manager.disable' id='4662774224'>

/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/logging/__init__.py:201: TypeError
----------------------------- Captured stderr call -----------------------------
2025-05-08 22:04:39,215 - app.assistants.trace_openai - INFO - OpenAI call: prompt
2025-05-08 22:04:39,215 - app.assistants.trace_openai - INFO - OpenAI call: prompt
2025-05-08 22:04:39,215 - app.assistants.trace_openai - INFO - OpenAI call: result
2025-05-08 22:04:39,215 - app.assistants.thread_pool - INFO - Created new thread outside pool: thread-123
2025-05-08 22:04:39,215 - app.assistants.client - INFO - [run_thread_safe_async] Using thread from pool: thread-123
2025-05-08 22:04:39,215 - app.assistants.client - INFO - [run_thread_safe_async] Adding user message: 'fast input'
2025-05-08 22:04:39,215 - app.assistants.client - INFO - [run_thread_safe_async] Creating run with assistant ID: asst_zkAj2P6JswgpT0Nc2bcsjeIU
2025-05-08 22:04:39,216 - app.assistants.client - INFO - assistant_latency_ms=0
2025-05-08 22:04:39,216 - app.assistants.client - INFO - [LATENCY] OpenAI response time: 0.00 sec
2025-05-08 22:04:39,216 - app.assistants.client - INFO - [run_thread_safe_async] Waiting for run completion, run ID: <MagicMock name='client.beta.threads.runs.create().id' id='4662926352'>
2025-05-08 22:04:39,216 - app.assistants.client - INFO - [run_thread_safe_async] Run completed, retrieving assistant messages
2025-05-08 22:04:39,217 - app.assistants.client - ERROR - [run_thread_safe_async] Assistant did not generate any response
2025-05-08 22:04:39,217 - app.assistants.trace_openai - INFO - OpenAI call: result
2025-05-08 22:04:39,215 - app.assistants.trace_openai - INFO - OpenAI call: prompt
2025-05-08 22:04:50,215 - app.assistants.trace_openai - INFO - OpenAI call: prompt
------------------------------ Captured log call -------------------------------
INFO     app.assistants.trace_openai:trace_openai.py:11 OpenAI call: prompt
INFO     app.assistants.trace_openai:trace_openai.py:11 OpenAI call: prompt
INFO     app.assistants.trace_openai:trace_openai.py:14 OpenAI call: result
INFO     app.assistants.thread_pool:thread_pool.py:73 Created new thread outside pool: thread-123
INFO     app.assistants.client:client.py:523 [run_thread_safe_async] Using thread from pool: thread-123
INFO     app.assistants.client:client.py:536 [run_thread_safe_async] Adding user message: 'fast input'
INFO     app.assistants.client:client.py:555 [run_thread_safe_async] Creating run with assistant ID: asst_zkAj2P6JswgpT0Nc2bcsjeIU
INFO     app.assistants.client:client.py:577 assistant_latency_ms=0
INFO     app.assistants.client:client.py:581 [LATENCY] OpenAI response time: 0.00 sec
INFO     app.assistants.client:client.py:584 [run_thread_safe_async] Waiting for run completion, run ID: <MagicMock name='client.beta.threads.runs.create().id' id='4662926352'>
INFO     app.assistants.client:client.py:775 [run_thread_safe_async] Run completed, retrieving assistant messages
ERROR    app.assistants.client:client.py:797 [run_thread_safe_async] Assistant did not generate any response
INFO     app.assistants.trace_openai:trace_openai.py:14 OpenAI call: result
INFO     app.assistants.trace_openai:trace_openai.py:11 OpenAI call: prompt
INFO     app.assistants.trace_openai:trace_openai.py:11 OpenAI call: prompt
_______________ ERROR at teardown of test_monitor_triggers_alert _______________

level = <MagicMock name='mock.manager.disable' id='4662774224'>

    def disable(level=CRITICAL):
        """
        Disable all logging calls of severity 'level' and below.
        """
>       root.manager.disable = level

/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/logging/__init__.py:2123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/logging/__init__.py:1282: in disable
    self._disable = _checkLevel(value)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

level = <MagicMock name='mock.manager.disable' id='4662774224'>

    def _checkLevel(level):
        if isinstance(level, int):
            rv = level
        elif str(level) == level:
            if level not in _nameToLevel:
                raise ValueError("Unknown level: %r" % level)
            rv = _nameToLevel[level]
        else:
>           raise TypeError("Level not an integer or a valid string: %r" % level)
E           TypeError: Level not an integer or a valid string: <MagicMock name='mock.manager.disable' id='4662774224'>

/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/logging/__init__.py:201: TypeError
----------------------------- Captured stderr call -----------------------------
2025-05-08 22:04:39,491 - app.assistants.client - INFO - [parse_assistant_output] Начало разбора ассистент-ответа
2025-05-08 22:04:39,491 - app.assistants.client - INFO - [parse_assistant_output] JSON успешно разобран
2025-05-08 22:04:39,491 - app.assistants.client - WARNING - Assistant output: ни 'action', ни 'actions' не найдено, требуется уточнение
2025-05-08 22:04:39,491 - app.assistants.client - INFO - [parse_assistant_output] Начало разбора ассистент-ответа
2025-05-08 22:04:39,491 - app.assistants.client - INFO - [parse_assistant_output] JSON успешно разобран
2025-05-08 22:04:39,491 - app.assistants.client - WARNING - Assistant output: ни 'action', ни 'actions' не найдено, требуется уточнение
2025-05-08 22:04:39,491 - app.assistants.client - INFO - [parse_assistant_output] Начало разбора ассистент-ответа
2025-05-08 22:04:39,491 - app.assistants.client - INFO - [parse_assistant_output] JSON успешно разобран
2025-05-08 22:04:39,491 - app.assistants.client - WARNING - Assistant output: ни 'action', ни 'actions' не найдено, требуется уточнение
2025-05-08 22:04:39,491 - app.assistants.client - INFO - [parse_assistant_output] Начало разбора ассистент-ответа
2025-05-08 22:04:39,491 - app.assistants.client - INFO - [parse_assistant_output] JSON успешно разобран
2025-05-08 22:04:39,491 - app.assistants.client - WARNING - Assistant output: ни 'action', ни 'actions' не найдено, требуется уточнение
2025-05-08 22:04:39,491 - app.assistants.client - INFO - [parse_assistant_output] Начало разбора ассистент-ответа
2025-05-08 22:04:39,491 - app.assistants.client - INFO - [parse_assistant_output] JSON успешно разобран
2025-05-08 22:04:39,492 - app.assistants.client - WARNING - Assistant output: ни 'action', ни 'actions' не найдено, требуется уточнение
------------------------------ Captured log call -------------------------------
INFO     app.assistants.client:client.py:332 [parse_assistant_output] Начало разбора ассистент-ответа
INFO     app.assistants.client:client.py:335 [parse_assistant_output] JSON успешно разобран
WARNING  app.assistants.client:client.py:356 Assistant output: ни 'action', ни 'actions' не найдено, требуется уточнение
INFO     app.assistants.client:client.py:332 [parse_assistant_output] Начало разбора ассистент-ответа
INFO     app.assistants.client:client.py:335 [parse_assistant_output] JSON успешно разобран
WARNING  app.assistants.client:client.py:356 Assistant output: ни 'action', ни 'actions' не найдено, требуется уточнение
INFO     app.assistants.client:client.py:332 [parse_assistant_output] Начало разбора ассистент-ответа
INFO     app.assistants.client:client.py:335 [parse_assistant_output] JSON успешно разобран
WARNING  app.assistants.client:client.py:356 Assistant output: ни 'action', ни 'actions' не найдено, требуется уточнение
INFO     app.assistants.client:client.py:332 [parse_assistant_output] Начало разбора ассистент-ответа
INFO     app.assistants.client:client.py:335 [parse_assistant_output] JSON успешно разобран
WARNING  app.assistants.client:client.py:356 Assistant output: ни 'action', ни 'actions' не найдено, требуется уточнение
INFO     app.assistants.client:client.py:332 [parse_assistant_output] Начало разбора ассистент-ответа
INFO     app.assistants.client:client.py:335 [parse_assistant_output] JSON успешно разобран
WARNING  app.assistants.client:client.py:356 Assistant output: ни 'action', ни 'actions' не найдено, требуется уточнение
________ ERROR at teardown of test_monitor_not_triggered_for_few_errors ________

level = <MagicMock name='mock.manager.disable' id='4662774224'>

    def disable(level=CRITICAL):
        """
        Disable all logging calls of severity 'level' and below.
        """
>       root.manager.disable = level

/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/logging/__init__.py:2123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/logging/__init__.py:1282: in disable
    self._disable = _checkLevel(value)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

level = <MagicMock name='mock.manager.disable' id='4662774224'>

    def _checkLevel(level):
        if isinstance(level, int):
            rv = level
        elif str(level) == level:
            if level not in _nameToLevel:
                raise ValueError("Unknown level: %r" % level)
            rv = _nameToLevel[level]
        else:
>           raise TypeError("Level not an integer or a valid string: %r" % level)
E           TypeError: Level not an integer or a valid string: <MagicMock name='mock.manager.disable' id='4662774224'>

/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/logging/__init__.py:201: TypeError
----------------------------- Captured stderr call -----------------------------
2025-05-08 22:04:39,519 - app.assistants.client - INFO - [parse_assistant_output] Начало разбора ассистент-ответа
2025-05-08 22:04:39,519 - app.assistants.client - INFO - [parse_assistant_output] JSON успешно разобран
2025-05-08 22:04:39,519 - app.assistants.client - WARNING - Assistant output: ни 'action', ни 'actions' не найдено, требуется уточнение
2025-05-08 22:04:39,519 - app.assistants.client - INFO - [parse_assistant_output] Начало разбора ассистент-ответа
2025-05-08 22:04:39,519 - app.assistants.client - INFO - [parse_assistant_output] JSON успешно разобран
2025-05-08 22:04:39,519 - app.assistants.client - WARNING - Assistant output: ни 'action', ни 'actions' не найдено, требуется уточнение
2025-05-08 22:04:39,519 - app.assistants.client - INFO - [parse_assistant_output] Начало разбора ассистент-ответа
2025-05-08 22:04:39,519 - app.assistants.client - INFO - [parse_assistant_output] JSON успешно разобран
2025-05-08 22:04:39,519 - app.assistants.client - WARNING - Assistant output: ни 'action', ни 'actions' не найдено, требуется уточнение
------------------------------ Captured log call -------------------------------
INFO     app.assistants.client:client.py:332 [parse_assistant_output] Начало разбора ассистент-ответа
INFO     app.assistants.client:client.py:335 [parse_assistant_output] JSON успешно разобран
WARNING  app.assistants.client:client.py:356 Assistant output: ни 'action', ни 'actions' не найдено, требуется уточнение
INFO     app.assistants.client:client.py:332 [parse_assistant_output] Начало разбора ассистент-ответа
INFO     app.assistants.client:client.py:335 [parse_assistant_output] JSON успешно разобран
WARNING  app.assistants.client:client.py:356 Assistant output: ни 'action', ни 'actions' не найдено, требуется уточнение
INFO     app.assistants.client:client.py:332 [parse_assistant_output] Начало разбора ассистент-ответа
INFO     app.assistants.client:client.py:335 [parse_assistant_output] JSON успешно разобран
WARNING  app.assistants.client:client.py:356 Assistant output: ни 'action', ни 'actions' не найдено, требуется уточнение
_______________________ ERROR at setup of test_photo_ok ________________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x11776b2e0>

    @pytest.fixture
    def fake_msg(monkeypatch):
        with patch("aiogram.Bot.__init__", return_value=None):
>           bot, _ = create_bot_and_dispatcher()

tests/conftest.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
bot.py:87: in create_bot_and_dispatcher
    dp = Dispatcher(storage=storage)
venv/lib/python3.9/site-packages/aiogram/dispatcher/dispatcher.py:95: in __init__
    self._running_lock = Lock()
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/locks.py:81: in __init__
    self._loop = events.get_event_loop()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x11128c310>

    def get_event_loop(self):
        """Get the event loop for the current context.
    
        Returns an instance of EventLoop or raises an exception.
        """
        if (self._local._loop is None and
                not self._local._set_called and
                threading.current_thread() is threading.main_thread()):
            self.set_event_loop(self.new_event_loop())
    
        if self._local._loop is None:
>           raise RuntimeError('There is no current event loop in thread %r.'
                               % threading.current_thread().name)
E           RuntimeError: There is no current event loop in thread 'MainThread'.

/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/events.py:642: RuntimeError
______________________ ERROR at setup of test_photo_error ______________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x11763d4c0>

    @pytest.fixture
    def fake_msg(monkeypatch):
        with patch("aiogram.Bot.__init__", return_value=None):
>           bot, _ = create_bot_and_dispatcher()

tests/conftest.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
bot.py:87: in create_bot_and_dispatcher
    dp = Dispatcher(storage=storage)
venv/lib/python3.9/site-packages/aiogram/dispatcher/dispatcher.py:95: in __init__
    self._running_lock = Lock()
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/locks.py:81: in __init__
    self._loop = events.get_event_loop()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x11128c310>

    def get_event_loop(self):
        """Get the event loop for the current context.
    
        Returns an instance of EventLoop or raises an exception.
        """
        if (self._local._loop is None and
                not self._local._set_called and
                threading.current_thread() is threading.main_thread()):
            self.set_event_loop(self.new_event_loop())
    
        if self._local._loop is None:
>           raise RuntimeError('There is no current event loop in thread %r.'
                               % threading.current_thread().name)
E           RuntimeError: There is no current event loop in thread 'MainThread'.

/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/events.py:642: RuntimeError
_________ ERROR at teardown of test_run_thread_safe_logs_error_traceid _________

level = <MagicMock name='mock.manager.disable' id='4662774224'>

    def disable(level=CRITICAL):
        """
        Disable all logging calls of severity 'level' and below.
        """
>       root.manager.disable = level

/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/logging/__init__.py:2123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/logging/__init__.py:1282: in disable
    self._disable = _checkLevel(value)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

level = <MagicMock name='mock.manager.disable' id='4662774224'>

    def _checkLevel(level):
        if isinstance(level, int):
            rv = level
        elif str(level) == level:
            if level not in _nameToLevel:
                raise ValueError("Unknown level: %r" % level)
            rv = _nameToLevel[level]
        else:
>           raise TypeError("Level not an integer or a valid string: %r" % level)
E           TypeError: Level not an integer or a valid string: <MagicMock name='mock.manager.disable' id='4662774224'>

/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/logging/__init__.py:201: TypeError
----------------------------- Captured stderr call -----------------------------
2025-05-08 22:04:40,354 - app.assistants.trace_openai - INFO - OpenAI call: prompt
2025-05-08 22:04:40,354 - app.assistants.trace_openai - INFO - OpenAI call: prompt
2025-05-08 22:04:40,354 - app.assistants.trace_openai - INFO - OpenAI call: result
2025-05-08 22:04:40,427 - openai._base_client - INFO - Retrying request to /threads in 0.491624 seconds
2025-05-08 22:04:41,003 - openai._base_client - INFO - Retrying request to /threads in 0.751405 seconds
2025-05-08 22:04:41,840 - app.assistants.thread_pool - ERROR - Error creating thread: Connection error.
2025-05-08 22:04:41,840 - app.assistants.client - ERROR - [run_thread_safe_async] OpenAI API connection error: Connection error.
Traceback (most recent call last):
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpx/_transports/default.py", line 101, in map_httpcore_exceptions
    yield
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpx/_transports/default.py", line 250, in handle_request
    resp = self._pool.handle_request(req)
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpcore/_sync/connection_pool.py", line 256, in handle_request
    raise exc from None
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpcore/_sync/connection_pool.py", line 236, in handle_request
    response = connection.handle_request(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpcore/_sync/connection.py", line 103, in handle_request
    return self._connection.handle_request(request)
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpcore/_sync/http11.py", line 136, in handle_request
    raise exc
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpcore/_sync/http11.py", line 86, in handle_request
    self._send_request_headers(**kwargs)
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpcore/_sync/http11.py", line 145, in _send_request_headers
    event = h11.Request(
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/contextlib.py", line 135, in __exit__
    self.gen.throw(type, value, traceback)
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpcore/_exceptions.py", line 14, in map_exceptions
    raise to_exc(exc) from exc
httpcore.LocalProtocolError: Illegal header value b'Bearer '

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/_base_client.py", line 993, in _request
    response = self._client.send(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpx/_client.py", line 914, in send
    response = self._send_handling_auth(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpx/_client.py", line 942, in _send_handling_auth
    response = self._send_handling_redirects(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpx/_client.py", line 979, in _send_handling_redirects
    response = self._send_single_request(request)
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpx/_client.py", line 1014, in _send_single_request
    response = transport.handle_request(request)
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpx/_transports/default.py", line 250, in handle_request
    resp = self._pool.handle_request(req)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/contextlib.py", line 135, in __exit__
    self.gen.throw(type, value, traceback)
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpx/_transports/default.py", line 118, in map_httpcore_exceptions
    raise mapped_exc(message) from exc
httpx.LocalProtocolError: Illegal header value b'Bearer '

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/Denis/notav3 cursor /Nota-v3-/app/assistants/client.py", line 521, in run_thread_safe_async
    thread_id = await get_thread(client)
  File "/Users/Denis/notav3 cursor /Nota-v3-/app/assistants/thread_pool.py", line 72, in get_thread
    thread = client.beta.threads.create()
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/resources/beta/threads/threads.py", line 131, in create
    return self._post(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/_base_client.py", line 1280, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/_base_client.py", line 957, in request
    return self._request(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/_base_client.py", line 1017, in _request
    return self._retry_request(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/_base_client.py", line 1095, in _retry_request
    return self._request(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/_base_client.py", line 1017, in _request
    return self._retry_request(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/_base_client.py", line 1095, in _retry_request
    return self._request(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/_base_client.py", line 1027, in _request
    raise APIConnectionError(request=request) from err
openai.APIConnectionError: Connection error.
2025-05-08 22:04:41,842 - app.assistants.trace_openai - INFO - OpenAI call: result
------------------------------ Captured log call -------------------------------
INFO     app.assistants.trace_openai:trace_openai.py:11 OpenAI call: prompt
INFO     app.assistants.trace_openai:trace_openai.py:11 OpenAI call: prompt
INFO     app.assistants.trace_openai:trace_openai.py:14 OpenAI call: result
INFO     openai._base_client:_base_client.py:1089 Retrying request to /threads in 0.491624 seconds
INFO     openai._base_client:_base_client.py:1089 Retrying request to /threads in 0.751405 seconds
ERROR    app.assistants.thread_pool:thread_pool.py:76 Error creating thread: Connection error.
ERROR    app.assistants.client:client.py:869 [run_thread_safe_async] OpenAI API connection error: Connection error.
Traceback (most recent call last):
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpx/_transports/default.py", line 101, in map_httpcore_exceptions
    yield
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpx/_transports/default.py", line 250, in handle_request
    resp = self._pool.handle_request(req)
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpcore/_sync/connection_pool.py", line 256, in handle_request
    raise exc from None
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpcore/_sync/connection_pool.py", line 236, in handle_request
    response = connection.handle_request(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpcore/_sync/connection.py", line 103, in handle_request
    return self._connection.handle_request(request)
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpcore/_sync/http11.py", line 136, in handle_request
    raise exc
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpcore/_sync/http11.py", line 86, in handle_request
    self._send_request_headers(**kwargs)
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpcore/_sync/http11.py", line 145, in _send_request_headers
    event = h11.Request(
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/contextlib.py", line 135, in __exit__
    self.gen.throw(type, value, traceback)
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpcore/_exceptions.py", line 14, in map_exceptions
    raise to_exc(exc) from exc
httpcore.LocalProtocolError: Illegal header value b'Bearer '

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/_base_client.py", line 993, in _request
    response = self._client.send(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpx/_client.py", line 914, in send
    response = self._send_handling_auth(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpx/_client.py", line 942, in _send_handling_auth
    response = self._send_handling_redirects(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpx/_client.py", line 979, in _send_handling_redirects
    response = self._send_single_request(request)
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpx/_client.py", line 1014, in _send_single_request
    response = transport.handle_request(request)
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpx/_transports/default.py", line 250, in handle_request
    resp = self._pool.handle_request(req)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/contextlib.py", line 135, in __exit__
    self.gen.throw(type, value, traceback)
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpx/_transports/default.py", line 118, in map_httpcore_exceptions
    raise mapped_exc(message) from exc
httpx.LocalProtocolError: Illegal header value b'Bearer '

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/Denis/notav3 cursor /Nota-v3-/app/assistants/client.py", line 521, in run_thread_safe_async
    thread_id = await get_thread(client)
  File "/Users/Denis/notav3 cursor /Nota-v3-/app/assistants/thread_pool.py", line 72, in get_thread
    thread = client.beta.threads.create()
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/resources/beta/threads/threads.py", line 131, in create
    return self._post(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/_base_client.py", line 1280, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/_base_client.py", line 957, in request
    return self._request(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/_base_client.py", line 1017, in _request
    return self._retry_request(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/_base_client.py", line 1095, in _retry_request
    return self._request(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/_base_client.py", line 1017, in _request
    return self._retry_request(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/_base_client.py", line 1095, in _retry_request
    return self._request(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/_base_client.py", line 1027, in _request
    raise APIConnectionError(request=request) from err
openai.APIConnectionError: Connection error.
INFO     app.assistants.trace_openai:trace_openai.py:14 OpenAI call: result
=================================== FAILURES ===================================
____________________ test_formatter_with_telegram_exception ____________________

    @pytest.mark.asyncio
    async def test_formatter_with_telegram_exception():
        """
        Проверяет обработку исключения TelegramBadRequest при отправке сообщений
        с HTML-форматированием, содержащих специальные символы.
        """
    
        # Бот, который выбрасывает исключение при первой попытке отправки
        class FailingBot:
            def __init__(self):
                self.attempts = 0
                self.sent = []
    
            async def send_message(self, chat_id, text, parse_mode=None):
                self.attempts += 1
                if self.attempts == 1 and parse_mode == "HTML":
                    # Симулируем ошибку парсинга HTML
                    raise TelegramBadRequest("Bad Request: can't parse entities")
    
                # Если сюда дошли, значит это вторая попытка или без форматирования
                self.sent.append((chat_id, text, parse_mode))
                return SimpleNamespace(message_id=123)
    
        bot = FailingBot()
    
        # Данные с опасными символами
        parsed = SimpleNamespace(supplier='Опасные символы: <>[](){}\\/|', date="2024-05-03")
        match_results = [
            {"name": "Продукт с <тегами>", "qty": 1, "unit": "шт", "price": 100, "status": "ok"},
        ]
    
        text, _ = build_report(parsed, match_results)
    
        # Симулируем обработку ошибки как в safe_edit
        try:
>           await bot.send_message(42, text, parse_mode="HTML")

tests/test_formatter_no_bad_chars.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <test_formatter_no_bad_chars.test_formatter_with_telegram_exception.<locals>.FailingBot object at 0x115f22430>
chat_id = 42
text = '<b>Supplier:</b> Опасные символы: &amp;lt;&amp;gt;[](){}\\/|\n<b>Invoice date:</b> 2024-05-03\n\n<pre>#  NAME        ...-\n1  Продукт с &lt;1    шт   100 ID  </pre>\n<b>No errors. All items recognized correctly.</b>\nCorrect: 1\nIssues: 0'
parse_mode = 'HTML'

    async def send_message(self, chat_id, text, parse_mode=None):
        self.attempts += 1
        if self.attempts == 1 and parse_mode == "HTML":
            # Симулируем ошибку парсинга HTML
>           raise TelegramBadRequest("Bad Request: can't parse entities")
E           TypeError: __init__() missing 1 required positional argument: 'message'

tests/test_formatter_no_bad_chars.py:72: TypeError
______________________________ test_format_price _______________________________

    def test_format_price():
        """Тестирование форматирования цен в разных форматах."""
        # Проверка основных кейсов
>       assert format_price(1000) == "1 000,00"
E       AssertionError: assert '1\u202f000 IDR' == '1 000,00'
E         
E         - 1 000,00
E         + 1 000 IDR

tests/test_formatters.py:7: AssertionError
_______________________________ test_parse_date ________________________________

    def test_parse_date():
        """Тестирование парсинга дат в разных форматах."""
        # Проверка ISO формата YYYY-MM-DD
        assert parse_date("2023-01-02") == "2023-01-02"
    
        # Проверка форматов с разными разделителями
        assert parse_date("02.01.2023") == "2023-01-02"
        assert parse_date("02/01/2023") == "2023-01-02"
        assert parse_date("02-01-2023") == "2023-01-02"
    
        # Проверка американского формата MM-DD-YYYY
>       assert parse_date("01-02-2023") == "2023-01-02"
E       AssertionError: assert '2023-02-01' == '2023-01-02'
E         
E         - 2023-01-02
E         ?       ^  ^
E         + 2023-02-01
E         ?       ^  ^

tests/test_formatters.py:52: AssertionError
_____________________________ test_free_edit_date ______________________________

    @pytest.mark.asyncio
    async def test_free_edit_date():
        """
        Тест проверяет редактирование даты через GPT-ассистент.
    
        Given дата пустая.
        When сообщение: «дата 16 апреля».
        Then дата = 2025-04-16, отчёт перегенерирован, клавиатура не содержит ✅.
        """
        # Создаем мок сообщения
        message = AsyncMock(spec=Message)
        message.text = "дата 16 апреля"
        message.from_user = MagicMock(id=123)
        message.chat = MagicMock(id=456)
        message.answer = AsyncMock()
    
        # Создаем мок состояния FSM
        state = AsyncMock(spec=FSMContext)
    
        # Настраиваем состояние FSM для EditFree.awaiting_input
        async def mock_get_state():
            return EditFree.awaiting_input
        state.get_state = mock_get_state
    
        # Данные для state.get_data
        state_data = {
            "invoice": {
                "date": "",  # Пустая дата
                "supplier": "Test Supplier",
                "positions": [
                    {"name": "Apple", "qty": "1", "unit": "kg", "price": "100", "status": "ok"},
                    {"name": "Orange", "qty": "2", "unit": "kg", "price": "200", "status": "ok"},
                ]
            },
            "issues_count": 1  # Начальное количество ошибок (из-за пустой даты)
        }
        state.get_data.return_value = state_data
    
        # Мок для OpenAI Assistant
        assistant_response = {
            "action": "set_date",
            "value": "2025-04-16"
        }
    
        # Мокаем ASSISTANT_ID чтобы не было ошибки
        with patch('app.assistants.client.ASSISTANT_ID', 'test-assistant-id'):
            # Мокаем app.assistants.client.run_thread_safe, чтобы не обращался к OpenAI
            with patch('app.assistants.client.run_thread_safe', side_effect=lambda x: assistant_response):
                # Мокаем app.edit.apply_intent.set_date
                with patch('app.edit.apply_intent.set_date') as mock_set_date:
                    # Имитируем функцию set_date
                    def side_effect(invoice, value):
                        invoice["date"] = value
                        return invoice
    
                    mock_set_date.side_effect = side_effect
    
                    # Мокаем обновление issues_count
                    with patch('app.formatters.report.count_issues', return_value=0):
                        # Мокаем formatters.report.build_report
                        with patch('app.formatters.report.build_report') as mock_build_report:
                            # В отчете все еще есть ошибки (has_errors=True)
                            mock_build_report.return_value = ("<html>Updated invoice with date</html>", True)
    
                            # Мокаем клавиатуру
                            with patch('app.keyboards.build_main_kb') as mock_build_kb:
                                # Вызываем тестируемую функцию
                                from app.handlers.edit_flow import handle_free_edit_text
                                await handle_free_edit_text(message, state)
    
                                # Проверки
    
                                # 1. Проверяем, что OpenAI Assistant был вызван с правильным текстом
                                from app.assistants.client import run_thread_safe
>                               run_thread_safe.assert_called_once_with(message.text)

tests/test_free_edit_date.py:82: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='run_thread_safe' id='4662365008'>
args = ('дата 16 апреля',), kwargs = {}
msg = "Expected 'run_thread_safe' to be called once. Called 0 times."

    def assert_called_once_with(self, /, *args, **kwargs):
        """assert that the mock was called exactly once and that that call was
        with the specified arguments."""
        if not self.call_count == 1:
            msg = ("Expected '%s' to be called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
>           raise AssertionError(msg)
E           AssertionError: Expected 'run_thread_safe' to be called once. Called 0 times.

/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/unittest/mock.py:918: AssertionError
----------------------------- Captured stderr call -----------------------------
2025-05-08 22:04:35,369 - app.handlers.edit_flow - INFO - [edit_flow] Received update type: AsyncMock
2025-05-08 22:04:35,369 - app.assistants.trace_openai - INFO - OpenAI call: prompt
2025-05-08 22:04:35,369 - app.assistants.trace_openai - INFO - OpenAI call: result
2025-05-08 22:04:35,466 - openai._base_client - INFO - Retrying request to /threads in 0.488152 seconds
2025-05-08 22:04:36,042 - openai._base_client - INFO - Retrying request to /threads in 0.918102 seconds
2025-05-08 22:04:37,042 - app.assistants.thread_pool - ERROR - Error creating thread: Connection error.
2025-05-08 22:04:37,043 - app.assistants.client - ERROR - [run_thread_safe_async] OpenAI API connection error: Connection error.
Traceback (most recent call last):
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpx/_transports/default.py", line 101, in map_httpcore_exceptions
    yield
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpx/_transports/default.py", line 250, in handle_request
    resp = self._pool.handle_request(req)
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpcore/_sync/connection_pool.py", line 256, in handle_request
    raise exc from None
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpcore/_sync/connection_pool.py", line 236, in handle_request
    response = connection.handle_request(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpcore/_sync/connection.py", line 103, in handle_request
    return self._connection.handle_request(request)
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpcore/_sync/http11.py", line 136, in handle_request
    raise exc
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpcore/_sync/http11.py", line 86, in handle_request
    self._send_request_headers(**kwargs)
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpcore/_sync/http11.py", line 145, in _send_request_headers
    event = h11.Request(
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/contextlib.py", line 135, in __exit__
    self.gen.throw(type, value, traceback)
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpcore/_exceptions.py", line 14, in map_exceptions
    raise to_exc(exc) from exc
httpcore.LocalProtocolError: Illegal header value b'Bearer '

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/_base_client.py", line 993, in _request
    response = self._client.send(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpx/_client.py", line 914, in send
    response = self._send_handling_auth(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpx/_client.py", line 942, in _send_handling_auth
    response = self._send_handling_redirects(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpx/_client.py", line 979, in _send_handling_redirects
    response = self._send_single_request(request)
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpx/_client.py", line 1014, in _send_single_request
    response = transport.handle_request(request)
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpx/_transports/default.py", line 250, in handle_request
    resp = self._pool.handle_request(req)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/contextlib.py", line 135, in __exit__
    self.gen.throw(type, value, traceback)
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpx/_transports/default.py", line 118, in map_httpcore_exceptions
    raise mapped_exc(message) from exc
httpx.LocalProtocolError: Illegal header value b'Bearer '

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/Denis/notav3 cursor /Nota-v3-/app/assistants/client.py", line 521, in run_thread_safe_async
    thread_id = await get_thread(client)
  File "/Users/Denis/notav3 cursor /Nota-v3-/app/assistants/thread_pool.py", line 72, in get_thread
    thread = client.beta.threads.create()
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/resources/beta/threads/threads.py", line 131, in create
    return self._post(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/_base_client.py", line 1280, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/_base_client.py", line 957, in request
    return self._request(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/_base_client.py", line 1017, in _request
    return self._retry_request(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/_base_client.py", line 1095, in _retry_request
    return self._request(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/_base_client.py", line 1017, in _request
    return self._retry_request(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/_base_client.py", line 1095, in _retry_request
    return self._request(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/_base_client.py", line 1027, in _request
    raise APIConnectionError(request=request) from err
openai.APIConnectionError: Connection error.
------------------------------ Captured log call -------------------------------
INFO     app.handlers.edit_flow:edit_flow.py:32 [edit_flow] Received update type: AsyncMock
INFO     app.assistants.trace_openai:trace_openai.py:11 OpenAI call: prompt
INFO     app.assistants.trace_openai:trace_openai.py:14 OpenAI call: result
INFO     openai._base_client:_base_client.py:1089 Retrying request to /threads in 0.488152 seconds
INFO     openai._base_client:_base_client.py:1089 Retrying request to /threads in 0.918102 seconds
ERROR    app.assistants.thread_pool:thread_pool.py:76 Error creating thread: Connection error.
ERROR    app.assistants.client:client.py:869 [run_thread_safe_async] OpenAI API connection error: Connection error.
Traceback (most recent call last):
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpx/_transports/default.py", line 101, in map_httpcore_exceptions
    yield
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpx/_transports/default.py", line 250, in handle_request
    resp = self._pool.handle_request(req)
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpcore/_sync/connection_pool.py", line 256, in handle_request
    raise exc from None
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpcore/_sync/connection_pool.py", line 236, in handle_request
    response = connection.handle_request(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpcore/_sync/connection.py", line 103, in handle_request
    return self._connection.handle_request(request)
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpcore/_sync/http11.py", line 136, in handle_request
    raise exc
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpcore/_sync/http11.py", line 86, in handle_request
    self._send_request_headers(**kwargs)
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpcore/_sync/http11.py", line 145, in _send_request_headers
    event = h11.Request(
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/contextlib.py", line 135, in __exit__
    self.gen.throw(type, value, traceback)
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpcore/_exceptions.py", line 14, in map_exceptions
    raise to_exc(exc) from exc
httpcore.LocalProtocolError: Illegal header value b'Bearer '

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/_base_client.py", line 993, in _request
    response = self._client.send(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpx/_client.py", line 914, in send
    response = self._send_handling_auth(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpx/_client.py", line 942, in _send_handling_auth
    response = self._send_handling_redirects(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpx/_client.py", line 979, in _send_handling_redirects
    response = self._send_single_request(request)
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpx/_client.py", line 1014, in _send_single_request
    response = transport.handle_request(request)
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpx/_transports/default.py", line 250, in handle_request
    resp = self._pool.handle_request(req)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/contextlib.py", line 135, in __exit__
    self.gen.throw(type, value, traceback)
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpx/_transports/default.py", line 118, in map_httpcore_exceptions
    raise mapped_exc(message) from exc
httpx.LocalProtocolError: Illegal header value b'Bearer '

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/Denis/notav3 cursor /Nota-v3-/app/assistants/client.py", line 521, in run_thread_safe_async
    thread_id = await get_thread(client)
  File "/Users/Denis/notav3 cursor /Nota-v3-/app/assistants/thread_pool.py", line 72, in get_thread
    thread = client.beta.threads.create()
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/resources/beta/threads/threads.py", line 131, in create
    return self._post(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/_base_client.py", line 1280, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/_base_client.py", line 957, in request
    return self._request(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/_base_client.py", line 1017, in _request
    return self._retry_request(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/_base_client.py", line 1095, in _retry_request
    return self._request(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/_base_client.py", line 1017, in _request
    return self._retry_request(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/_base_client.py", line 1095, in _retry_request
    return self._request(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/_base_client.py", line 1027, in _request
    raise APIConnectionError(request=request) from err
openai.APIConnectionError: Connection error.
_____________________________ test_free_edit_price _____________________________

    @pytest.mark.asyncio
    async def test_free_edit_price():
        """
        Тест проверяет редактирование цены через прямое распознавание паттернов.
    
        Given накладная с 2 ошибочными строками.
        When пользователь в FSM-состоянии EditFree.awaiting_input присылает «строка 2 цена 95000».
        Then
        - поле price второй строки = 95000;
        - issues_count уменьшилось на 1;
        - отчёт пересобран и отправлен одной edit_message_text с parse_mode="HTML".
        """
        # Создаем мок сообщения
        message = AsyncMock(spec=Message)
        message.text = "строка 2 цена 95000"
        message.from_user = MagicMock(id=123)
        message.chat = MagicMock(id=456)
        message.answer = AsyncMock()
    
        # Создаем мок для удаления сообщения
        processing_msg = AsyncMock()
        message.answer.return_value = processing_msg
    
        # Создаем мок состояния FSM
        state = AsyncMock(spec=FSMContext)
    
        # Настраиваем состояние FSM для EditFree.awaiting_input
        async def mock_get_state():
            return EditFree.awaiting_input
        state.get_state = mock_get_state
    
        # Данные для state.get_data
        state_data = {
            "invoice": {
                "date": "2025-05-05",
                "supplier": "Test Supplier",
                "positions": [
                    {"name": "Apple", "qty": "1", "unit": "kg", "price": "100", "status": "ok"},
                    {"name": "Orange", "qty": "2", "unit": "kg", "price": "incorrect", "status": "error"},  # Ошибочная цена
                ]
            },
            "issues_count": 2  # Начальное количество ошибок
        }
        state.get_data.return_value = state_data
    
        # Mock the utils.cached_loader.cached_load_products
        with patch('app.utils.cached_loader.cached_load_products') as mock_cached_load:
            mock_cached_load.return_value = [
                {"id": "apple-1", "name": "apple", "unit": "kg"},
                {"id": "orange-1", "name": "orange", "unit": "kg"}
            ]
    
            # Mock handlers.name_picker.show_fuzzy_suggestions to prevent errors
            with patch('app.handlers.name_picker.show_fuzzy_suggestions') as mock_fuzzy:
                mock_fuzzy.return_value = False  # No suggestions shown
    
                # Mock matcher.match_positions to prevent errors
                with patch('app.matcher.match_positions') as mock_match:
                    mock_match.return_value = [
                        {"name": "Apple", "status": "ok"},
                        {"name": "Orange", "status": "ok"}  # Now recognized properly
                    ]
    
                    # We need to patch the specific import inside the function
                    with patch('app.edit.apply_intent.apply_intent') as mock_apply_intent:
                        # Simulate the behavior of apply_intent to update price
                        def apply_intent_side_effect(invoice, action_data):
                            # Create a copy to avoid modifying the original
                            invoice_copy = invoice.copy()
                            if action_data.get("action") == "set_price" and "line" in action_data:
                                line_idx = action_data["line"]
                                price = action_data.get("value", action_data.get("price"))
                                invoice_copy["positions"][line_idx]["price"] = str(price)
                                invoice_copy["positions"][line_idx]["status"] = "ok"
                            return invoice_copy
    
                        mock_apply_intent.side_effect = apply_intent_side_effect
    
                        # Mock formatters.report.build_report to prevent UI errors
                        with patch('app.formatters.report.build_report') as mock_build_report:
                            mock_build_report.return_value = ("<html>Updated invoice</html>", False)
    
                            # Вызываем тестируемую функцию
                            from app.handlers.edit_flow import handle_free_edit_text
                            await handle_free_edit_text(message, state)
    
                            # Check that apply_intent was called
>                           mock_apply_intent.assert_called()

tests/test_free_edit_price.py:94: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='apply_intent' id='4663035744'>

    def assert_called(self):
        """assert that the mock was called at least once
        """
        if self.call_count == 0:
            msg = ("Expected '%s' to have been called." %
                   (self._mock_name or 'mock'))
>           raise AssertionError(msg)
E           AssertionError: Expected 'apply_intent' to have been called.

/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/unittest/mock.py:876: AssertionError
----------------------------- Captured stderr call -----------------------------
2025-05-08 22:04:37,159 - app.handlers.edit_flow - INFO - [edit_flow] Received update type: AsyncMock
2025-05-08 22:04:37,159 - app.assistants.trace_openai - INFO - OpenAI call: prompt
2025-05-08 22:04:37,159 - app.assistants.trace_openai - INFO - OpenAI call: result
2025-05-08 22:04:37,233 - openai._base_client - INFO - Retrying request to /threads in 0.378197 seconds
2025-05-08 22:04:37,696 - openai._base_client - INFO - Retrying request to /threads in 0.978694 seconds
2025-05-08 22:04:38,762 - app.assistants.thread_pool - ERROR - Error creating thread: Connection error.
2025-05-08 22:04:38,766 - app.assistants.client - ERROR - [run_thread_safe_async] OpenAI API connection error: Connection error.
Traceback (most recent call last):
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpx/_transports/default.py", line 101, in map_httpcore_exceptions
    yield
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpx/_transports/default.py", line 250, in handle_request
    resp = self._pool.handle_request(req)
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpcore/_sync/connection_pool.py", line 256, in handle_request
    raise exc from None
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpcore/_sync/connection_pool.py", line 236, in handle_request
    response = connection.handle_request(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpcore/_sync/connection.py", line 103, in handle_request
    return self._connection.handle_request(request)
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpcore/_sync/http11.py", line 136, in handle_request
    raise exc
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpcore/_sync/http11.py", line 86, in handle_request
    self._send_request_headers(**kwargs)
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpcore/_sync/http11.py", line 145, in _send_request_headers
    event = h11.Request(
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/contextlib.py", line 135, in __exit__
    self.gen.throw(type, value, traceback)
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpcore/_exceptions.py", line 14, in map_exceptions
    raise to_exc(exc) from exc
httpcore.LocalProtocolError: Illegal header value b'Bearer '

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/_base_client.py", line 993, in _request
    response = self._client.send(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpx/_client.py", line 914, in send
    response = self._send_handling_auth(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpx/_client.py", line 942, in _send_handling_auth
    response = self._send_handling_redirects(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpx/_client.py", line 979, in _send_handling_redirects
    response = self._send_single_request(request)
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpx/_client.py", line 1014, in _send_single_request
    response = transport.handle_request(request)
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpx/_transports/default.py", line 250, in handle_request
    resp = self._pool.handle_request(req)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/contextlib.py", line 135, in __exit__
    self.gen.throw(type, value, traceback)
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpx/_transports/default.py", line 118, in map_httpcore_exceptions
    raise mapped_exc(message) from exc
httpx.LocalProtocolError: Illegal header value b'Bearer '

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/Denis/notav3 cursor /Nota-v3-/app/assistants/client.py", line 521, in run_thread_safe_async
    thread_id = await get_thread(client)
  File "/Users/Denis/notav3 cursor /Nota-v3-/app/assistants/thread_pool.py", line 72, in get_thread
    thread = client.beta.threads.create()
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/resources/beta/threads/threads.py", line 131, in create
    return self._post(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/_base_client.py", line 1280, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/_base_client.py", line 957, in request
    return self._request(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/_base_client.py", line 1017, in _request
    return self._retry_request(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/_base_client.py", line 1095, in _retry_request
    return self._request(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/_base_client.py", line 1017, in _request
    return self._retry_request(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/_base_client.py", line 1095, in _retry_request
    return self._request(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/_base_client.py", line 1027, in _request
    raise APIConnectionError(request=request) from err
openai.APIConnectionError: Connection error.
------------------------------ Captured log call -------------------------------
INFO     app.handlers.edit_flow:edit_flow.py:32 [edit_flow] Received update type: AsyncMock
INFO     app.assistants.trace_openai:trace_openai.py:11 OpenAI call: prompt
INFO     app.assistants.trace_openai:trace_openai.py:14 OpenAI call: result
INFO     openai._base_client:_base_client.py:1089 Retrying request to /threads in 0.378197 seconds
INFO     openai._base_client:_base_client.py:1089 Retrying request to /threads in 0.978694 seconds
ERROR    app.assistants.thread_pool:thread_pool.py:76 Error creating thread: Connection error.
ERROR    app.assistants.client:client.py:869 [run_thread_safe_async] OpenAI API connection error: Connection error.
Traceback (most recent call last):
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpx/_transports/default.py", line 101, in map_httpcore_exceptions
    yield
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpx/_transports/default.py", line 250, in handle_request
    resp = self._pool.handle_request(req)
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpcore/_sync/connection_pool.py", line 256, in handle_request
    raise exc from None
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpcore/_sync/connection_pool.py", line 236, in handle_request
    response = connection.handle_request(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpcore/_sync/connection.py", line 103, in handle_request
    return self._connection.handle_request(request)
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpcore/_sync/http11.py", line 136, in handle_request
    raise exc
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpcore/_sync/http11.py", line 86, in handle_request
    self._send_request_headers(**kwargs)
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpcore/_sync/http11.py", line 145, in _send_request_headers
    event = h11.Request(
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/contextlib.py", line 135, in __exit__
    self.gen.throw(type, value, traceback)
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpcore/_exceptions.py", line 14, in map_exceptions
    raise to_exc(exc) from exc
httpcore.LocalProtocolError: Illegal header value b'Bearer '

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/_base_client.py", line 993, in _request
    response = self._client.send(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpx/_client.py", line 914, in send
    response = self._send_handling_auth(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpx/_client.py", line 942, in _send_handling_auth
    response = self._send_handling_redirects(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpx/_client.py", line 979, in _send_handling_redirects
    response = self._send_single_request(request)
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpx/_client.py", line 1014, in _send_single_request
    response = transport.handle_request(request)
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpx/_transports/default.py", line 250, in handle_request
    resp = self._pool.handle_request(req)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/contextlib.py", line 135, in __exit__
    self.gen.throw(type, value, traceback)
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/httpx/_transports/default.py", line 118, in map_httpcore_exceptions
    raise mapped_exc(message) from exc
httpx.LocalProtocolError: Illegal header value b'Bearer '

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/Denis/notav3 cursor /Nota-v3-/app/assistants/client.py", line 521, in run_thread_safe_async
    thread_id = await get_thread(client)
  File "/Users/Denis/notav3 cursor /Nota-v3-/app/assistants/thread_pool.py", line 72, in get_thread
    thread = client.beta.threads.create()
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/resources/beta/threads/threads.py", line 131, in create
    return self._post(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/_base_client.py", line 1280, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/_base_client.py", line 957, in request
    return self._request(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/_base_client.py", line 1017, in _request
    return self._retry_request(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/_base_client.py", line 1095, in _retry_request
    return self._request(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/_base_client.py", line 1017, in _request
    return self._retry_request(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/_base_client.py", line 1095, in _retry_request
    return self._request(
  File "/Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/openai/_base_client.py", line 1027, in _request
    raise APIConnectionError(request=request) from err
openai.APIConnectionError: Connection error.
_________________ test_handle_free_edit_text_fuzzy_suggestion __________________

    @pytest.mark.asyncio
    async def test_handle_free_edit_text_fuzzy_suggestion():
        """Тест проверяет, что при редактировании имени с неточным совпадением
        пользователю предлагается выбор имени с порогом 82%"""
    
        # Мокаем функцию fuzzy_process.extractOne для контроля результата
        with patch('rapidfuzz.process.extractOne') as mock_extract:
            # Настраиваем мок, чтобы он возвращал хорошее совпадение (score >= 82)
            mock_extract.return_value = ("Apple", 85)
    
            # Создаем мок сообщения
            message = AsyncMock()
            message.text = "строка 1 name aple"
            message.from_user = MagicMock(id=123)
    
            # Создаем мок объекта состояния
            state = AsyncMock(spec=FSMContext)
            # Добавляем ключ 'invoice', чтобы не было преждевременного завершения сессии
            state.get_data.return_value = {
        "edit_msg_id": 456,
        "invoice": {
            "positions": [
                {"name": "Orange", "qty": 1, "unit": "kg", "price": 100, "status": "unknown"}
            ],
            "date": "2025-05-05",
            "supplier": "Test Supplier"
        }
    }
    
            # Мокаем user_matches
            with patch.dict('bot.user_matches', {(123, 456): {
                "parsed_data": {
                    "date": "2025-05-05",
                    "supplier": "Test Supplier"
                },
                "match_results": [
                    {"name": "Orange", "qty": 1, "unit": "kg", "price": 100, "status": "unknown"}
                ]
            }}):
                # Мокаем переменную ASSISTANT_ID, чтобы избежать ошибки assistant_not_configured
                with patch('app.assistants.client.ASSISTANT_ID', 'dummy_id'):
                    # Мокаем функцию разбора команды assistant, чтобы не зависеть от OpenAI
                    with patch('app.handlers.edit_flow.run_thread_safe') as mock_assist:
                        mock_assist.return_value = {
                            "action": "edit_name",
                            "line": 0,
                            "value": "aple"
                        }
                        # Мокаем data_loader.load_products
                        with patch('app.data_loader.load_products') as mock_load:
                            mock_load.return_value = [
                                MagicMock(name="Apple"),
                                MagicMock(name="Orange"),
                                MagicMock(name="Banana")
                            ]
    
                            # Вызываем функцию
>                           await bot.handle_free_edit_text(message, state)
E                           AttributeError: module 'bot' has no attribute 'handle_free_edit_text'

tests/test_fuzzy_confirm.py:66: AttributeError
___________________________ test_confirm_fuzzy_name ____________________________

    @pytest.mark.asyncio
    async def test_confirm_fuzzy_name():
        """Тест проверяет, что подтверждение fuzzy-совпадения корректно обрабатывается"""
    
        # Создаем мок callback
        callback = AsyncMock(spec=CallbackQuery)
        callback.data = "fuzzy:confirm:0"
        callback.from_user = MagicMock(id=123)
        callback.message = AsyncMock()
        # Используем AsyncMock для callback.answer, чтобы можно было await
        callback.answer = AsyncMock()
    
        # Создаем мок объекта состояния
        state = AsyncMock(spec=FSMContext)
        state.get_data.return_value = {
            "fuzzy_original": "aple",
            "fuzzy_match": "Apple",
            "fuzzy_line": 0,
            "fuzzy_msg_id": 456
        }
    
        # Мокаем user_matches
        with patch.dict('bot.user_matches', {(123, 456): {
            "parsed_data": {
                "date": "2025-05-05",
                "supplier": "Test Supplier"
            },
            "match_results": [
                {"name": "Orange", "qty": 1, "unit": "kg", "price": 100, "status": "unknown"}
            ]
        }}):
            # Мокаем data_loader.load_products
            with patch('app.data_loader.load_products') as mock_load:
                # Мокаем matcher.match_positions
                with patch('app.matcher.match_positions') as mock_match:
                    mock_match.return_value = [
                        {"name": "Apple", "qty": 1, "unit": "kg", "price": 100, "status": "ok", "product_id": "apple001"}
                    ]
    
                    # Мокаем add_alias
                    with patch('app.alias.add_alias') as mock_alias:
                        # Вызываем функцию
                        await bot.confirm_fuzzy_name(callback, state)
    
                        # Проверяем, что был вызван add_alias
>                       mock_alias.assert_called_once_with("aple", "apple001")

tests/test_fuzzy_confirm.py:134: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='add_alias' id='4658836384'>, args = ('aple', 'apple001')
kwargs = {}, msg = "Expected 'add_alias' to be called once. Called 0 times."

    def assert_called_once_with(self, /, *args, **kwargs):
        """assert that the mock was called exactly once and that that call was
        with the specified arguments."""
        if not self.call_count == 1:
            msg = ("Expected '%s' to be called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
>           raise AssertionError(msg)
E           AssertionError: Expected 'add_alias' to be called once. Called 0 times.

/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/unittest/mock.py:918: AssertionError
______________________________ test_start_handler ______________________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x117320970>

    @pytest.mark.asyncio
    async def test_start_handler(monkeypatch):
        called = {}
    
        class FakeMsg:
            async def answer(self, text, parse_mode=None, **kwargs):
                called["text"] = text
                called["parse_mode"] = parse_mode
    
        msg = FakeMsg()
>       bot, dp = create_bot_and_dispatcher()

tests/test_handlers.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
bot.py:86: in create_bot_and_dispatcher
    bot = Bot(token=settings.TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
venv/lib/python3.9/site-packages/aiogram/client/bot.py:266: in __init__
    validate_token(token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

token = ''

    @lru_cache()
    def validate_token(token: str) -> bool:
        """
        Validate Telegram token
    
        :param token:
        :return:
        """
        if not isinstance(token, str):
            raise TokenValidationError(
                f"Token is invalid! It must be 'str' type instead of {type(token)} type."
            )
    
        if any(x.isspace() for x in token):
            message = "Token is invalid! It can't contains spaces."
            raise TokenValidationError(message)
    
        left, sep, right = token.partition(":")
        if (not sep) or (not left.isdigit()) or (not right):
>           raise TokenValidationError("Token is invalid!")
E           aiogram.utils.token.TokenValidationError: Token is invalid!

venv/lib/python3.9/site-packages/aiogram/utils/token.py:27: TokenValidationError
______________________________ test_text_fallback ______________________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x1175af460>

    @pytest.mark.asyncio
    async def test_text_fallback(monkeypatch):
        called = {}
    
        class FakeMsg:
            async def answer(self, text, parse_mode=None, **kwargs):
                called["text"] = text
                called["parse_mode"] = parse_mode
    
        msg = FakeMsg()
>       bot, dp = create_bot_and_dispatcher()

tests/test_handlers.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
bot.py:86: in create_bot_and_dispatcher
    bot = Bot(token=settings.TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
venv/lib/python3.9/site-packages/aiogram/client/bot.py:266: in __init__
    validate_token(token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

token = ''

    @lru_cache()
    def validate_token(token: str) -> bool:
        """
        Validate Telegram token
    
        :param token:
        :return:
        """
        if not isinstance(token, str):
            raise TokenValidationError(
                f"Token is invalid! It must be 'str' type instead of {type(token)} type."
            )
    
        if any(x.isspace() for x in token):
            message = "Token is invalid! It can't contains spaces."
            raise TokenValidationError(message)
    
        left, sep, right = token.partition(":")
        if (not sep) or (not left.isdigit()) or (not right):
>           raise TokenValidationError("Token is invalid!")
E           aiogram.utils.token.TokenValidationError: Token is invalid!

venv/lib/python3.9/site-packages/aiogram/utils/token.py:27: TokenValidationError
______________________ test_cb_edit_line_state_transition ______________________

    @pytest.mark.asyncio
    async def test_cb_edit_line_state_transition():
        """Тест: cb_edit_line переводит состояние в EditFree.awaiting_input"""
        import bot
    
        # Создаем моки
        callback = AsyncMock()
        callback.from_user = MagicMock(id=123)
        callback.message = AsyncMock()
        callback.message.message_id = 456
        callback.data = "edit:free"
    
        state = AsyncMock()
    
        # Вызываем функцию
        await bot.cb_edit_line(callback, state)
    
        # Проверяем, что состояние было установлено в EditFree.awaiting_input
        state.set_state.assert_awaited_with(EditFree.awaiting_input)
    
        # Проверяем, что был вызван answer
        callback.answer.assert_awaited()
    
        # Проверяем, что был вызван message.answer с инструкцией
        callback.message.answer.assert_awaited()
    
        # Проверяем, что в state сохранен message_id
>       state.update_data.assert_awaited_with(edit_msg_id=456)

tests/test_keyboard_main_edit.py:102: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <AsyncMock name='mock.update_data' id='4658379696'>, args = ()
kwargs = {'edit_msg_id': 456}, expected = call(edit_msg_id=456)
_error_message = <function AsyncMockMixin.assert_awaited_with.<locals>._error_message at 0x11734bc10>
actual = call(invoice=<coroutine object AsyncMockMixin._execute_mock_call at 0x115c4d040>)
cause = None

    def assert_awaited_with(self, /, *args, **kwargs):
        """
        Assert that the last await was with the specified arguments.
        """
        if self.await_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            raise AssertionError(f'Expected await: {expected}\nNot awaited')
    
        def _error_message():
            msg = self._format_mock_failure_message(args, kwargs, action='await')
            return msg
    
        expected = self._call_matcher(_Call((args, kwargs), two=True))
        actual = self._call_matcher(self.await_args)
        if actual != expected:
            cause = expected if isinstance(expected, Exception) else None
>           raise AssertionError(_error_message()) from cause
E           AssertionError: expected await not found.
E           Expected: update_data(edit_msg_id=456)
E           Actual: update_data(invoice=<coroutine object AsyncMockMixin._execute_mock_call at 0x115c4d040>)

/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/unittest/mock.py:2215: AssertionError
____________________ test_latency_logging_info_and_warning _____________________

args = ('slow input', 5), kwargs = {}, trace_id = None
result = <coroutine object run_thread_safe_async at 0x115ca3a40>

    @wraps(func)
    def wrapper(*args, **kwargs):
        trace_id = get_trace_id()
        logger.info("OpenAI call: prompt", extra={"trace_id": trace_id, "data": {"args": args, "kwargs": kwargs}})
        try:
            result = func(*args, **kwargs)
>           logger.info("OpenAI call: result", extra={"trace_id": trace_id, "data": {"result": result}})

app/assistants/trace_openai.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/logging/__init__.py:1446: in info
    self._log(INFO, msg, args, **kwargs)
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/logging/__init__.py:1587: in _log
    record = self.makeRecord(self.name, level, fn, lno, msg, args,
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/logging/__init__.py:1556: in makeRecord
    rv = _logRecordFactory(name, level, fn, lno, msg, args, exc_info, func,
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/logging/__init__.py:287: in __init__
    ct = time.time()
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/unittest/mock.py:1093: in __call__
    return self._mock_call(*args, **kwargs)
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/unittest/mock.py:1097: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='time' id='4662924480'>, args = (), kwargs = {}
effect = <list_iterator object at 0x115cdddf0>

    def _execute_mock_call(self, /, *args, **kwargs):
        # separate from _increment_mock_call so that awaited functions are
        # executed separately from their call, also AsyncMock overrides this method
    
        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
                raise effect
            elif not _callable(effect):
>               result = next(effect)
E               StopIteration

/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/unittest/mock.py:1154: StopIteration

During handling of the above exception, another exception occurred:

args = ('slow input',), kwargs = {'timeout': 5}, trace_id = None

    @wraps(func)
    def wrapper(*args, **kwargs):
        trace_id = get_trace_id()
        logger.info("OpenAI call: prompt", extra={"trace_id": trace_id, "data": {"args": args, "kwargs": kwargs}})
        try:
>           result = func(*args, **kwargs)

app/assistants/trace_openai.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
app/assistants/client.py:919: in run_thread_safe
    return asyncio.run(run_thread_safe_async(user_input, timeout))
app/assistants/trace_openai.py:17: in wrapper
    logger.error("OpenAI call: exception", extra={"trace_id": trace_id, "data": {"error": str(e)}})
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/logging/__init__.py:1475: in error
    self._log(ERROR, msg, args, **kwargs)
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/logging/__init__.py:1587: in _log
    record = self.makeRecord(self.name, level, fn, lno, msg, args,
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/logging/__init__.py:1556: in makeRecord
    rv = _logRecordFactory(name, level, fn, lno, msg, args, exc_info, func,
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/logging/__init__.py:287: in __init__
    ct = time.time()
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/unittest/mock.py:1093: in __call__
    return self._mock_call(*args, **kwargs)
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/unittest/mock.py:1097: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='time' id='4662924480'>, args = (), kwargs = {}
effect = <list_iterator object at 0x115cdddf0>

    def _execute_mock_call(self, /, *args, **kwargs):
        # separate from _increment_mock_call so that awaited functions are
        # executed separately from their call, also AsyncMock overrides this method
    
        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
                raise effect
            elif not _callable(effect):
>               result = next(effect)
E               StopIteration

/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/unittest/mock.py:1154: StopIteration

During handling of the above exception, another exception occurred:

caplog = <_pytest.logging.LogCaptureFixture object at 0x115b17eb0>

    def test_latency_logging_info_and_warning(caplog):
        # Мокаем OpenAI client и Redis
        with patch.object(assistant_client, 'client') as mock_client, \
             patch('app.utils.redis_cache.cache_get', return_value=None), \
             patch('app.utils.redis_cache.cache_set'):
    
            # Мокаем создание thread, message, run
            mock_thread = MagicMock()
            mock_thread.id = 'thread-123'
            mock_client.beta.threads.create.return_value = mock_thread
            mock_message = MagicMock()
            mock_client.beta.threads.messages.create.return_value = mock_message
            mock_run = MagicMock()
            mock_run.status = 'completed'
            mock_client.beta.threads.runs.create.return_value = mock_run
            # simulate fast response
            caplog.set_level(logging.INFO)
            start = time.time()
            assistant_client.run_thread_safe('fast input', timeout=5)
            info_logs = [r for r in caplog.records if '[LATENCY]' in r.getMessage()]
            assert any('OpenAI response time' in r.getMessage() for r in info_logs)
    
            # simulate slow response
            with patch('time.time', side_effect=[start, start+11]):
                caplog.clear()
>               assistant_client.run_thread_safe('slow input', timeout=5)

tests/test_latency_logging.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
app/assistants/trace_openai.py:17: in wrapper
    logger.error("OpenAI call: exception", extra={"trace_id": trace_id, "data": {"error": str(e)}})
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/logging/__init__.py:1475: in error
    self._log(ERROR, msg, args, **kwargs)
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/logging/__init__.py:1587: in _log
    record = self.makeRecord(self.name, level, fn, lno, msg, args,
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/logging/__init__.py:1556: in makeRecord
    rv = _logRecordFactory(name, level, fn, lno, msg, args, exc_info, func,
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/logging/__init__.py:287: in __init__
    ct = time.time()
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/unittest/mock.py:1093: in __call__
    return self._mock_call(*args, **kwargs)
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/unittest/mock.py:1097: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='time' id='4662924480'>, args = (), kwargs = {}
effect = <list_iterator object at 0x115cdddf0>

    def _execute_mock_call(self, /, *args, **kwargs):
        # separate from _increment_mock_call so that awaited functions are
        # executed separately from their call, also AsyncMock overrides this method
    
        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
                raise effect
            elif not _callable(effect):
>               result = next(effect)
E               StopIteration

/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/unittest/mock.py:1154: StopIteration

The above exception was the direct cause of the following exception:

cls = <class '_pytest.runner.CallInfo'>
func = <function call_and_report.<locals>.<lambda> at 0x117451ca0>
when = 'call'
reraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)

    @classmethod
    def from_call(
        cls,
        func: Callable[[], TResult],
        when: Literal["collect", "setup", "call", "teardown"],
        reraise: type[BaseException] | tuple[type[BaseException], ...] | None = None,
    ) -> CallInfo[TResult]:
        """Call func, wrapping the result in a CallInfo.
    
        :param func:
            The function to call. Called without arguments.
        :type func: Callable[[], _pytest.runner.TResult]
        :param when:
            The phase in which the function is called.
        :param reraise:
            Exception or exceptions that shall propagate if raised by the
            function, instead of being wrapped in the CallInfo.
        """
        excinfo = None
        start = timing.time()
        precise_start = timing.perf_counter()
        try:
>           result: TResult | None = func()

venv/lib/python3.9/site-packages/_pytest/runner.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.9/site-packages/_pytest/runner.py:242: in <lambda>
    lambda: runtest_hook(item=item, **kwds), when=when, reraise=reraise
venv/lib/python3.9/site-packages/pluggy/_hooks.py:513: in __call__
    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)
venv/lib/python3.9/site-packages/pluggy/_manager.py:120: in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
venv/lib/python3.9/site-packages/_pytest/threadexception.py:92: in pytest_runtest_call
    yield from thread_exception_runtest_hook()
venv/lib/python3.9/site-packages/_pytest/threadexception.py:68: in thread_exception_runtest_hook
    yield
venv/lib/python3.9/site-packages/_pytest/unraisableexception.py:95: in pytest_runtest_call
    yield from unraisable_exception_runtest_hook()
venv/lib/python3.9/site-packages/_pytest/unraisableexception.py:70: in unraisable_exception_runtest_hook
    yield
venv/lib/python3.9/site-packages/_pytest/logging.py:846: in pytest_runtest_call
    yield from self._runtest_for(item, "call")
venv/lib/python3.9/site-packages/_pytest/logging.py:829: in _runtest_for
    yield
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=6 _state='suspended' tmpfile=<_io....xtIOWrapper name='/dev/null' mode='r' encoding='utf-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
item = <Function test_latency_logging_info_and_warning>

    @hookimpl(wrapper=True)
    def pytest_runtest_call(self, item: Item) -> Generator[None]:
        with self.item_capture("call", item):
>           return (yield)
E           RuntimeError: generator raised StopIteration

venv/lib/python3.9/site-packages/_pytest/capture.py:898: RuntimeError
----------------------------- Captured stderr call -----------------------------
2025-05-08 22:04:39,215 - app.assistants.trace_openai - INFO - OpenAI call: prompt
2025-05-08 22:04:39,215 - app.assistants.trace_openai - INFO - OpenAI call: prompt
2025-05-08 22:04:39,215 - app.assistants.trace_openai - INFO - OpenAI call: result
2025-05-08 22:04:39,215 - app.assistants.thread_pool - INFO - Created new thread outside pool: thread-123
2025-05-08 22:04:39,215 - app.assistants.client - INFO - [run_thread_safe_async] Using thread from pool: thread-123
2025-05-08 22:04:39,215 - app.assistants.client - INFO - [run_thread_safe_async] Adding user message: 'fast input'
2025-05-08 22:04:39,215 - app.assistants.client - INFO - [run_thread_safe_async] Creating run with assistant ID: asst_zkAj2P6JswgpT0Nc2bcsjeIU
2025-05-08 22:04:39,216 - app.assistants.client - INFO - assistant_latency_ms=0
2025-05-08 22:04:39,216 - app.assistants.client - INFO - [LATENCY] OpenAI response time: 0.00 sec
2025-05-08 22:04:39,216 - app.assistants.client - INFO - [run_thread_safe_async] Waiting for run completion, run ID: <MagicMock name='client.beta.threads.runs.create().id' id='4662926352'>
2025-05-08 22:04:39,216 - app.assistants.client - INFO - [run_thread_safe_async] Run completed, retrieving assistant messages
2025-05-08 22:04:39,217 - app.assistants.client - ERROR - [run_thread_safe_async] Assistant did not generate any response
2025-05-08 22:04:39,217 - app.assistants.trace_openai - INFO - OpenAI call: result
2025-05-08 22:04:39,215 - app.assistants.trace_openai - INFO - OpenAI call: prompt
2025-05-08 22:04:50,215 - app.assistants.trace_openai - INFO - OpenAI call: prompt
------------------------------ Captured log call -------------------------------
INFO     app.assistants.trace_openai:trace_openai.py:11 OpenAI call: prompt
INFO     app.assistants.trace_openai:trace_openai.py:11 OpenAI call: prompt
INFO     app.assistants.trace_openai:trace_openai.py:14 OpenAI call: result
INFO     app.assistants.thread_pool:thread_pool.py:73 Created new thread outside pool: thread-123
INFO     app.assistants.client:client.py:523 [run_thread_safe_async] Using thread from pool: thread-123
INFO     app.assistants.client:client.py:536 [run_thread_safe_async] Adding user message: 'fast input'
INFO     app.assistants.client:client.py:555 [run_thread_safe_async] Creating run with assistant ID: asst_zkAj2P6JswgpT0Nc2bcsjeIU
INFO     app.assistants.client:client.py:577 assistant_latency_ms=0
INFO     app.assistants.client:client.py:581 [LATENCY] OpenAI response time: 0.00 sec
INFO     app.assistants.client:client.py:584 [run_thread_safe_async] Waiting for run completion, run ID: <MagicMock name='client.beta.threads.runs.create().id' id='4662926352'>
INFO     app.assistants.client:client.py:775 [run_thread_safe_async] Run completed, retrieving assistant messages
ERROR    app.assistants.client:client.py:797 [run_thread_safe_async] Assistant did not generate any response
INFO     app.assistants.trace_openai:trace_openai.py:14 OpenAI call: result
INFO     app.assistants.trace_openai:trace_openai.py:11 OpenAI call: prompt
INFO     app.assistants.trace_openai:trace_openai.py:11 OpenAI call: prompt
_________________________ test_monitor_triggers_alert __________________________

caplog = <_pytest.logging.LogCaptureFixture object at 0x115e32b20>

    def test_monitor_triggers_alert(caplog):
        caplog.set_level(logging.ERROR)
        # Сгенерировать 5 ошибок подряд (без поля 'action')
        bad_json = '{"foo": "bar"}'
        for _ in range(5):
            result = parse_assistant_output(bad_json)
            assert result[0].action == "clarification_needed"
        # Проверить, что ALERT сработал
        alerts = [r for r in caplog.records if '[ALERT]' in r.getMessage()]
>       assert alerts, 'ALERT не сработал при 5 ошибках'
E       AssertionError: ALERT не сработал при 5 ошибках
E       assert []

tests/test_monitor.py:23: AssertionError
----------------------------- Captured stderr call -----------------------------
2025-05-08 22:04:39,491 - app.assistants.client - INFO - [parse_assistant_output] Начало разбора ассистент-ответа
2025-05-08 22:04:39,491 - app.assistants.client - INFO - [parse_assistant_output] JSON успешно разобран
2025-05-08 22:04:39,491 - app.assistants.client - WARNING - Assistant output: ни 'action', ни 'actions' не найдено, требуется уточнение
2025-05-08 22:04:39,491 - app.assistants.client - INFO - [parse_assistant_output] Начало разбора ассистент-ответа
2025-05-08 22:04:39,491 - app.assistants.client - INFO - [parse_assistant_output] JSON успешно разобран
2025-05-08 22:04:39,491 - app.assistants.client - WARNING - Assistant output: ни 'action', ни 'actions' не найдено, требуется уточнение
2025-05-08 22:04:39,491 - app.assistants.client - INFO - [parse_assistant_output] Начало разбора ассистент-ответа
2025-05-08 22:04:39,491 - app.assistants.client - INFO - [parse_assistant_output] JSON успешно разобран
2025-05-08 22:04:39,491 - app.assistants.client - WARNING - Assistant output: ни 'action', ни 'actions' не найдено, требуется уточнение
2025-05-08 22:04:39,491 - app.assistants.client - INFO - [parse_assistant_output] Начало разбора ассистент-ответа
2025-05-08 22:04:39,491 - app.assistants.client - INFO - [parse_assistant_output] JSON успешно разобран
2025-05-08 22:04:39,491 - app.assistants.client - WARNING - Assistant output: ни 'action', ни 'actions' не найдено, требуется уточнение
2025-05-08 22:04:39,491 - app.assistants.client - INFO - [parse_assistant_output] Начало разбора ассистент-ответа
2025-05-08 22:04:39,491 - app.assistants.client - INFO - [parse_assistant_output] JSON успешно разобран
2025-05-08 22:04:39,492 - app.assistants.client - WARNING - Assistant output: ни 'action', ни 'actions' не найдено, требуется уточнение
------------------------------ Captured log call -------------------------------
INFO     app.assistants.client:client.py:332 [parse_assistant_output] Начало разбора ассистент-ответа
INFO     app.assistants.client:client.py:335 [parse_assistant_output] JSON успешно разобран
WARNING  app.assistants.client:client.py:356 Assistant output: ни 'action', ни 'actions' не найдено, требуется уточнение
INFO     app.assistants.client:client.py:332 [parse_assistant_output] Начало разбора ассистент-ответа
INFO     app.assistants.client:client.py:335 [parse_assistant_output] JSON успешно разобран
WARNING  app.assistants.client:client.py:356 Assistant output: ни 'action', ни 'actions' не найдено, требуется уточнение
INFO     app.assistants.client:client.py:332 [parse_assistant_output] Начало разбора ассистент-ответа
INFO     app.assistants.client:client.py:335 [parse_assistant_output] JSON успешно разобран
WARNING  app.assistants.client:client.py:356 Assistant output: ни 'action', ни 'actions' не найдено, требуется уточнение
INFO     app.assistants.client:client.py:332 [parse_assistant_output] Начало разбора ассистент-ответа
INFO     app.assistants.client:client.py:335 [parse_assistant_output] JSON успешно разобран
WARNING  app.assistants.client:client.py:356 Assistant output: ни 'action', ни 'actions' не найдено, требуется уточнение
INFO     app.assistants.client:client.py:332 [parse_assistant_output] Начало разбора ассистент-ответа
INFO     app.assistants.client:client.py:335 [parse_assistant_output] JSON успешно разобран
WARNING  app.assistants.client:client.py:356 Assistant output: ни 'action', ни 'actions' не найдено, требуется уточнение
____________________________ test_direct_vision_api ____________________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x117334850>

    def test_direct_vision_api(monkeypatch):
        # Мокаем ответ от Vision API с правильным JSON
        json_data = {
            "supplier": "Test Supplier",
            "date": "2025-01-01",
            "positions": [
                {
                    "name": "Kacang",
                    "qty": 1,
                    "unit": "gr",
                    "price": 10000,
                    "total_price": 10000
                }
            ],
            "total_price": 10000
        }
    
        # Создаем моки для OpenAI клиента
        function_call = DummyFunctionCall(name="get_parsed_invoice", arguments=json.dumps(json_data))
        tool_call = DummyToolCall(function=function_call)
        dummy_message = DummyMessage(tool_calls=[tool_call])
        dummy_choice = DummyChoice(dummy_message)
        dummy_response = DummyResponse([dummy_choice])
    
        completions_create = MagicMock(return_value=dummy_response)
        chat = MagicMock()
        chat.completions.create = completions_create
    
        # Создаем мок клиента OpenAI
        client = MagicMock()
        client.chat = chat
    
        # Подменяем функцию получения клиента
        monkeypatch.setattr("app.ocr.get_ocr_client", lambda: client)
    
        # Мокаем остальные зависимости
        monkeypatch.setattr("app.ocr.time", type("T", (), {"time": lambda *a, **kw: 0})())
        monkeypatch.setattr(
            "app.ocr.base64", type("B", (), {"b64encode": lambda *a, **kw: b"xx", "decode": lambda *a, **kw: "xx"})()
        )
    
        # Запускаем тестируемую функцию
        res = call_openai_ocr(b"123")
    
        # Проверяем, что chat.completions.create вызван с правильными параметрами
        completions_create.assert_called_once()
        call_args = completions_create.call_args[1]
        assert call_args["model"] == "gpt-4o"
>       assert call_args["max_tokens"] == 2048
E       assert 4096 == 2048

tests/test_ocr.py:88: AssertionError
----------------------------- Captured stderr call -----------------------------
2025-05-08 22:04:39,547 - nota.indonesia - INFO - [ocr_0] Performance: operation='openai_vision_api_call', duration=0.02ms
2025-05-08 22:04:39,547 - nota.indonesia - INFO - [ocr_0] Indonesian invoice: phase=ocr_result, supplier='Test Supplier', date=2025-01-01, positions=1
2025-05-08 22:04:39,550 - root - INFO - postprocess_parsed_data: загружено 605 продуктов
2025-05-08 22:04:39,550 - root - INFO - Первые 5 продуктов: ["Rounding in guest's favor", "Rounding of unit price in guest's favor", 'service', 'TAX', 'Almond milk iced']
2025-05-08 22:04:39,550 - root - INFO - Автокоррекция названия: 'Kacang'
2025-05-08 22:04:39,550 - root - DEBUG - autocorrect_name: проверяем 'Kacang' среди 605 допустимых названий
2025-05-08 22:04:39,550 - root - DEBUG - autocorrect_name: 'Kacang' -> 'Kacang' (расстояние=3)
2025-05-08 22:04:39,550 - root - INFO - Результат автокоррекции: 'Kacang'
2025-05-08 22:04:39,550 - nota.indonesia - INFO - [unknown] Indonesian invoice: phase=postprocessing, supplier='Test Supplier', date=2025-01-01, positions=1
2025-05-08 22:04:39,550 - root - INFO - OCR successful after 0.0s with 1 positions
------------------------------ Captured log call -------------------------------
INFO     nota.indonesia:enhanced_logger.py:41 [ocr_0] Performance: operation='openai_vision_api_call', duration=0.02ms
INFO     nota.indonesia:enhanced_logger.py:16 [ocr_0] Indonesian invoice: phase=ocr_result, supplier='Test Supplier', date=2025-01-01, positions=1
INFO     root:postprocessing.py:96 postprocess_parsed_data: загружено 605 продуктов
INFO     root:postprocessing.py:97 Первые 5 продуктов: ["Rounding in guest's favor", "Rounding of unit price in guest's favor", 'service', 'TAX', 'Almond milk iced']
INFO     root:postprocessing.py:104 Автокоррекция названия: 'Kacang'
DEBUG    root:postprocessing.py:77 autocorrect_name: проверяем 'Kacang' среди 605 допустимых названий
DEBUG    root:postprocessing.py:87 autocorrect_name: 'Kacang' -> 'Kacang' (расстояние=3)
INFO     root:postprocessing.py:107 Результат автокоррекции: 'Kacang'
INFO     nota.indonesia:enhanced_logger.py:16 [unknown] Indonesian invoice: phase=postprocessing, supplier='Test Supplier', date=2025-01-01, positions=1
INFO     root:ocr.py:204 OCR successful after 0.0s with 1 positions
__________________________ test_openai_function_call ___________________________

image_bytes = b'\xff\xd8\xff\xe0\x00\x10JFIF\x00\x01\x01\x00\x00H\x00H\x00\x00\xff\xe1\x01|Exif\x00\x00MM\x00*\x00\x00\x00\x08\x00\x...fez~\x82\x8f\xed;\xdf\xf9\xe9\xfa\n\xa1E\x00_\xfe\xd3\xbd\xff\x00\x9e\x9f\xa0\xa3\xfbN\xf7\xfez~\x82\xa8Q@\x1f\xff\xd9'
_req_id = None

    @log_ocr_call
    @with_retry_backoff(max_retries=1, initial_backoff=0.5, backoff_factor=2.0)
    def call_openai_ocr(image_bytes: bytes, _req_id=None) -> ParsedData:
        """
        Прямой вызов OpenAI Vision API (gpt-4o) для распознавания инвойса с использованием function calling.
        Args:
            image_bytes: Байты изображения для обработки
            _req_id: Идентификатор запроса для логирования
        Returns:
            ParsedData: Структурированные данные инвойса
        Raises:
            RuntimeError: При ошибках API или парсинга данных
        """
        client = get_ocr_client()
        if not client:
            logging.error("OCR unavailable: no OpenAI OCR client")
            raise RuntimeError("OCR unavailable: Please check your OPENAI_OCR_KEY")
    
        t0 = time.time()
        req_id = _req_id or f"ocr_{int(t0)}"
        ocr_logger.info(f"[{req_id}] Начинаю OCR-обработку изображения размером {len(image_bytes)} байт (Vision API)")
    
        # Мониторинг памяти
        try:
            memory_monitor = create_memory_monitor()(req_id)
            memory_monitor.start()
            ocr_logger.debug(f"[{req_id}] Запущен мониторинг памяти")
        except Exception as mon_err:
            ocr_logger.warning(f"[{req_id}] Не удалось запустить мониторинг памяти: {str(mon_err)}")
    
        t_step = log_ocr_performance(t0, "Initialization", req_id)
        prompt = build_prompt()
    
        # --- Автоматическая оптимизация изображения ---
        # if IMG_PREP_AVAILABLE:
        #     try:
        #         # Сохраняем изображение во временный файл
        #         tmp_path = f"/tmp/nota_ocr_{req_id}.jpg"
        #         with open(tmp_path, "wb") as f:
        #             f.write(image_bytes)
        #         image_bytes = prepare_for_ocr(tmp_path, use_preprocessing=True)
        #         ocr_logger.info(f"[{req_id}] Изображение оптимизировано для Vision API, размер: {len(image_bytes)} байт")
        #     except Exception as prep_err:
        #         ocr_logger.warning(f"[{req_id}] Ошибка оптимизации изображения: {prep_err}. Использую оригинал.")
    
        # Просто используем image_bytes как есть, без изменений
    
        # Формируем base64 изображение
        b64_image = base64.b64encode(image_bytes).decode("utf-8")
        messages = [
            {"role": "system", "content": prompt},
            {
                "role": "user",
                "content": [
                    {"type": "text", "text": "Распознай только товары, которые явно видны на накладной. Никогда не добавляй товары, которых нет на изображении. Не галлюцинируй! Я предпочту получить меньше позиций, но точно распознанных, чем много случайных."},
                    {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{b64_image}", "detail": "high"}}
                ]
            }
        ]
    
        try:
            ocr_logger.info(f"[{req_id}] Отправляю запрос в gpt-4o с использованием function calling")
            with PerformanceTimer(req_id, "openai_vision_api_call"):
>               response = client.chat.completions.create(
                    model="gpt-4o",
                    messages=messages,
                    max_tokens=4096,
                    temperature=0.0,
                    tools=[{"type": "function", "function": INVOICE_FUNCTION_SCHEMA}],
                    tool_choice={"type": "function", "function": {"name": "get_parsed_invoice"}},
                    timeout=120
                )
E               AttributeError: 'DummyClient' object has no attribute 'chat'

app/ocr.py:155: AttributeError

During handling of the above exception, another exception occurred:

args = (b'\xff\xd8\xff\xe0\x00\x10JFIF\x00\x01\x01\x00\x00H\x00H\x00\x00\xff\xe1\x01|Exif\x00\x00MM\x00*\x00\x00\x00\x08\x00\...z~\x82\x8f\xed;\xdf\xf9\xe9\xfa\n\xa1E\x00_\xfe\xd3\xbd\xff\x00\x9e\x9f\xa0\xa3\xfbN\xf7\xfez~\x82\xa8Q@\x1f\xff\xd9',)
kwargs = {}, req_id = 'e200b82f', logger = <MagicMock id='4659072496'>
retries = 1
last_error = RuntimeError("Unexpected error: 'DummyClient' object has no attribute 'chat'")
error_class = 'unknown'
friendly_msg = 'Неизвестная ошибка. Пожалуйста, попробуйте еще раз.'
traceback = <module 'traceback' from '/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/traceback.py'>

    @functools.wraps(func)
    def wrapper(*args, **kwargs) -> T:
        # Генерируем ID запроса для логирования
        req_id = kwargs.pop("_req_id", uuid.uuid4().hex[:8])
        logger = logging.getLogger(func.__module__)
    
        retries = 0
        last_error = None
    
        while retries <= max_retries:
            try:
                if retries > 0:
                    logger.info(
                        f"[{req_id}] Retry {retries}/{max_retries} for {func.__name__}"
                    )
    
>               return func(*args, **kwargs)

app/utils/api_decorators.py:211: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image_bytes = b'\xff\xd8\xff\xe0\x00\x10JFIF\x00\x01\x01\x00\x00H\x00H\x00\x00\xff\xe1\x01|Exif\x00\x00MM\x00*\x00\x00\x00\x08\x00\x...fez~\x82\x8f\xed;\xdf\xf9\xe9\xfa\n\xa1E\x00_\xfe\xd3\xbd\xff\x00\x9e\x9f\xa0\xa3\xfbN\xf7\xfez~\x82\xa8Q@\x1f\xff\xd9'
_req_id = None

    @log_ocr_call
    @with_retry_backoff(max_retries=1, initial_backoff=0.5, backoff_factor=2.0)
    def call_openai_ocr(image_bytes: bytes, _req_id=None) -> ParsedData:
        """
        Прямой вызов OpenAI Vision API (gpt-4o) для распознавания инвойса с использованием function calling.
        Args:
            image_bytes: Байты изображения для обработки
            _req_id: Идентификатор запроса для логирования
        Returns:
            ParsedData: Структурированные данные инвойса
        Raises:
            RuntimeError: При ошибках API или парсинга данных
        """
        client = get_ocr_client()
        if not client:
            logging.error("OCR unavailable: no OpenAI OCR client")
            raise RuntimeError("OCR unavailable: Please check your OPENAI_OCR_KEY")
    
        t0 = time.time()
        req_id = _req_id or f"ocr_{int(t0)}"
        ocr_logger.info(f"[{req_id}] Начинаю OCR-обработку изображения размером {len(image_bytes)} байт (Vision API)")
    
        # Мониторинг памяти
        try:
            memory_monitor = create_memory_monitor()(req_id)
            memory_monitor.start()
            ocr_logger.debug(f"[{req_id}] Запущен мониторинг памяти")
        except Exception as mon_err:
            ocr_logger.warning(f"[{req_id}] Не удалось запустить мониторинг памяти: {str(mon_err)}")
    
        t_step = log_ocr_performance(t0, "Initialization", req_id)
        prompt = build_prompt()
    
        # --- Автоматическая оптимизация изображения ---
        # if IMG_PREP_AVAILABLE:
        #     try:
        #         # Сохраняем изображение во временный файл
        #         tmp_path = f"/tmp/nota_ocr_{req_id}.jpg"
        #         with open(tmp_path, "wb") as f:
        #             f.write(image_bytes)
        #         image_bytes = prepare_for_ocr(tmp_path, use_preprocessing=True)
        #         ocr_logger.info(f"[{req_id}] Изображение оптимизировано для Vision API, размер: {len(image_bytes)} байт")
        #     except Exception as prep_err:
        #         ocr_logger.warning(f"[{req_id}] Ошибка оптимизации изображения: {prep_err}. Использую оригинал.")
    
        # Просто используем image_bytes как есть, без изменений
    
        # Формируем base64 изображение
        b64_image = base64.b64encode(image_bytes).decode("utf-8")
        messages = [
            {"role": "system", "content": prompt},
            {
                "role": "user",
                "content": [
                    {"type": "text", "text": "Распознай только товары, которые явно видны на накладной. Никогда не добавляй товары, которых нет на изображении. Не галлюцинируй! Я предпочту получить меньше позиций, но точно распознанных, чем много случайных."},
                    {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{b64_image}", "detail": "high"}}
                ]
            }
        ]
    
        try:
            ocr_logger.info(f"[{req_id}] Отправляю запрос в gpt-4o с использованием function calling")
            with PerformanceTimer(req_id, "openai_vision_api_call"):
                response = client.chat.completions.create(
                    model="gpt-4o",
                    messages=messages,
                    max_tokens=4096,
                    temperature=0.0,
                    tools=[{"type": "function", "function": INVOICE_FUNCTION_SCHEMA}],
                    tool_choice={"type": "function", "function": {"name": "get_parsed_invoice"}},
                    timeout=120
                )
            t_step = log_ocr_performance(t_step, "Vision API call", req_id)
            ocr_logger.info(f"[{req_id}] Получен ответ от Vision API")
            # Логируем полный ответ Vision API
            try:
                import json as _json
                ocr_logger.debug(f"[{req_id}] RAW Vision API response: {_json.dumps(response.model_dump() if hasattr(response, 'model_dump') else str(response), ensure_ascii=False)[:2000]}")
            except Exception as log_raw_err:
                ocr_logger.warning(f"[{req_id}] Не удалось залогировать сырой ответ Vision API: {log_raw_err}")
    
            # Извлекаем данные из ответа с function calling
            function_call = response.choices[0].message.tool_calls[0]
            if function_call.function.name != "get_parsed_invoice":
                raise RuntimeError(f"Неожиданное имя функции в ответе: {function_call.function.name}")
    
            # Извлекаем аргументы функции (JSON с данными инвойса)
            try:
                data = json.loads(function_call.function.arguments)
                ocr_logger.debug(f"[{req_id}] Получены структурированные данные через function calling")
                # Логируем результат для индонезийских накладных
                log_indonesian_invoice(req_id, data, phase="ocr_result")
            except Exception as e:
                raise RuntimeError(f"Не удалось распарсить JSON из аргументов функции: {e}")
    
            # Постобработка данных
            for p in data.get("positions", []):
                p["price"] = clean_num(p.get("price"))
                p["price_per_unit"] = clean_num(p.get("price_per_unit"))
                p["total_price"] = clean_num(p.get("total_price"))
            data["price"] = clean_num(data.get("price"))
            data["price_per_unit"] = clean_num(data.get("price_per_unit"))
            data["total_price"] = clean_num(data.get("total_price"))
            supplier = data.get("supplier")
            if supplier and supplier.strip() in settings.OWN_COMPANY_ALIASES:
                data["supplier"] = None
                data["supplier_status"] = "unknown"
    
            try:
                parsed_data = ParsedData.model_validate(data)
                parsed_data = postprocess_parsed_data(parsed_data)
                elapsed = time.time() - t0
                logging.info(f"OCR successful after {elapsed:.1f}s with {len(parsed_data.positions)} positions")
                t_step = log_ocr_performance(t_step, "Validation completed", req_id)
                ocr_logger.info(f"[{req_id}] OCR успешно завершен за {elapsed:.2f} сек, найдено {len(parsed_data.positions)} позиций")
                return parsed_data
            except Exception as validation_err:
                logging.error(f"Model validation error: {validation_err}")
                raise RuntimeError(f"⚠️ Could not process the invoice data: {str(validation_err)}") from validation_err
    
        except openai.APITimeoutError:
            elapsed = time.time() - t0
            ocr_logger.error(f"[{req_id}] OpenAI API timeout after {elapsed:.1f}s")
            raise RuntimeError("OCR processing timed out. Please try with a clearer image.")
        except openai.APIError as api_err:
            elapsed = time.time() - t0
            ocr_logger.error(f"[{req_id}] OpenAI API error after {elapsed:.1f}s: {str(api_err)}")
            raise RuntimeError(f"OpenAI API error: {str(api_err)}")
        except Exception as e:
            elapsed = time.time() - t0
            ocr_logger.error(f"[{req_id}] Unexpected error after {elapsed:.1f}s: {str(e)}")
>           raise RuntimeError(f"Unexpected error: {str(e)}")
E           RuntimeError: Unexpected error: 'DummyClient' object has no attribute 'chat'

app/ocr.py:223: RuntimeError

The above exception was the direct cause of the following exception:

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x115a9fc40>

    @pytest.mark.asyncio
    async def test_openai_function_call(monkeypatch):
        # Patch API key and model for test
        monkeypatch.setattr("app.config.settings.OPENAI_API_KEY", "sk-test-123")
        monkeypatch.setattr("app.config.settings.OPENAI_MODEL", "gpt-4o")
        monkeypatch.setattr(
            "app.ocr.settings",
            type("S", (), {
                "OPENAI_API_KEY": "sk-test-123",
                "OPENAI_MODEL": "gpt-4o",
                "OPENAI_VISION_ASSISTANT_ID": "test-assistant-id"
            })(),
        )
        # Prepare a valid mock OpenAI response (sync mocks for run_in_executor)
        from unittest.mock import MagicMock
        thread = MagicMock()
        thread.id = "thread-id"
        run = MagicMock()
        run.id = "run-id"
        run_status = MagicMock()
        run_status.status = 'completed'
        message = MagicMock()
        message.role = "assistant"
        message.content = [type("C", (), {"type": "text", "text": '{"supplier": "Test Supplier", "positions": [{"name": "Tuna loin", "qty": 1, "unit": "kg", "price": 100.0}]}'})()]
        messages = MagicMock()
        messages.data = [message]
    
        # Мокаем клиент и все нужные методы
        class DummyThreads:
            def create(self):
                return thread
            class messages:
                @staticmethod
                def create(**kwargs):
                    return None
                @staticmethod
                def list(**kwargs):
                    return messages
            class runs:
                @staticmethod
                def create(**kwargs):
                    return run
                @staticmethod
                def retrieve(**kwargs):
                    return run_status
                @staticmethod
                def cancel(**kwargs):
                    return None
        class DummyBeta:
            threads = DummyThreads()
        class DummyClient:
            beta = DummyBeta()
        monkeypatch.setattr("app.ocr.get_ocr_client", lambda: DummyClient())
    
        with open(SAMPLE_IMAGE, "rb") as f:
            img_bytes = f.read()
        with vcr.use_cassette(CASSETTE_PATH):
>           parsed = await ocr.call_openai_ocr(img_bytes)

tests/test_ocr_function_call.py:68: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
app/utils/debug_logger.py:69: in wrapper
    result = func(image_bytes, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (b'\xff\xd8\xff\xe0\x00\x10JFIF\x00\x01\x01\x00\x00H\x00H\x00\x00\xff\xe1\x01|Exif\x00\x00MM\x00*\x00\x00\x00\x08\x00\...z~\x82\x8f\xed;\xdf\xf9\xe9\xfa\n\xa1E\x00_\xfe\xd3\xbd\xff\x00\x9e\x9f\xa0\xa3\xfbN\xf7\xfez~\x82\xa8Q@\x1f\xff\xd9',)
kwargs = {}, req_id = 'e200b82f', logger = <MagicMock id='4659072496'>
retries = 1
last_error = RuntimeError("Unexpected error: 'DummyClient' object has no attribute 'chat'")
error_class = 'unknown'
friendly_msg = 'Неизвестная ошибка. Пожалуйста, попробуйте еще раз.'
traceback = <module 'traceback' from '/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/traceback.py'>

    @functools.wraps(func)
    def wrapper(*args, **kwargs) -> T:
        # Генерируем ID запроса для логирования
        req_id = kwargs.pop("_req_id", uuid.uuid4().hex[:8])
        logger = logging.getLogger(func.__module__)
    
        retries = 0
        last_error = None
    
        while retries <= max_retries:
            try:
                if retries > 0:
                    logger.info(
                        f"[{req_id}] Retry {retries}/{max_retries} for {func.__name__}"
                    )
    
                return func(*args, **kwargs)
    
            except Exception as e:
                error_class, friendly_msg = classify_error(e)
    
                # Улучшенное логирование для отладки - показываем всю цепочку ошибок
                logger.error(f"[{req_id}] Exception: {e.__class__.__name__}: {str(e)}")
                if hasattr(e, '__cause__') and e.__cause__:
                    cause = e.__cause__
                    logger.error(f"[{req_id}] Caused by: {cause.__class__.__name__}: {str(cause)}")
                    if hasattr(cause, '__cause__') and cause.__cause__:
                        root = cause.__cause__
                        logger.error(f"[{req_id}] Root cause: {root.__class__.__name__}: {str(root)}")
    
                # Детальный стектрейс
                import traceback
                logger.error(f"[{req_id}] Full stacktrace:\n{traceback.format_exc()}")
    
                # Проверяем, нужно ли повторить попытку для этого типа ошибок
                # Ошибки валидации никогда не повторяем
                if error_class == ErrorType.VALIDATION or isinstance(e, ValueError):
                    logger.info(f"[{req_id}] Not retrying validation error: {str(e)}")
                    last_error = e
                    break
    
                if error_types and error_class not in error_types:
                    if retries > 0:
                        logger.info(
                            f"[{req_id}] Not retrying {error_class} error (not in retry types)"
                        )
                    raise
    
                # Рассчитываем backoff
                current_backoff = initial_backoff * (backoff_factor ** retries)
    
                # Проверяем, нужно ли повторять попытку
                if retries < max_retries:
                    logger.warning(
                        f"[{req_id}] {error_class} error in {func.__name__}: {str(e)}. "
                        f"Retrying in {current_backoff:.1f}s ({retries+1}/{max_retries})"
                    )
                    time.sleep(current_backoff)
                    retries += 1
                    last_error = e
                else:
                    if retries > 0:
                        logger.error(
                            f"[{req_id}] {error_class} error in {func.__name__} after {retries} retries: {str(e)}"
                        )
                    last_error = e
                    break
    
        if last_error:
            error_class, friendly_msg = classify_error(last_error)
>           raise RuntimeError(
                f"API error ({error_class}): {friendly_msg}"
            ) from last_error
E           RuntimeError: API error (unknown): Неизвестная ошибка. Пожалуйста, попробуйте еще раз.

app/utils/api_decorators.py:265: RuntimeError
----------------------------- Captured stderr call -----------------------------
2025-05-08 22:04:39,600 - vcr.cassette - INFO - <function VCR._build_before_record_request.<locals>.before_record_request at 0x117795670>
2025-05-08 22:04:39,603 - vcr.cassette - DEBUG - Entering context for cassette at /Users/Denis/notav3 cursor /Nota-v3-/tests/vcr_cassettes/ocr_function_call.yaml.
2025-05-08 22:04:39,604 - nota.indonesia - INFO - [ocr_1746713079] Performance: operation='openai_vision_api_call', duration=0.00ms
2025-05-08 22:04:40,110 - nota.indonesia - INFO - [ocr_1746713080] Performance: operation='openai_vision_api_call', duration=0.00ms
2025-05-08 22:04:40,114 - vcr.cassette - DEBUG - Exiting context for cassette at /Users/Denis/notav3 cursor /Nota-v3-/tests/vcr_cassettes/ocr_function_call.yaml.
------------------------------ Captured log call -------------------------------
INFO     vcr.cassette:cassette.py:186 <function VCR._build_before_record_request.<locals>.before_record_request at 0x117795670>
DEBUG    vcr.cassette:cassette.py:61 Entering context for cassette at /Users/Denis/notav3 cursor /Nota-v3-/tests/vcr_cassettes/ocr_function_call.yaml.
INFO     nota.indonesia:enhanced_logger.py:41 [ocr_1746713079] Performance: operation='openai_vision_api_call', duration=0.00ms
INFO     nota.indonesia:enhanced_logger.py:41 [ocr_1746713080] Performance: operation='openai_vision_api_call', duration=0.00ms
DEBUG    vcr.cassette:cassette.py:63 Exiting context for cassette at /Users/Denis/notav3 cursor /Nota-v3-/tests/vcr_cassettes/ocr_function_call.yaml.
____________ test_parse_commands_en[total amount 9999.50-expected3] ____________

user_input = 'total amount 9999.50'
expected = [{'action': 'set_total', 'total': 9999.5}]

    @pytest.mark.parametrize("user_input,expected", [
        # Supplier modification
        ("supplier Acme Corp", [{"action": "set_supplier", "supplier": "Acme Corp"}]),
        ("change supplier to Smith LLC", [{"action": "set_supplier", "supplier": "Smith LLC"}]),
        # Total amount adjustment
        ("total 12345", [{"action": "set_total", "total": 12345.0}]),
        ("total amount 9999.50", [{"action": "set_total", "total": 9999.50}]),
        ("итого 7777.77", [{"action": "set_total", "total": 7777.77}]),  # mixed input
        # Line item name editing
        ("row 2 name Milk", [{"action": "set_name", "line": 1, "name": "Milk"}]),
        ("change name in row 3 to Bread", [{"action": "set_name", "line": 2, "name": "Bread"}]),
        # Line item quantity editing
        ("row 1 qty 5", [{"action": "set_qty", "line": 0, "qty": 5.0}]),
        ("change qty in row 2 to 2.5", [{"action": "set_qty", "line": 1, "qty": 2.5}]),
        ("row 1 qty 1.5", [{"action": "set_qty", "line": 0, "qty": 1.5}]),
        ("row 1 qty 2,75", [{"action": "set_qty", "line": 0, "qty": 2.75}]),
    ])
    def test_parse_commands_en(user_input, expected):
        result = parse_edit_command(user_input)
        for res, exp in zip(result, expected):
            for key, val in exp.items():
>               assert res[key] == val
E               AssertionError: assert 'unknown' == 'set_total'
E                 
E                 - set_total
E                 + unknown

tests/test_parse_commands_en.py:25: AssertionError
_________________ test_edit_message_text_safe_parse_mode_html __________________

    @pytest.mark.asyncio
    async def test_edit_message_text_safe_parse_mode_html():
        bot = AsyncMock()
        chat_id = 123
        msg_id = 456
        text = '<b>Supplier:</b> Guna<br>'
        kb = None
    
        await edit_message_text_safe(bot, chat_id, msg_id, text, kb)
    
        # Проверяем, что edit_message_text вызван с parse_mode='HTML'
        bot.edit_message_text.assert_awaited_with(
            chat_id=chat_id,
            message_id=msg_id,
            text=text,
            reply_markup=kb,
            parse_mode='HTML',
        )
    
        # Проверяем отсутствие "сырых" HTML-тегов или их обрывков в отправляемом тексте
        sent_args = bot.edit_message_text.await_args.kwargs
        sent_text = sent_args['text']
        # Не должно быть обрывков вида 'bSupplier', '/b', '&lt;b&gt;', '&lt;/b&gt;', '&lt;br&gt;'
>       assert not any(
            pattern in sent_text
            for pattern in [
                "bSupplier", "/b", "&lt;b&gt;", "&lt;/b&gt;", "&lt;br&gt;"
            ]
        ), f"Message contains unformatted HTML: {sent_text}"
E       AssertionError: Message contains unformatted HTML: <b>Supplier:</b> Guna<br>
E       assert not True
E        +  where True = any(<generator object test_edit_message_text_safe_parse_mode_html.<locals>.<genexpr> at 0x1175bf350>)

tests/test_parse_mode.py:28: AssertionError
----------------------------- Captured stderr call -----------------------------
2025-05-08 22:04:40,184 - nota.bot_utils - DEBUG - OUT >>> <b>Supplier:</b> Guna<br>
------------------------------ Captured log call -------------------------------
DEBUG    nota.bot_utils:bot_utils.py:32 OUT >>> <b>Supplier:</b> Guna<br>
_________________________ test_cache_set_and_get_mock __________________________

    def test_cache_set_and_get_mock():
        with patch('app.utils.redis_cache.redis.Redis.from_url') as mock_from_url:
            mock_instance = MagicMock()
            mock_from_url.return_value = mock_instance
            key = "test:key"
            value = {"a": 1, "b": [2, 3], "c": "str"}
            redis_cache.cache_set(key, value, ex=2)
>           mock_instance.set.assert_called_once_with(key, json.dumps(value), ex=2)

tests/test_redis_cache.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='from_url().set' id='4687138880'>
args = ('test:key', '{"a": 1, "b": [2, 3], "c": "str"}'), kwargs = {'ex': 2}
msg = "Expected 'set' to be called once. Called 0 times."

    def assert_called_once_with(self, /, *args, **kwargs):
        """assert that the mock was called exactly once and that that call was
        with the specified arguments."""
        if not self.call_count == 1:
            msg = ("Expected '%s' to be called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
>           raise AssertionError(msg)
E           AssertionError: Expected 'set' to be called once. Called 0 times.

/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/unittest/mock.py:918: AssertionError
__________________________ test_cache_overwrite_mock ___________________________

    def test_cache_overwrite_mock():
        with patch('app.utils.redis_cache.redis.Redis.from_url') as mock_from_url:
            mock_instance = MagicMock()
            mock_from_url.return_value = mock_instance
            key = "test:key2"
            value1 = {"foo": 123}
            value2 = {"foo": 456}
            redis_cache.cache_set(key, value1, ex=5)
>           mock_instance.set.assert_called_with(key, json.dumps(value1), ex=5)

tests/test_redis_cache.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='from_url().set' id='4688594832'>
args = ('test:key2', '{"foo": 123}'), kwargs = {'ex': 5}
expected = 'set(\'test:key2\', \'{"foo": 123}\', ex=5)', actual = 'not called.'
error_message = 'expected call not found.\nExpected: set(\'test:key2\', \'{"foo": 123}\', ex=5)\nActual: not called.'

    def assert_called_with(self, /, *args, **kwargs):
        """assert that the last call was made with the specified arguments.
    
        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            actual = 'not called.'
            error_message = ('expected call not found.\nExpected: %s\nActual: %s'
                    % (expected, actual))
>           raise AssertionError(error_message)
E           AssertionError: expected call not found.
E           Expected: set('test:key2', '{"foo": 123}', ex=5)
E           Actual: not called.

/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/unittest/mock.py:898: AssertionError
________________________ test_progress_edit_single_msg _________________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x117757a90>

    @pytest.mark.asyncio
    async def test_progress_edit_single_msg(monkeypatch):
        """
        Проверяет, что весь UX (progress, отчёт, inline-редактирование) происходит в одном message_id.
        """
>       bot, dp = create_bot_and_dispatcher()

tests/test_single_message_ux.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
bot.py:86: in create_bot_and_dispatcher
    bot = Bot(token=settings.TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
venv/lib/python3.9/site-packages/aiogram/client/bot.py:266: in __init__
    validate_token(token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

token = ''

    @lru_cache()
    def validate_token(token: str) -> bool:
        """
        Validate Telegram token
    
        :param token:
        :return:
        """
        if not isinstance(token, str):
            raise TokenValidationError(
                f"Token is invalid! It must be 'str' type instead of {type(token)} type."
            )
    
        if any(x.isspace() for x in token):
            message = "Token is invalid! It can't contains spaces."
            raise TokenValidationError(message)
    
        left, sep, right = token.partition(":")
        if (not sep) or (not left.isdigit()) or (not right):
>           raise TokenValidationError("Token is invalid!")
E           aiogram.utils.token.TokenValidationError: Token is invalid!

venv/lib/python3.9/site-packages/aiogram/utils/token.py:27: TokenValidationError
___________________ test_unknown_supplier_triggers_keyboard ____________________

    def test_unknown_supplier_triggers_keyboard():
        parsed = ParsedData(
            supplier=None,
            date=date(2025, 4, 28),
            positions=[{"name": "Item A", "qty": 1, "unit": "pcs", "price": 10000}],
        )
        # Проверка: строка-дату принимает без ошибки
        parsed2 = ParsedData(
            supplier=None,
            date="2025-04-28",
            positions=[{"name": "Item A", "qty": 1, "unit": "pcs", "price": 10000}],
        )
        assert parsed2.date == date(2025, 4, 28)
        match_results = [{"name": "Item A", "qty": 1, "unit": "pcs", "status": "unknown"}]
        report, _ = build_report(parsed, match_results)
        assert "Unknown supplier" in report
        kb = build_main_kb()
        assert kb is not None
>       assert any(
            "edit:0" in btn.callback_data for row in kb.inline_keyboard for btn in row
        )
E       assert False
E        +  where False = any(<generator object test_unknown_supplier_triggers_keyboard.<locals>.<genexpr> at 0x1176a1ba0>)

tests/test_unknown_flow.py:26: AssertionError
=============================== warnings summary ===============================
tests/test_assistant_http.py: 1 warning
tests/test_edit_flow_integration.py: 10 warnings
  /Users/Denis/notav3 cursor /Nota-v3-/venv/lib/python3.9/site-packages/fakeredis/_connection.py:179: DeprecationWarning: Call to '__init__' function with deprecated usage of input argument/s 'retry_on_timeout'. (TimeoutError is included by default.) -- Deprecated since version 6.0.0.
    super().__init__(**kwds)

tests/test_keyboard_main_edit.py::test_cb_edit_line_state_transition
  /Users/Denis/notav3 cursor /Nota-v3-/bot.py:719: RuntimeWarning: coroutine 'AsyncMockMixin._execute_mock_call' was never awaited
    await handle_edit_free(callback, state)
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

tests/test_keyboard_main_edit.py::test_cb_edit_line_state_transition
  /Users/Denis/notav3 cursor /Nota-v3-/tests/test_keyboard_main_edit.py:90: RuntimeWarning: coroutine 'AsyncMockMixin._execute_mock_call' was never awaited
    await bot.cb_edit_line(callback, state)
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

tests/test_ocr.py::test_direct_vision_api
tests/test_ocr.py::test_json_extraction_with_nested_data
tests/test_postprocessing.py::test_postprocess_parsed_data
tests/test_postprocessing.py::test_postprocess_with_direct_patch
  /Users/Denis/notav3 cursor /Nota-v3-/app/postprocessing.py:114: PydanticDeprecatedSince20: The `dict` method is deprecated; use `model_dump` instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    log_indonesian_invoice(req_id, parsed.dict(), phase="postprocessing")

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/test_formatter_no_bad_chars.py::test_formatter_with_telegram_exception
FAILED tests/test_formatters.py::test_format_price - AssertionError: assert '...
FAILED tests/test_formatters.py::test_parse_date - AssertionError: assert '20...
FAILED tests/test_free_edit_date.py::test_free_edit_date - AssertionError: Ex...
FAILED tests/test_free_edit_price.py::test_free_edit_price - AssertionError: ...
FAILED tests/test_fuzzy_confirm.py::test_handle_free_edit_text_fuzzy_suggestion
FAILED tests/test_fuzzy_confirm.py::test_confirm_fuzzy_name - AssertionError:...
FAILED tests/test_handlers.py::test_start_handler - aiogram.utils.token.Token...
FAILED tests/test_handlers.py::test_text_fallback - aiogram.utils.token.Token...
FAILED tests/test_keyboard_main_edit.py::test_cb_edit_line_state_transition
FAILED tests/test_latency_logging.py::test_latency_logging_info_and_warning
FAILED tests/test_monitor.py::test_monitor_triggers_alert - AssertionError: A...
FAILED tests/test_ocr.py::test_direct_vision_api - assert 4096 == 2048
FAILED tests/test_ocr_function_call.py::test_openai_function_call - RuntimeEr...
FAILED tests/test_parse_commands_en.py::test_parse_commands_en[total amount 9999.50-expected3]
FAILED tests/test_parse_mode.py::test_edit_message_text_safe_parse_mode_html
FAILED tests/test_redis_cache.py::test_cache_set_and_get_mock - AssertionErro...
FAILED tests/test_redis_cache.py::test_cache_overwrite_mock - AssertionError:...
FAILED tests/test_single_message_ux.py::test_progress_edit_single_msg - aiogr...
FAILED tests/test_unknown_flow.py::test_unknown_supplier_triggers_keyboard - ...
ERROR tests/test_latency_logging.py::test_latency_logging_info_and_warning - ...
ERROR tests/test_monitor.py::test_monitor_triggers_alert - TypeError: Level n...
ERROR tests/test_monitor.py::test_monitor_not_triggered_for_few_errors - Type...
ERROR tests/test_photo_handler.py::test_photo_ok - RuntimeError: There is no ...
ERROR tests/test_photo_handler.py::test_photo_error - RuntimeError: There is ...
ERROR tests/test_trace_logging.py::test_run_thread_safe_logs_error_traceid - ...
======= 20 failed, 160 passed, 2 skipped, 17 warnings, 6 errors in 6.97s =======
