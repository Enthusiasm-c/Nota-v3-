#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Nota v3 - Telegram Bot for OCR and Product Matching
Enhanced with AI assistants, image enhancement, and OCR pipeline optimizations
"""

import asyncio
import atexit
import logging
import os
import shutil
import sys
import time
import traceback
import uuid
from pathlib import Path
from typing import Any, Dict, List

import psutil
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, Message

from app import data_loader, matcher
from app.config import settings
from app.formatters.report import build_report
from app.fsm.states import NotaStates
from app.handlers.tracing_log_middleware import TracingLogMiddleware
from app.i18n import t
from app.keyboards import build_main_kb, kb_help_back, kb_main
from app.utils.api_decorators import with_async_retry_backoff
from app.utils.file_manager import cleanup_temp_files, ensure_temp_dirs

# Import optimized logging configuration
from app.utils.logger_config import configure_logging, get_buffered_logger
from app.utils.md import escape_html
from app.utils.optimized_safe_edit import optimized_safe_edit
from json_trace_logger import setup_json_trace_logger

# Aiogram –∏–º–ø–æ—Ä—Ç—ã

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è

# –ò–º–ø–æ—Ä—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è


# Configure logging with optimized settings
configure_logging(environment=os.getenv("ENV", "development"), log_dir="logs")

# Get buffered logger for this module
logger = get_buffered_logger(__name__)

# Create tmp dir if not exists
TMP_DIR = Path("tmp")
TMP_DIR.mkdir(exist_ok=True)

# –°–æ–∑–¥–∞–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
ensure_temp_dirs()


async def periodic_cleanup():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã."""
    while True:
        try:
            cleanup_count = await asyncio.to_thread(cleanup_temp_files)
            if cleanup_count > 0:
                print(f"Periodic cleanup: removed {cleanup_count} old temp files")
        except Exception as e:
            print(f"Error during periodic cleanup: {e}")
        await asyncio.sleep(3600)  # 1 —á–∞—Å


def cleanup_tmp():
    try:
        shutil.rmtree(TMP_DIR)
        TMP_DIR.mkdir(exist_ok=True)
        logger.info("Cleaned up tmp directory.")
    except Exception as e:
        logger.error(f"Failed to clean tmp/: {e}")


atexit.register(cleanup_tmp)


def create_bot_and_dispatcher():
    setup_json_trace_logger()
    storage = MemoryStorage()
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å aiogram 3.7.0+
    bot = Bot(token=settings.TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
    dp = Dispatcher(storage=storage)
    dp.message.middleware(TracingLogMiddleware())
    dp.callback_query.middleware(TracingLogMiddleware())
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤ —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –≤ register_handlers
    return bot, dp


async def cmd_start(message: Message):
    await message.answer(
        "üëã Hello! I'm Nota AI Bot - a smart invoice processing assistant.\n\n"
        "üì∏ <b>Just send a photo</b> of your invoice and I'll analyze it\n"
        "‚úçÔ∏è <b>Edit with text</b>: 'line 3 qty 5' or 'date 2024-12-25'\n"
        "‚ùå <b>Cancel anytime</b>: type 'cancel'\n\n"
        "üí¨ <i>No buttons needed - just chat naturally!</i>",
        parse_mode="HTML",
    )


async def global_error_handler(event, exception):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫—Ä–∞—à–µ–π –±–æ—Ç–∞."""
    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –≤ –ª–æ–≥–∞—Ö
    error_id = f"error_{uuid.uuid4().hex[:8]}"

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
    logger.error(f"[{error_id}] –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {exception}")
    logger.error(f"[{error_id}] –¢–∏–ø —Å–æ–±—ã—Ç–∏—è: {type(event).__name__}")

    # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
    trace = traceback.format_exc()
    logger.error(f"[{error_id}] –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:\n{trace}")

    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    try:
        if hasattr(event, "from_user") and event.from_user:
            user_id = event.from_user.id
        elif hasattr(event, "chat") and event.chat:
            user_id = event.chat.id
        else:
            user_id = "unknown"

        logger.error(f"[{error_id}] –û—à–∏–±–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
    except AttributeError as e:
        logger.error(f"[{error_id}] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        if hasattr(event, "answer"):
            await event.answer("An error occurred. Please try again.")
        elif hasattr(event, "reply"):
            await event.reply("An error occurred. Please try again.")
        elif hasattr(event, "message") and hasattr(event.message, "answer"):
            await event.message.answer("An error occurred. Please try again.")

        logger.info(f"[{error_id}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    except Exception as e:
        logger.error(f"[{error_id}] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")

    # –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –±–æ—Ç –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç—É
    return True  # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –æ—à–∏–±–∫–∏


def register_handlers(dp, bot=None):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞.

    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    logger.critical("üîß –ù–ê–ß–ê–õ–û –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í")
    print("üîß –ù–ê–ß–ê–õ–û –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    dp.errors.register(global_error_handler)
    logger.critical("üîß –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    print("üîß –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")

    try:
        logger.critical("üîß –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç —Ä–æ—É—Ç–µ—Ä–æ–≤")
        print("üîß –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç —Ä–æ—É—Ç–µ—Ä–æ–≤")

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
        try:
            from app.handlers.edit_flow import router as edit_flow_router

            logger.critical("üîß ‚úÖ edit_flow_router –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
            print("üîß ‚úÖ edit_flow_router –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.critical(f"üîß ‚ùå –û–®–ò–ë–ö–ê –∏–º–ø–æ—Ä—Ç–∞ edit_flow_router: {e}")
            print(f"üîß ‚ùå –û–®–ò–ë–ö–ê –∏–º–ø–æ—Ä—Ç–∞ edit_flow_router: {e}")
            raise

        try:
            from app.handlers.syrve_handler import router as syrve_router

            logger.critical("üîß ‚úÖ syrve_router –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
            print("üîß ‚úÖ syrve_router –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.critical(f"üîß ‚ùå –û–®–ò–ë–ö–ê –∏–º–ø–æ—Ä—Ç–∞ syrve_router: {e}")
            print(f"üîß ‚ùå –û–®–ò–ë–ö–ê –∏–º–ø–æ—Ä—Ç–∞ syrve_router: {e}")
            raise

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω —Ä–æ—É—Ç–µ—Ä
        if not hasattr(dp, "_registered_routers"):
            dp._registered_routers = set()

        logger.critical("üîß –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ä–æ—É—Ç–µ—Ä–æ–≤")
        print("üîß –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ä–æ—É—Ç–µ—Ä–æ–≤")

        # –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è,
        # —á—Ç–æ–±—ã –æ–Ω –∏–º–µ–ª –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        if "edit_flow_router" not in dp._registered_routers:
            logger.critical("üîß –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º edit_flow_router")
            print("üîß –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º edit_flow_router")
            dp.include_router(edit_flow_router)
            dp._registered_routers.add("edit_flow_router")
            logger.critical("üîß ‚úÖ edit_flow_router –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            print("üîß ‚úÖ edit_flow_router –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            logger.info("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        else:
            logger.critical("üîß ‚ö†Ô∏è edit_flow_router —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            print("üîß ‚ö†Ô∏è edit_flow_router —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")

        # –ó–∞—Ç–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        if "photo_router" not in dp._registered_routers:
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            from app.handlers.optimized_photo_handler import router as optimized_photo_router

            dp.include_router(optimized_photo_router)
            dp._registered_routers.add(
                "photo_router"
            )  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            logger.info("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")

            # –Ø–≤–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã
            from app.handlers.optimized_photo_handler import optimized_photo_handler

            logger.info("–î–æ–±–∞–≤–ª—è–µ–º –ø—Ä—è–º—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ñ–æ—Ç–æ-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞")
            dp.message.register(optimized_photo_handler, F.photo)

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä Syrve –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö
        if "syrve_router" not in dp._registered_routers:
            dp.include_router(syrve_router)
            dp._registered_routers.add("syrve_router")
            logger.info("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Syrve")

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ä—Ç
        dp.message.register(cmd_start, CommandStart())

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ action:new –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –º—ã —É–±—Ä–∞–ª–∏ —ç—Ç—É –∫–Ω–æ–ø–∫—É –∏–∑ –º–µ–Ω—é
        # –û—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–≥–ª—É—à–∫—É –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∫–∞–∫–æ–π-—Ç–æ –∫–ª–∏–µ–Ω—Ç –≤—Å—ë –∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç —ç—Ç–æ—Ç callback
        @dp.callback_query(F.data == "action:new")
        async def cb_new_invoice(call: CallbackQuery, state: FSMContext):
            """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —É—Å—Ç–∞—Ä–µ–≤—à–µ–π –∫–Ω–æ–ø–∫–∏ Upload New Invoice"""
            # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –∏ —Å–æ–æ–±—â–∞–µ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
            await call.answer("Just send a new photo")

            # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ
            await state.clear()
            await state.set_state(NotaStates.awaiting_file)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–Ω–æ–ø–æ–∫
            await call.message.answer("üì± Just send an invoice photo for processing.")

            logger.info(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —É—Å—Ç–∞—Ä–µ–≤—à—É—é –∫–Ω–æ–ø–∫—É upload_new"
            )

        # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ—Å–ª–µ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö)
        @dp.callback_query(
            ~F.data.in_(["edit:free", "action:new"])
            & ~F.data.startswith("fuzzy:")
            & ~F.data.startswith("confirm:")  # –ò—Å–∫–ª—é—á–∞–µ–º –≤—Å–µ confirm: callback'—ã
        )
        async def debug_unhandled_callbacks(call, state: FSMContext):
            """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö callback-–æ–≤ (—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö)"""
            logger.critical(
                f"üîç UNHANDLED CALLBACK: data='{call.data}', message_id={call.message.message_id}"
            )
            print(
                f"üîç UNHANDLED CALLBACK: data='{call.data}', message_id={call.message.message_id}"
            )

            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–µ –∑–∞–≤–∏—Å–∞–ª–∞
            await call.answer("‚ö†Ô∏è Unhandled callback")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await call.message.answer(f"‚ö†Ô∏è Button '{call.data}' not handled. Please try again.")

        # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–ü–û–°–õ–ï–î–ù–ò–ú!)
        @dp.message(F.photo)
        async def debug_all_photos(message: Message, state: FSMContext):
            """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–π (—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö)"""
            current_state = await state.get_state()
            logger.critical(
                f"üì∑ UNHANDLED PHOTO: user_id={message.from_user.id}, state={current_state}"
            )
            print(f"üì∑ UNHANDLED PHOTO: user_id={message.from_user.id}, state={current_state}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer("‚ö†Ô∏è Photo not processed. Send an invoice photo.")

        # –°–æ–∑–¥–∞–µ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º fallback —Ä–æ—É—Ç–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–∏–º –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        if "fallback_router" not in dp._registered_routers:
            from aiogram import Router

            fallback_router = Router()

            # –î–æ–±–∞–≤–ª—è–µ–º fallback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ —Ä–æ—É—Ç–µ—Ä –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            fallback_router.message.register(all_messages_fallback)

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º fallback —Ä–æ—É—Ç–µ—Ä –ü–û–°–õ–ï–î–ù–ò–ú
            dp.include_router(fallback_router)
            dp._registered_routers.add("fallback_router")
            logger.critical("üîß ‚úÖ fallback_router –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–º")
            print("üîß ‚úÖ fallback_router –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–º")

        logger.critical("üîß ‚úÖ –í—Å–µ —Ä–æ—É—Ç–µ—Ä—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        print("üîß ‚úÖ –í—Å–µ —Ä–æ—É—Ç–µ—Ä—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
        # –î–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ü–µ–ª–µ–π –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ bot –∏ dp —É–±—Ä–∞–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏.
bot = None
dp = None
# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–±–æ—Ä–∫–∏ –º—É—Å–æ—Ä–∞
_preload_task = None
_pool_task = None
_polling_task = None
# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –¥–ª—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
_edit_cache: Dict[str, Dict[str, Any]] = {}
# assistant_thread_id —É–±—Ä–∞–Ω –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ FSMContext


user_matches = {}


def is_inline_kb(kb):
    return kb is None or isinstance(kb, InlineKeyboardMarkup)


# Import the optimized version of safe_edit


async def safe_edit(bot, chat_id, msg_id, text, kb=None, **kwargs):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫.

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        chat_id: ID —á–∞—Ç–∞
        msg_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        kb: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è edit_message_text
    """
    # –ù–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML-—Ç–µ–≥–∏, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è HTML —Ä–µ–∂–∏–º
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è Markdown
    parse_mode = kwargs.get("parse_mode")
    if parse_mode in ("MarkdownV2", "MARKDOWN_V2") and not (text and text.startswith("\\")):
        text = escape_html(text)

    # –í—ã–∑—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Ñ—É–Ω–∫—Ü–∏–∏
    return await optimized_safe_edit(bot, chat_id, msg_id, text, kb, **kwargs)


@with_async_retry_backoff(max_retries=2, initial_backoff=1.0, backoff_factor=2.0)
async def handle_field_edit(message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π –∏–Ω–≤–æ–π—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä with_async_retry_backoff –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫.
    """
    logger.debug(f"BUGFIX: Starting field edit handler for user {message.from_user.id}")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    idx = data.get("edit_idx")
    field = data.get("edit_field")
    msg_id = data.get("msg_id")
    lang = data.get("lang", "en")  # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –í–ê–ñ–ù–û: –æ—á–∏—â–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏—Å—å –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ
    await state.update_data(editing_mode=None)
    logger.debug("BUGFIX: Cleared editing_mode in state")

    if idx is None or field is None or msg_id is None:
        logger.warning(
            f"Missing required field edit data in state: idx={idx}, field={field}, msg_id={msg_id}"
        )
        await message.answer(t("error.edit_data_not_found", lang=lang))
        return

    user_id = message.from_user.id
    key = (user_id, msg_id)

    logger.debug(f"BUGFIX: Looking for invoice data with key {key}")
    if key not in user_matches:
        logger.warning(f"No matches found for user {user_id}, message {msg_id}")
        await message.answer(t("error.invoice_data_not_found", lang=lang))
        return

    entry = user_matches[key]
    text = message.text.strip()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
    processing_msg = await message.answer(t("status.processing_changes", lang=lang))

    try:
        logger.debug(f"BUGFIX: Processing field edit, text: '{text[:30]}...' (truncated)")

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–ø—Ä—è–º—É—é –¥–∞–Ω–Ω—ã–µ –≤ –∏–Ω–≤–æ–π—Å–µ
        old_value = entry["match_results"][idx].get(field, "")
        entry["match_results"][idx][field] = text
        logger.debug(f"BUGFIX: Updated {field} from '{old_value}' to '{text}'")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∞—Ç—á–µ—Ä –∑–∞–Ω–æ–≤–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if field in ["name", "qty", "unit"]:
            products = data_loader.load_products("data/base_products.csv")
            entry["match_results"][idx] = matcher.match_positions(
                [entry["match_results"][idx]], products
            )[0]
            logger.debug(
                f"BUGFIX: Re-matched item, new status: {entry['match_results'][idx].get('status')}"
            )

        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        parsed_data = entry["parsed_data"]
        report, has_errors = build_report(parsed_data, entry["match_results"], escape_html=True)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –æ—Ç—á–µ—Ç –±–µ–∑ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        formatted_report = report

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –æ—Ç—á–µ—Ç–æ–º
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö HTML-—Ç–µ–≥–æ–≤
            from app.keyboards import build_edit_keyboard
            from app.utils.md import clean_html

            keyboard = build_edit_keyboard(True)

            if "<" in formatted_report and ">" in formatted_report:
                try:
                    # –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ —Å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                    result = await message.answer(
                        formatted_report, reply_markup=keyboard, parse_mode="HTML"
                    )
                    logger.debug("Successfully sent message with HTML formatting")
                except Exception as html_error:
                    logger.error(f"Error sending with HTML parsing: {html_error}")
                    try:
                        # –ü—Ä–æ–±—É–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                        result = await message.answer(
                            formatted_report, reply_markup=keyboard, parse_mode=None
                        )
                        logger.debug("Successfully sent message without HTML parsing")
                    except Exception as format_error:
                        logger.error(f"Error sending without HTML parsing: {format_error}")
                        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å - –æ—á–∏—â–∞–µ–º HTML-—Ç–µ–≥–∏
                        clean_formatted_report = clean_html(formatted_report)
                        result = await message.answer(
                            clean_formatted_report, reply_markup=keyboard, parse_mode=None
                        )
                        logger.debug("Sent message with cleaned HTML")
            else:
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ª—É—á–∞–π - –ø—Ä–æ–±—É–µ–º —Å HTML
                result = await message.answer(
                    formatted_report, reply_markup=keyboard, parse_mode="HTML"
                )

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –≤ user_matches —Å –Ω–æ–≤—ã–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
            new_msg_id = result.message_id
            new_key = (user_id, new_msg_id)
            user_matches[new_key] = entry.copy()

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å
            if key in user_matches and key != new_key:
                del user_matches[key]

            logger.debug(f"BUGFIX: Created new report with message_id {new_msg_id}")

        except Exception as e:
            logger.error(
                "Telegram error: %s Text length: %d Text sample: %s",
                str(e),
                len(formatted_report),
                formatted_report[:200],
            )
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            try:
                simple_msg = t(
                    "example.edit_field_success",
                    {"field": field, "value": text, "line": idx + 1},
                    lang=lang,
                )
                if not simple_msg:
                    simple_msg = f"Field '{field}' updated to '{text}' for line {idx+1}"
                result = await message.answer(simple_msg, parse_mode=None)
                logger.info("Sent fallback simple message")
                return  # –í—ã—Ö–æ–¥–∏–º –¥–æ—Å—Ä–æ—á–Ω–æ
            except Exception as final_e:
                logger.error(f"Final fallback message failed: {final_e}")
                try:
                    # –ö—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π - –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ i18n
                    result = await message.answer("Field updated successfully.", parse_mode=None)
                    logger.info("Sent basic fallback message")
                    return  # –í—ã—Ö–æ–¥–∏–º –¥–æ—Å—Ä–æ—á–Ω–æ
                except Exception as absolutely_final_e:
                    logger.error(f"Absolutely final fallback failed: {absolutely_final_e}")
                    raise

    except Exception as e:
        logger.error(f"Error handling field edit: {str(e)}")
        await message.answer(
            t("error.edit_failed", lang=lang)
            or "An error occurred while processing the command. Please try again."
        )
    finally:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        try:
            await bot.delete_message(message.chat.id, processing_msg.message_id)
        except Exception:
            pass

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞
        await state.set_state(NotaStates.editing)


async def cb_confirm(callback: CallbackQuery, state: FSMContext):
    # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    from app.handlers.syrve_handler import handle_invoice_confirm

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Syrve
    await handle_invoice_confirm(callback, state)


async def help_command(message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data = await state.get_data()
    lang = data.get("lang", "en")

    await state.set_state(NotaStates.help)
    await message.answer(
        t("main.bot_help", lang=lang),
        reply_markup=kb_help_back(),
    )


async def cancel_command(message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data = await state.get_data()
    lang = data.get("lang", "en")

    await state.set_state(NotaStates.main_menu)
    await message.answer(
        t("main.ready_to_work", lang=lang),
        reply_markup=kb_main(),
    )


async def handle_edit_reply(message):
    user_id = message.from_user.id
    orig_msg_id = message.reply_to_message.message_id
    key = (user_id, orig_msg_id)
    if key not in user_matches:
        return
    entry = user_matches[key]
    if "edit_idx" not in entry:
        return
    idx = entry.pop("edit_idx")
    # Update name (simplest: replace name, keep other fields)
    match_results = entry["match_results"]
    match_results[idx]["name"] = message.text.strip()
    match_results[idx]["status"] = "unknown"  # Or re-match if needed
    parsed_data = entry["parsed_data"]
    report, has_errors = build_report(parsed_data, match_results)
    await message.reply(f"Updated line {idx+1}.\n" + report)


async def confirm_fuzzy_name(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è fuzzy-—Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø—Ä–æ–¥—É–∫—Ç–∞.

    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏ "–î–∞"
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ state
    data = await state.get_data()
    fuzzy_match = data.get("fuzzy_match")
    fuzzy_line = data.get("fuzzy_line")
    fuzzy_msg_id = data.get("fuzzy_msg_id")
    lang = data.get("lang", "en")  # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if not all([fuzzy_match, fuzzy_line is not None, fuzzy_msg_id]):
        await callback.message.answer(t("error.confirm_data_not_found", lang=lang))
        await state.set_state(NotaStates.editing)
        await callback.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º –∏–Ω–≤–æ–π—Å–∞
    user_id = callback.from_user.id
    key = (user_id, fuzzy_msg_id)

    if key not in user_matches:
        alt_keys = [k for k in user_matches.keys() if k[0] == user_id]
        if alt_keys:
            key = max(alt_keys, key=lambda k: k[1])
        else:
            await callback.message.answer(t("error.invoice_data_not_found", lang=lang))
            await state.set_state(NotaStates.editing)
            await callback.answer()
            return

    entry = user_matches[key]

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø—Ä–æ–¥—É–∫—Ç–∞
    entry["match_results"][fuzzy_line]["name"] = fuzzy_match

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    products = data_loader.load_products("data/base_products.csv")

    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º matcher –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    updated_positions = matcher.match_positions([entry["match_results"][fuzzy_line]], products)

    if updated_positions:
        entry["match_results"][fuzzy_line] = updated_positions[0]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç
    report, has_errors = build_report(
        entry["parsed_data"], entry["match_results"], escape_html=True
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –æ—Ç—á–µ—Ç–æ–º
    result = await callback.message.answer(
        report, reply_markup=build_main_kb(has_errors=has_errors), parse_mode="HTML"
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ user_matches —Å –Ω–æ–≤—ã–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    new_msg_id = result.message_id
    new_key = (user_id, new_msg_id)
    user_matches[new_key] = entry.copy()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π message_id –≤ state
    await state.update_data(edit_msg_id=new_msg_id)

    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await callback.message.edit_reply_markup(reply_markup=None)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.set_state(NotaStates.editing)

    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback.answer()


async def reject_fuzzy_name(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è fuzzy-—Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø—Ä–æ–¥—É–∫—Ç–∞.

    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏ "–ù–µ—Ç"
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ state
    data = await state.get_data()
    fuzzy_original = data.get("fuzzy_original")
    fuzzy_line = data.get("fuzzy_line")
    fuzzy_msg_id = data.get("fuzzy_msg_id")
    lang = data.get("lang", "en")  # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if not all([fuzzy_original, fuzzy_line is not None, fuzzy_msg_id]):
        await callback.message.answer(t("error.reject_data_not_found", lang=lang))
        await state.set_state(NotaStates.editing)
        await callback.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º –∏–Ω–≤–æ–π—Å–∞
    user_id = callback.from_user.id
    key = (user_id, fuzzy_msg_id)

    if key not in user_matches:
        alt_keys = [k for k in user_matches.keys() if k[0] == user_id]
        if alt_keys:
            key = max(alt_keys, key=lambda k: k[1])
        else:
            await callback.message.answer(t("error.invoice_data_not_found", lang=lang))
            await state.set_state(NotaStates.editing)
            await callback.answer()
            return

    entry = user_matches[key]

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è
    entry["match_results"][fuzzy_line]["name"] = fuzzy_original
    entry["match_results"][fuzzy_line]["status"] = "unknown"

    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç
    report, has_errors = build_report(
        entry["parsed_data"], entry["match_results"], escape_html=True
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –æ—Ç—á–µ—Ç–æ–º
    result = await callback.message.answer(
        report, reply_markup=build_main_kb(has_errors=has_errors), parse_mode="HTML"
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ user_matches —Å –Ω–æ–≤—ã–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    new_msg_id = result.message_id
    new_key = (user_id, new_msg_id)
    user_matches[new_key] = entry.copy()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π message_id –≤ state
    await state.update_data(edit_msg_id=new_msg_id)

    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await callback.message.edit_reply_markup(reply_markup=None)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.set_state(NotaStates.editing)

    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback.answer()


async def all_messages_fallback(message, state: FSMContext):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π fallback –¥–ª—è –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –æ–±—ã—á–Ω—ã–π text_fallback."""
    # –ò–∑–æ–ª–∏—Ä—É–µ–º –≤—Å—é —Ñ—É–Ω–∫—Ü–∏—é –≤ try-except –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ª—é–±—ã—Ö –æ—à–∏–±–æ–∫
    try:
        import re
        import traceback

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –∫–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤–Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏
        from app.fsm.states import EditFree, NotaStates

        logger.critical(f"–°–¢–ê–†–¢: all_messages_fallback –≤—ã–∑–≤–∞–Ω, —Ç–∏–ø={type(message).__name__}")

        # –ü–æ–ª—É—á–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            text = getattr(message, "text", None) or ""
            user_id = getattr(message.from_user, "id", "unknown")
            logger.critical(f"–°–¢–ê–†–¢: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: '{text}', user_id={user_id}")
        except Exception as e:
            logger.critical(f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É –¥–∞—Ç—ã –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ –∏ –Ω–∞–¥–µ–∂–Ω–æ
        try:
            is_date_command = False
            is_line_edit_command = False
            text_lower = text.lower().strip()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É –¥–∞—Ç—ã
            if text_lower.startswith("date ") or text_lower.startswith("–¥–∞—Ç–∞ "):
                is_date_command = True
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "25.06.2024")
            elif re.match(r"^\d{1,2}[./-]\d{1,2}[./-]\d{2,4}$", text_lower):
                is_date_command = True
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                text = f"date {text}"
            # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã
            elif (
                "–¥–∞—Ç—É –Ω–∞" in text_lower
                or "–¥–∞—Ç–∞ –Ω–∞" in text_lower
                or "–∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É" in text_lower
                or "–∏–∑–º–µ–Ω–∏ –¥–∞—Ç—É" in text_lower
                or "change date" in text_lower
                or "set date" in text_lower
            ):
                is_date_command = True
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞—Ç—É –∏–∑ –∫–æ–º–∞–Ω–¥—ã
                date_match = re.search(r"(\d{1,2}[./-]\d{1,2}[./-]\d{2,4})", text)
                if date_match:
                    extracted_date = date_match.group(1)
                    logger.critical(
                        f"–°–¢–ê–†–¢: –ò–∑–≤–ª–µ—á–µ–Ω–∞ –¥–∞—Ç–∞ '{extracted_date}' –∏–∑ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ"
                    )
                    # –ü–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É –¥–∞—Ç—ã
                    text = f"date {extracted_date}"
                else:
                    # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞–ø—Ä—è–º—É—é –≤ GPT-–ø–∞—Ä—Å–µ—Ä
                    logger.critical(
                        f"–°–¢–ê–†–¢: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ –≤ GPT-–ø–∞—Ä—Å–µ—Ä: '{text}'"
                    )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏
            elif re.match(r"^line\s+\d+", text_lower) or re.match(r"^—Å—Ç—Ä–æ–∫–∞\s+\d+", text_lower):
                is_line_edit_command = True
                logger.critical(f"–°–¢–ê–†–¢: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏: '{text}'")
            # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ
            elif any(
                phrase in text_lower
                for phrase in [
                    "–∏–∑–º–µ–Ω–∏",
                    "–∏–∑–º–µ–Ω–∏—Ç—å",
                    "–ø–æ–º–µ–Ω—è–π",
                    "–ø–æ–º–µ–Ω—è—Ç—å",
                    "—É—Å—Ç–∞–Ω–æ–≤–∏",
                    "—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
                    "change",
                    "edit",
                    "update",
                    "set",
                    "modify",
                ]
            ):
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ–≤–∞ "–¥–∞—Ç—É" –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –¥–∞—Ç—ã
                if not any(date_word in text_lower for date_word in ["–¥–∞—Ç—É", "–¥–∞—Ç–∞", "date"]):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É–∫–∞–∑–∞–Ω–∏—è –Ω–∞ —Å—Ç—Ä–æ–∫—É
                    line_match = re.search(r"—Å—Ç—Ä–æ–∫[–∞–µ–∏—É]\s*(\d+)", text_lower)
                    if not line_match:
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ "line X" –∏–ª–∏ "row X"
                        line_match = re.search(r"(?:line|row)\s*(\d+)", text_lower)

                    if line_match:
                        line_num = line_match.group(1)
                        is_line_edit_command = True
                        logger.critical(
                            f"–°–¢–ê–†–¢: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ: '{text}', —Å—Ç—Ä–æ–∫–∞ {line_num}"
                        )
                    else:
                        # –û–±—â–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                        is_line_edit_command = True
                        logger.critical(
                            f"–°–¢–ê–†–¢: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ–±—â–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ: '{text}'"
                        )

            if is_date_command:
                logger.critical(f"–°–¢–ê–†–¢: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–∞—Ç—ã: '{text}'")
            elif is_line_edit_command:
                logger.critical(f"–°–¢–ê–†–¢: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏: '{text}'")
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                current_state = await state.get_state()
                data = await state.get_data()
                invoice = data.get("invoice")

                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –µ—Å—Ç—å –∏–Ω–≤–æ–π—Å,
                # —Ç–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –Ω–∞ GPT-–ø–∞—Ä—Å–µ—Ä
                if (
                    current_state in [str(EditFree.awaiting_input), str(NotaStates.editing)]
                    and invoice
                ):
                    logger.critical(
                        f"–°–¢–ê–†–¢: –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É –Ω–∞ GPT-–ø–∞—Ä—Å–µ—Ä: '{text}'"
                    )
                    is_line_edit_command = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                else:
                    logger.critical(f"–°–¢–ê–†–¢: –ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: '{text}'")
                    return
        except Exception as e:
            logger.critical(f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É: {e}")
            return

        # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –¥–∞—Ç—ã –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if is_date_command or is_line_edit_command:
            try:
                current_state = await state.get_state()
                logger.critical(f"–°–¢–ê–†–¢: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
            except Exception as e:
                logger.critical(f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
                return

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω–≤–æ–π—Å–∞
            try:
                data = await state.get_data()
                invoice = data.get("invoice")
                logger.critical(f"–°–¢–ê–†–¢: –ò–Ω–≤–æ–π—Å –Ω–∞–π–¥–µ–Ω: {bool(invoice)}")
            except Exception as e:
                logger.critical(f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω–≤–æ–π—Å–∞
            if not invoice:
                try:
                    await message.answer(
                        "Invoice not found for editing. Send a photo or click Edit again."
                    )
                    logger.critical("–°–¢–ê–†–¢: –ò–Ω–≤–æ–π—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
                    return
                except Exception as e:
                    logger.critical(f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    return

            # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è: EditFree.awaiting_input –∏ NotaStates.editing
            if current_state not in [str(EditFree.awaiting_input), str(NotaStates.editing)]:
                try:
                    logger.critical(
                        f"–°–¢–ê–†–¢: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ EditFree.awaiting_input –∏–∑ {current_state}"
                    )
                    await state.set_state(EditFree.awaiting_input)
                except Exception as e:
                    logger.critical(f"–û–®–ò–ë–ö–ê –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
                    return

            # –ï—Å–ª–∏ –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ, –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            try:
                # –ü–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
                import importlib

                from app.fsm.states import EditFree, NotaStates

                # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–Ω–∞—á–∞–ª–∞
                try:
                    logger.critical("–°–¢–ê–†–¢: –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å incremental_edit_flow.py")
                    inc_edit_flow = importlib.import_module("app.handlers.incremental_edit_flow")
                    await inc_edit_flow.handle_free_edit_text(message, state)
                    logger.critical(
                        "–°–¢–ê–†–¢: incremental_edit_flow.handle_free_edit_text –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ"
                    )
                    return
                except ImportError:
                    logger.critical(
                        "–°–¢–ê–†–¢: incremental_edit_flow –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π edit_flow"
                    )
                except Exception as e:
                    logger.critical(f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–∑–æ–≤–µ incremental_edit_flow: {e}")
                    logger.critical(traceback.format_exc())

                # –ï—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π - –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π
                try:
                    logger.critical("–°–¢–ê–†–¢: –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_flow.py")
                    edit_flow = importlib.import_module("app.handlers.edit_flow")
                    await edit_flow.handle_free_edit_text(message, state)
                    logger.critical("–°–¢–ê–†–¢: edit_flow.handle_free_edit_text –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    return
                except Exception as e:
                    logger.critical(f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–∑–æ–≤–µ edit_flow: {e}")
                    logger.critical(traceback.format_exc())

                # –ï—Å–ª–∏ –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                await message.answer(
                    "An error occurred while processing the command. Please try again."
                )
                return
            except Exception as e:
                import traceback

                logger.critical(f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
                logger.critical(traceback.format_exc())
                try:
                    await message.answer(
                        "An error occurred while processing the command. Please try again."
                    )
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")
                return
    except Exception as e:
        import traceback

        logger.critical(f"–ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        logger.critical(traceback.format_exc())
        try:
            await message.answer("A system error occurred. Please try again.")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–∏—Å—Ç–µ–º–Ω–æ–π –æ—à–∏–±–∫–µ: {e}")
        return


# Silence unhandled update logs
async def _dummy(update, data):
    pass


logging.getLogger("aiogram.event").setLevel(logging.DEBUG)


# Remove duplicate NotaStates class
# In-memory store for user sessions: {user_id: {msg_id: {...}}}
user_matches = {}

# Removed duplicate safe_edit function


def _graceful_shutdown(signum, frame):
    """
    Gracefully shuts down the bot
    """
    logger.info("Received shutdown signal")
    cleanup_temp_files()
    sys.exit(0)


def _check_dependencies():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ Python –º–æ–¥—É–ª–∏
        logger.info("‚úÖ Python modules loaded successfully")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        ensure_temp_dirs()
        logger.info("‚úÖ Temporary directories created")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä –æ—à–∏–±–æ–∫
        from app.actions.error_monitor import start_error_monitor

        start_error_monitor("logs/bot.log")
        logger.info("AI Action –º–æ–Ω–∏—Ç–æ—Ä –æ—à–∏–±–æ–∫ –∑–∞–ø—É—â–µ–Ω")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
        try:
            logger.info("‚úÖ Python modules loaded successfully")
        except ImportError as e:
            logger.error(f"‚ùå Error importing Python modules: {e}")
            return False

        return True
    except Exception as e:
        logger.error(f"‚ùå Error checking dependencies: {e}")
        return False


def find_bot_processes() -> List[int]:
    """
    –ù–∞—Ö–æ–¥–∏—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞ (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å).

    Returns:
        –°–ø–∏—Å–æ–∫ PID –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–∞
    """
    bot_pids = []
    current_pid = os.getpid()

    try:
        for process in psutil.process_iter(["pid", "name", "cmdline"]):
            try:
                cmdline = process.info["cmdline"]
                if not cmdline:
                    continue

                # –ò—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã Python, –∑–∞–ø—É—Å–∫–∞—é—â–∏–µ bot.py
                if (
                    any("python" in cmd.lower() for cmd in cmdline)
                    and any("bot.py" in cmd for cmd in cmdline)
                    and process.info["pid"] != current_pid
                ):
                    bot_pids.append(process.info["pid"])
                    logger.info(
                        f"–ù–∞–π–¥–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞: PID {process.info['pid']}, CMD: {' '.join(cmdline[:3])}"
                    )

            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                continue

    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–∞: {e}")

    return bot_pids


def terminate_bot_processes(pids: List[int]) -> bool:
    """
    –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞.

    Args:
        pids: –°–ø–∏—Å–æ–∫ PID –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è

    Returns:
        True –µ—Å–ª–∏ –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ
    """
    if not pids:
        return True

    logger.info(f"–ó–∞–≤–µ—Ä—à–∞—é {len(pids)} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–∞: {pids}")

    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å
    for pid in pids:
        try:
            process = psutil.Process(pid)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é SIGTERM –ø—Ä–æ—Ü–µ—Å—Å—É {pid}")
            process.terminate()
        except (psutil.NoSuchProcess, psutil.AccessDenied) as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å {pid}: {e}")

    # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ

    time.sleep(5)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞—é—Ç
    remaining_pids = []
    for pid in pids:
        try:
            process = psutil.Process(pid)
            if process.is_running():
                remaining_pids.append(pid)
        except psutil.NoSuchProcess:
            pass  # –ü—Ä–æ—Ü–µ—Å—Å —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω

    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ—Ü–µ—Å—Å—ã
    if remaining_pids:
        logger.warning(f"–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞—é {len(remaining_pids)} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {remaining_pids}")
        for pid in remaining_pids:
            try:
                process = psutil.Process(pid)
                logger.warning(f"–û—Ç–ø—Ä–∞–≤–ª—è—é SIGKILL –ø—Ä–æ—Ü–µ—Å—Å—É {pid}")
                process.kill()
            except (psutil.NoSuchProcess, psutil.AccessDenied) as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å {pid}: {e}")

    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    time.sleep(2)
    final_check = find_bot_processes()
    if final_check:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã: {final_check}")
        return False
    else:
        logger.info("‚úÖ –í—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
        return True


def check_and_cleanup_bot_processes():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–∞ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∏—Ö.
    """
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–∞...")

    bot_pids = find_bot_processes()

    if not bot_pids:
        logger.info("‚úÖ –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return True

    logger.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(bot_pids)} –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–∞")

    success = terminate_bot_processes(bot_pids)
    if not success:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞. –í—ã—Ö–æ–∂—É.")
        sys.exit(1)

    return True


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞
    # check_and_cleanup_bot_processes()  # –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û - —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≤–∏—Å–∞–µ—Ç

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not _check_dependencies():
        logger.error("Failed to check dependencies")
        sys.exit(1)

    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    bot, dp = create_bot_and_dispatcher()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    register_handlers(dp, bot)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("Starting bot...")
    asyncio.run(dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types()))
