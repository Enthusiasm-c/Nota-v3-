#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ Cancel.
"""
import os
import sys
import random
import asyncio
import logging
from aiogram import Bot
from dotenv import load_dotenv
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logger.error("BOT_TOKEN not found in environment variables")
    sys.exit(1)

# ID —á–∞—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
CHAT_ID = os.getenv("TEST_CHAT_ID")
if not CHAT_ID:
    logger.error("TEST_CHAT_ID not found in environment variables. Please set it to your Telegram user ID.")
    logger.error("You can get it by sending /start to @userinfobot")
    sys.exit(1)
    
try:
    CHAT_ID = int(CHAT_ID)
except ValueError:
    logger.error(f"TEST_CHAT_ID must be an integer, got {CHAT_ID}")
    sys.exit(1)


async def test_cancel_button():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ Cancel.
    """
    bot = Bot(token=BOT_TOKEN)
    
    try:
        logger.info(f"Starting test with chat_id={CHAT_ID}")
        
        # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_id = None
        try:
            msg = await bot.send_message(
                chat_id=CHAT_ID,
                text=f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ Cancel\nStart time: {datetime.now().strftime('%H:%M:%S')}"
            )
            message_id = msg.message_id
            logger.info(f"Sent test message, id={message_id}")
        except Exception as e:
            logger.error(f"Error sending message: {e}")
            return
        
        # 2. –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
        await asyncio.sleep(1)
        
        # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, –∫–∞–∫ –≤ –±–æ—Ç–µ
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π Cancel
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton(text="Test Button 1", callback_data=f"test:{random.randint(1, 100)}"),
            InlineKeyboardButton(text="Test Button 2", callback_data=f"test:{random.randint(1, 100)}"),
            InlineKeyboardButton(text="‚ùå Cancel", callback_data="cancel:all")
        )
        
        try:
            msg = await bot.send_message(
                chat_id=CHAT_ID,
                text="Please press the Cancel button below to test fix:",
                reply_markup=keyboard
            )
            logger.info(f"Sent keyboard message, id={msg.message_id}")
        except Exception as e:
            logger.error(f"Error sending keyboard: {e}")
            return
        
        # 4. –í—ã–≤–æ–¥–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        logger.info("Test message sent with Cancel button.")
        logger.info("Instructions:")
        logger.info("1. Press the ‚ùå Cancel button")
        logger.info("2. Observe that the bot quickly responds without hanging")
        logger.info("3. The button should disappear and you should receive confirmation")
        logger.info("4. Check the bot logs for any errors")
        
        # 5. –ö–æ–Ω–µ—Ü —Ç–µ—Å—Ç–∞
        logger.info("Test setup complete. Manual verification required.")
        
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
    finally:
        await bot.session.close()


if __name__ == "__main__":
    logger.info("Starting Cancel button test script")
    asyncio.run(test_cancel_button())
    logger.info("Test script completed")